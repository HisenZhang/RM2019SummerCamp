; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\tasks_1.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\tasks_1.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\CORE -I.\USER -I.\HALLIB\STM32F4xx_HAL_Driver\Inc -I.\SYSTEM -I.\Hardware -I.\App -I.\DSP_LIB\Include -I.\FATFS -I.\FreeRTOS -I.\DMP -I.\DMP\eMPL -I.\RTE\_Project -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32F427xx -DSTM32F4 -DUSE_HAL_DRIVER -DSTM32F427xx -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING --omf_browse=.\obj\tasks_1.crf FreeRTOS\tasks.c]
                          THUMB

                          AREA ||i.eTaskGetState||, CODE, READONLY, ALIGN=2

                  eTaskGetState PROC
;;;1349   
;;;1350   	eTaskState eTaskGetState( TaskHandle_t xTask )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1351   	{
000004  4607              MOV      r7,r0
;;;1352   	eTaskState eReturn;
;;;1353   	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
;;;1354   	const TCB_t * const pxTCB = xTask;
000006  463e              MOV      r6,r7
;;;1355   
;;;1356   		configASSERT( pxTCB );
000008  b956              CBNZ     r6,|L1.32|
00000a  bf00              NOP      
00000c  2040              MOVS     r0,#0x40
00000e  f3808811          MSR      BASEPRI,r0
000012  f3bf8f4f          DSB      
000016  f3bf8f6f          ISB      
00001a  bf00              NOP      
00001c  bf00              NOP      
                  |L1.30|
00001e  e7fe              B        |L1.30|
                  |L1.32|
;;;1357   
;;;1358   		if( pxTCB == pxCurrentTCB )
000020  4817              LDR      r0,|L1.128|
000022  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000024  4286              CMP      r6,r0
000026  d101              BNE      |L1.44|
;;;1359   		{
;;;1360   			/* The task calling this function is querying its own state. */
;;;1361   			eReturn = eRunning;
000028  2400              MOVS     r4,#0
00002a  e026              B        |L1.122|
                  |L1.44|
;;;1362   		}
;;;1363   		else
;;;1364   		{
;;;1365   			taskENTER_CRITICAL();
00002c  f7fffffe          BL       vPortEnterCritical
;;;1366   			{
;;;1367   				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
000030  6975              LDR      r5,[r6,#0x14]
;;;1368   				pxDelayedList = pxDelayedTaskList;
000032  4814              LDR      r0,|L1.132|
000034  f8d08000          LDR      r8,[r0,#0]  ; pxDelayedTaskList
;;;1369   				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
000038  4813              LDR      r0,|L1.136|
00003a  f8d09000          LDR      r9,[r0,#0]  ; pxOverflowDelayedTaskList
;;;1370   			}
;;;1371   			taskEXIT_CRITICAL();
00003e  f7fffffe          BL       vPortExitCritical
;;;1372   
;;;1373   			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
000042  4545              CMP      r5,r8
000044  d001              BEQ      |L1.74|
000046  454d              CMP      r5,r9
000048  d101              BNE      |L1.78|
                  |L1.74|
;;;1374   			{
;;;1375   				/* The task being queried is referenced from one of the Blocked
;;;1376   				lists. */
;;;1377   				eReturn = eBlocked;
00004a  2402              MOVS     r4,#2
00004c  e015              B        |L1.122|
                  |L1.78|
;;;1378   			}
;;;1379   
;;;1380   			#if ( INCLUDE_vTaskSuspend == 1 )
;;;1381   				else if( pxStateList == &xSuspendedTaskList )
00004e  480f              LDR      r0,|L1.140|
000050  4285              CMP      r5,r0
000052  d10b              BNE      |L1.108|
;;;1382   				{
;;;1383   					/* The task being queried is referenced from the suspended
;;;1384   					list.  Is it genuinely suspended or is it blocked
;;;1385   					indefinitely? */
;;;1386   					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
000054  6ab0              LDR      r0,[r6,#0x28]
000056  b938              CBNZ     r0,|L1.104|
;;;1387   					{
;;;1388   						#if( configUSE_TASK_NOTIFICATIONS == 1 )
;;;1389   						{
;;;1390   							/* The task does not appear on the event list item of
;;;1391   							and of the RTOS objects, but could still be in the
;;;1392   							blocked state if it is waiting on its notification
;;;1393   							rather than waiting on an object. */
;;;1394   							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
000058  f8960054          LDRB     r0,[r6,#0x54]
00005c  2801              CMP      r0,#1
00005e  d101              BNE      |L1.100|
;;;1395   							{
;;;1396   								eReturn = eBlocked;
000060  2402              MOVS     r4,#2
000062  e00a              B        |L1.122|
                  |L1.100|
;;;1397   							}
;;;1398   							else
;;;1399   							{
;;;1400   								eReturn = eSuspended;
000064  2403              MOVS     r4,#3
000066  e008              B        |L1.122|
                  |L1.104|
;;;1401   							}
;;;1402   						}
;;;1403   						#else
;;;1404   						{
;;;1405   							eReturn = eSuspended;
;;;1406   						}
;;;1407   						#endif
;;;1408   					}
;;;1409   					else
;;;1410   					{
;;;1411   						eReturn = eBlocked;
000068  2402              MOVS     r4,#2
00006a  e006              B        |L1.122|
                  |L1.108|
;;;1412   					}
;;;1413   				}
;;;1414   			#endif
;;;1415   
;;;1416   			#if ( INCLUDE_vTaskDelete == 1 )
;;;1417   				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
00006c  4808              LDR      r0,|L1.144|
00006e  4285              CMP      r5,r0
000070  d000              BEQ      |L1.116|
000072  b90d              CBNZ     r5,|L1.120|
                  |L1.116|
;;;1418   				{
;;;1419   					/* The task being queried is referenced from the deleted
;;;1420   					tasks list, or it is not referenced from any lists at
;;;1421   					all. */
;;;1422   					eReturn = eDeleted;
000074  2404              MOVS     r4,#4
000076  e000              B        |L1.122|
                  |L1.120|
;;;1423   				}
;;;1424   			#endif
;;;1425   
;;;1426   			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
;;;1427   			{
;;;1428   				/* If the task is not in any other state, it must be in the
;;;1429   				Ready (including pending ready) state. */
;;;1430   				eReturn = eReady;
000078  2401              MOVS     r4,#1
                  |L1.122|
;;;1431   			}
;;;1432   		}
;;;1433   
;;;1434   		return eReturn;
00007a  4620              MOV      r0,r4
;;;1435   	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
00007c  e8bd87f0          POP      {r4-r10,pc}
;;;1436   
                          ENDP

                  |L1.128|
                          DCD      pxCurrentTCB
                  |L1.132|
                          DCD      pxDelayedTaskList
                  |L1.136|
                          DCD      pxOverflowDelayedTaskList
                  |L1.140|
                          DCD      xSuspendedTaskList
                  |L1.144|
                          DCD      xTasksWaitingTermination

                          AREA ||i.pcTaskGetName||, CODE, READONLY, ALIGN=2

                  pcTaskGetName PROC
;;;2308   
;;;2309   char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
000000  4601              MOV      r1,r0
;;;2310   {
;;;2311   TCB_t *pxTCB;
;;;2312   
;;;2313   	/* If null is passed in here then the name of the calling task is being
;;;2314   	queried. */
;;;2315   	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
000002  b911              CBNZ     r1,|L2.10|
000004  4809              LDR      r0,|L2.44|
000006  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000008  e000              B        |L2.12|
                  |L2.10|
00000a  4608              MOV      r0,r1
                  |L2.12|
00000c  4602              MOV      r2,r0
;;;2316   	configASSERT( pxTCB );
00000e  b952              CBNZ     r2,|L2.38|
000010  bf00              NOP      
000012  2040              MOVS     r0,#0x40
000014  f3808811          MSR      BASEPRI,r0
000018  f3bf8f4f          DSB      
00001c  f3bf8f6f          ISB      
000020  bf00              NOP      
000022  bf00              NOP      
                  |L2.36|
000024  e7fe              B        |L2.36|
                  |L2.38|
;;;2317   	return &( pxTCB->pcTaskName[ 0 ] );
000026  f1020034          ADD      r0,r2,#0x34
;;;2318   }
00002a  4770              BX       lr
;;;2319   /*-----------------------------------------------------------*/
                          ENDP

                  |L2.44|
                          DCD      pxCurrentTCB

                          AREA ||i.prvAddCurrentTaskToDelayedList||, CODE, READONLY, ALIGN=2

                  prvAddCurrentTaskToDelayedList PROC
;;;4986   
;;;4987   static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4988   {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;4989   TickType_t xTimeToWake;
;;;4990   const TickType_t xConstTickCount = xTickCount;
000008  481c              LDR      r0,|L3.124|
00000a  6807              LDR      r7,[r0,#0]  ; xTickCount
;;;4991   
;;;4992   	#if( INCLUDE_xTaskAbortDelay == 1 )
;;;4993   	{
;;;4994   		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
;;;4995   		reset to pdFALSE so it can be detected as having been set to pdTRUE
;;;4996   		when the task leaves the Blocked state. */
;;;4997   		pxCurrentTCB->ucDelayAborted = pdFALSE;
;;;4998   	}
;;;4999   	#endif
;;;5000   
;;;5001   	/* Remove the task from the ready list before adding it to the blocked list
;;;5002   	as the same list item is used for both lists. */
;;;5003   	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
00000c  481c              LDR      r0,|L3.128|
00000e  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000010  1d00              ADDS     r0,r0,#4
000012  f7fffffe          BL       uxListRemove
000016  b950              CBNZ     r0,|L3.46|
;;;5004   	{
;;;5005   		/* The current task must be in a ready list, so there is no need to
;;;5006   		check, and the port reset macro can be called directly. */
;;;5007   		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
000018  4819              LDR      r0,|L3.128|
00001a  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00001c  f890102c          LDRB     r1,[r0,#0x2c]
000020  2001              MOVS     r0,#1
000022  4088              LSLS     r0,r0,r1
000024  4917              LDR      r1,|L3.132|
000026  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000028  4381              BICS     r1,r1,r0
00002a  4816              LDR      r0,|L3.132|
00002c  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L3.46|
;;;5008   	}
;;;5009   	else
;;;5010   	{
;;;5011   		mtCOVERAGE_TEST_MARKER();
;;;5012   	}
;;;5013   
;;;5014   	#if ( INCLUDE_vTaskSuspend == 1 )
;;;5015   	{
;;;5016   		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
00002e  1c68              ADDS     r0,r5,#1
000030  b938              CBNZ     r0,|L3.66|
000032  b136              CBZ      r6,|L3.66|
;;;5017   		{
;;;5018   			/* Add the task to the suspended task list instead of a delayed task
;;;5019   			list to ensure it is not woken by a timing event.  It will block
;;;5020   			indefinitely. */
;;;5021   			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
000034  4812              LDR      r0,|L3.128|
000036  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
000038  1d09              ADDS     r1,r1,#4
00003a  4813              LDR      r0,|L3.136|
00003c  f7fffffe          BL       vListInsertEnd
000040  e01a              B        |L3.120|
                  |L3.66|
;;;5022   		}
;;;5023   		else
;;;5024   		{
;;;5025   			/* Calculate the time at which the task should be woken if the event
;;;5026   			does not occur.  This may overflow but this doesn't matter, the
;;;5027   			kernel will manage it correctly. */
;;;5028   			xTimeToWake = xConstTickCount + xTicksToWait;
000042  197c              ADDS     r4,r7,r5
;;;5029   
;;;5030   			/* The list item will be inserted in wake time order. */
;;;5031   			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
000044  480e              LDR      r0,|L3.128|
000046  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000048  6044              STR      r4,[r0,#4]
;;;5032   
;;;5033   			if( xTimeToWake < xConstTickCount )
00004a  42bc              CMP      r4,r7
00004c  d207              BCS      |L3.94|
;;;5034   			{
;;;5035   				/* Wake time has overflowed.  Place this item in the overflow
;;;5036   				list. */
;;;5037   				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
00004e  480c              LDR      r0,|L3.128|
000050  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
000052  1d09              ADDS     r1,r1,#4
000054  480d              LDR      r0,|L3.140|
000056  6800              LDR      r0,[r0,#0]  ; pxOverflowDelayedTaskList
000058  f7fffffe          BL       vListInsert
00005c  e00c              B        |L3.120|
                  |L3.94|
;;;5038   			}
;;;5039   			else
;;;5040   			{
;;;5041   				/* The wake time has not overflowed, so the current block list
;;;5042   				is used. */
;;;5043   				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
00005e  4808              LDR      r0,|L3.128|
000060  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
000062  1d09              ADDS     r1,r1,#4
000064  480a              LDR      r0,|L3.144|
000066  6800              LDR      r0,[r0,#0]  ; pxDelayedTaskList
000068  f7fffffe          BL       vListInsert
;;;5044   
;;;5045   				/* If the task entering the blocked state was placed at the
;;;5046   				head of the list of blocked tasks then xNextTaskUnblockTime
;;;5047   				needs to be updated too. */
;;;5048   				if( xTimeToWake < xNextTaskUnblockTime )
00006c  4809              LDR      r0,|L3.148|
00006e  6800              LDR      r0,[r0,#0]  ; xNextTaskUnblockTime
000070  4284              CMP      r4,r0
000072  d201              BCS      |L3.120|
;;;5049   				{
;;;5050   					xNextTaskUnblockTime = xTimeToWake;
000074  4807              LDR      r0,|L3.148|
000076  6004              STR      r4,[r0,#0]  ; xNextTaskUnblockTime
                  |L3.120|
;;;5051   				}
;;;5052   				else
;;;5053   				{
;;;5054   					mtCOVERAGE_TEST_MARKER();
;;;5055   				}
;;;5056   			}
;;;5057   		}
;;;5058   	}
;;;5059   	#else /* INCLUDE_vTaskSuspend */
;;;5060   	{
;;;5061   		/* Calculate the time at which the task should be woken if the event
;;;5062   		does not occur.  This may overflow but this doesn't matter, the kernel
;;;5063   		will manage it correctly. */
;;;5064   		xTimeToWake = xConstTickCount + xTicksToWait;
;;;5065   
;;;5066   		/* The list item will be inserted in wake time order. */
;;;5067   		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
;;;5068   
;;;5069   		if( xTimeToWake < xConstTickCount )
;;;5070   		{
;;;5071   			/* Wake time has overflowed.  Place this item in the overflow list. */
;;;5072   			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
;;;5073   		}
;;;5074   		else
;;;5075   		{
;;;5076   			/* The wake time has not overflowed, so the current block list is used. */
;;;5077   			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
;;;5078   
;;;5079   			/* If the task entering the blocked state was placed at the head of the
;;;5080   			list of blocked tasks then xNextTaskUnblockTime needs to be updated
;;;5081   			too. */
;;;5082   			if( xTimeToWake < xNextTaskUnblockTime )
;;;5083   			{
;;;5084   				xNextTaskUnblockTime = xTimeToWake;
;;;5085   			}
;;;5086   			else
;;;5087   			{
;;;5088   				mtCOVERAGE_TEST_MARKER();
;;;5089   			}
;;;5090   		}
;;;5091   
;;;5092   		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
;;;5093   		( void ) xCanBlockIndefinitely;
;;;5094   	}
;;;5095   	#endif /* INCLUDE_vTaskSuspend */
;;;5096   }
000078  e8bd81f0          POP      {r4-r8,pc}
;;;5097   
                          ENDP

                  |L3.124|
                          DCD      xTickCount
                  |L3.128|
                          DCD      pxCurrentTCB
                  |L3.132|
                          DCD      uxTopReadyPriority
                  |L3.136|
                          DCD      xSuspendedTaskList
                  |L3.140|
                          DCD      pxOverflowDelayedTaskList
                  |L3.144|
                          DCD      pxDelayedTaskList
                  |L3.148|
                          DCD      xNextTaskUnblockTime

                          AREA ||i.prvAddNewTaskToReadyList||, CODE, READONLY, ALIGN=2

                  prvAddNewTaskToReadyList PROC
;;;1043   
;;;1044   static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
000000  b510              PUSH     {r4,lr}
;;;1045   {
000002  4604              MOV      r4,r0
;;;1046   	/* Ensure interrupts don't access the task lists while the lists are being
;;;1047   	updated. */
;;;1048   	taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;1049   	{
;;;1050   		uxCurrentNumberOfTasks++;
000008  4824              LDR      r0,|L4.156|
00000a  6800              LDR      r0,[r0,#0]  ; uxCurrentNumberOfTasks
00000c  1c40              ADDS     r0,r0,#1
00000e  4923              LDR      r1,|L4.156|
000010  6008              STR      r0,[r1,#0]  ; uxCurrentNumberOfTasks
;;;1051   		if( pxCurrentTCB == NULL )
000012  4823              LDR      r0,|L4.160|
000014  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000016  b940              CBNZ     r0,|L4.42|
;;;1052   		{
;;;1053   			/* There are no other tasks, or all the other tasks are in
;;;1054   			the suspended state - make this the current task. */
;;;1055   			pxCurrentTCB = pxNewTCB;
000018  4821              LDR      r0,|L4.160|
00001a  6004              STR      r4,[r0,#0]  ; pxCurrentTCB
;;;1056   
;;;1057   			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
00001c  4608              MOV      r0,r1
00001e  6800              LDR      r0,[r0,#0]  ; uxCurrentNumberOfTasks
000020  2801              CMP      r0,#1
000022  d10d              BNE      |L4.64|
;;;1058   			{
;;;1059   				/* This is the first task to be created so do the preliminary
;;;1060   				initialisation required.  We will not recover if this call
;;;1061   				fails, but we will report the failure. */
;;;1062   				prvInitialiseTaskLists();
000024  f7fffffe          BL       prvInitialiseTaskLists
000028  e00a              B        |L4.64|
                  |L4.42|
;;;1063   			}
;;;1064   			else
;;;1065   			{
;;;1066   				mtCOVERAGE_TEST_MARKER();
;;;1067   			}
;;;1068   		}
;;;1069   		else
;;;1070   		{
;;;1071   			/* If the scheduler is not already running, make this task the
;;;1072   			current task if it is the highest priority task to be created
;;;1073   			so far. */
;;;1074   			if( xSchedulerRunning == pdFALSE )
00002a  481e              LDR      r0,|L4.164|
00002c  6800              LDR      r0,[r0,#0]  ; xSchedulerRunning
00002e  b938              CBNZ     r0,|L4.64|
;;;1075   			{
;;;1076   				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
000030  481b              LDR      r0,|L4.160|
000032  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000034  6ac0              LDR      r0,[r0,#0x2c]
000036  6ae1              LDR      r1,[r4,#0x2c]
000038  4288              CMP      r0,r1
00003a  d801              BHI      |L4.64|
;;;1077   				{
;;;1078   					pxCurrentTCB = pxNewTCB;
00003c  4818              LDR      r0,|L4.160|
00003e  6004              STR      r4,[r0,#0]  ; pxCurrentTCB
                  |L4.64|
;;;1079   				}
;;;1080   				else
;;;1081   				{
;;;1082   					mtCOVERAGE_TEST_MARKER();
;;;1083   				}
;;;1084   			}
;;;1085   			else
;;;1086   			{
;;;1087   				mtCOVERAGE_TEST_MARKER();
;;;1088   			}
;;;1089   		}
;;;1090   
;;;1091   		uxTaskNumber++;
000040  4819              LDR      r0,|L4.168|
000042  6800              LDR      r0,[r0,#0]  ; uxTaskNumber
000044  1c40              ADDS     r0,r0,#1
000046  4918              LDR      r1,|L4.168|
000048  6008              STR      r0,[r1,#0]  ; uxTaskNumber
;;;1092   
;;;1093   		#if ( configUSE_TRACE_FACILITY == 1 )
;;;1094   		{
;;;1095   			/* Add a counter into the TCB for tracing only. */
;;;1096   			pxNewTCB->uxTCBNumber = uxTaskNumber;
00004a  4608              MOV      r0,r1
00004c  6800              LDR      r0,[r0,#0]  ; uxTaskNumber
00004e  6420              STR      r0,[r4,#0x40]
;;;1097   		}
;;;1098   		#endif /* configUSE_TRACE_FACILITY */
;;;1099   		traceTASK_CREATE( pxNewTCB );
;;;1100   
;;;1101   		prvAddTaskToReadyList( pxNewTCB );
000050  f894102c          LDRB     r1,[r4,#0x2c]
000054  2001              MOVS     r0,#1
000056  4088              LSLS     r0,r0,r1
000058  4914              LDR      r1,|L4.172|
00005a  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
00005c  4308              ORRS     r0,r0,r1
00005e  4913              LDR      r1,|L4.172|
000060  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000062  6ae1              LDR      r1,[r4,#0x2c]
000064  eb010181          ADD      r1,r1,r1,LSL #2
000068  4a11              LDR      r2,|L4.176|
00006a  eb020081          ADD      r0,r2,r1,LSL #2
00006e  1d21              ADDS     r1,r4,#4
000070  f7fffffe          BL       vListInsertEnd
;;;1102   
;;;1103   		portSETUP_TCB( pxNewTCB );
;;;1104   	}
;;;1105   	taskEXIT_CRITICAL();
000074  f7fffffe          BL       vPortExitCritical
;;;1106   
;;;1107   	if( xSchedulerRunning != pdFALSE )
000078  480a              LDR      r0,|L4.164|
00007a  6800              LDR      r0,[r0,#0]  ; xSchedulerRunning
00007c  b168              CBZ      r0,|L4.154|
;;;1108   	{
;;;1109   		/* If the created task is of a higher priority than the current task
;;;1110   		then it should run now. */
;;;1111   		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
00007e  4808              LDR      r0,|L4.160|
000080  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000082  6ac0              LDR      r0,[r0,#0x2c]
000084  6ae1              LDR      r1,[r4,#0x2c]
000086  4288              CMP      r0,r1
000088  d207              BCS      |L4.154|
;;;1112   		{
;;;1113   			taskYIELD_IF_USING_PREEMPTION();
00008a  f04f5080          MOV      r0,#0x10000000
00008e  4909              LDR      r1,|L4.180|
000090  6008              STR      r0,[r1,#0]
000092  f3bf8f4f          DSB      
000096  f3bf8f6f          ISB      
                  |L4.154|
;;;1114   		}
;;;1115   		else
;;;1116   		{
;;;1117   			mtCOVERAGE_TEST_MARKER();
;;;1118   		}
;;;1119   	}
;;;1120   	else
;;;1121   	{
;;;1122   		mtCOVERAGE_TEST_MARKER();
;;;1123   	}
;;;1124   }
00009a  bd10              POP      {r4,pc}
;;;1125   /*-----------------------------------------------------------*/
                          ENDP

                  |L4.156|
                          DCD      uxCurrentNumberOfTasks
                  |L4.160|
                          DCD      pxCurrentTCB
                  |L4.164|
                          DCD      xSchedulerRunning
                  |L4.168|
                          DCD      uxTaskNumber
                  |L4.172|
                          DCD      uxTopReadyPriority
                  |L4.176|
                          DCD      pxReadyTasksLists
                  |L4.180|
                          DCD      0xe000ed04

                          AREA ||i.prvCheckTasksWaitingTermination||, CODE, READONLY, ALIGN=2

                  prvCheckTasksWaitingTermination PROC
;;;3530   
;;;3531   static void prvCheckTasksWaitingTermination( void )
000000  b510              PUSH     {r4,lr}
;;;3532   {
;;;3533   
;;;3534   	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
;;;3535   
;;;3536   	#if ( INCLUDE_vTaskDelete == 1 )
;;;3537   	{
;;;3538   		TCB_t *pxTCB;
;;;3539   
;;;3540   		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
;;;3541   		being called too often in the idle task. */
;;;3542   		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
000002  e016              B        |L5.50|
                  |L5.4|
;;;3543   		{
;;;3544   			taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;3545   			{
;;;3546   				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
000008  480c              LDR      r0,|L5.60|
00000a  68c0              LDR      r0,[r0,#0xc]
00000c  68c4              LDR      r4,[r0,#0xc]
;;;3547   				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
00000e  1d20              ADDS     r0,r4,#4
000010  f7fffffe          BL       uxListRemove
;;;3548   				--uxCurrentNumberOfTasks;
000014  480a              LDR      r0,|L5.64|
000016  6800              LDR      r0,[r0,#0]  ; uxCurrentNumberOfTasks
000018  1e40              SUBS     r0,r0,#1
00001a  4909              LDR      r1,|L5.64|
00001c  6008              STR      r0,[r1,#0]  ; uxCurrentNumberOfTasks
;;;3549   				--uxDeletedTasksWaitingCleanUp;
00001e  4809              LDR      r0,|L5.68|
000020  6800              LDR      r0,[r0,#0]  ; uxDeletedTasksWaitingCleanUp
000022  1e40              SUBS     r0,r0,#1
000024  4907              LDR      r1,|L5.68|
000026  6008              STR      r0,[r1,#0]  ; uxDeletedTasksWaitingCleanUp
;;;3550   			}
;;;3551   			taskEXIT_CRITICAL();
000028  f7fffffe          BL       vPortExitCritical
;;;3552   
;;;3553   			prvDeleteTCB( pxTCB );
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       prvDeleteTCB
                  |L5.50|
000032  4804              LDR      r0,|L5.68|
000034  6800              LDR      r0,[r0,#0]            ;3542  ; uxDeletedTasksWaitingCleanUp
000036  2800              CMP      r0,#0                 ;3542
000038  d1e4              BNE      |L5.4|
;;;3554   		}
;;;3555   	}
;;;3556   	#endif /* INCLUDE_vTaskDelete */
;;;3557   }
00003a  bd10              POP      {r4,pc}
;;;3558   /*-----------------------------------------------------------*/
                          ENDP

                  |L5.60|
                          DCD      xTasksWaitingTermination
                  |L5.64|
                          DCD      uxCurrentNumberOfTasks
                  |L5.68|
                          DCD      uxDeletedTasksWaitingCleanUp

                          AREA ||i.prvDeleteTCB||, CODE, READONLY, ALIGN=1

                  prvDeleteTCB PROC
;;;3738   
;;;3739   	static void prvDeleteTCB( TCB_t *pxTCB )
000000  b510              PUSH     {r4,lr}
;;;3740   	{
000002  4604              MOV      r4,r0
;;;3741   		/* This call is required specifically for the TriCore port.  It must be
;;;3742   		above the vPortFree() calls.  The call is also used by ports/demos that
;;;3743   		want to allocate and clean RAM statically. */
;;;3744   		portCLEAN_UP_TCB( pxTCB );
;;;3745   
;;;3746   		/* Free up the memory allocated by the scheduler for the task.  It is up
;;;3747   		to the task to free any memory allocated at the application level. */
;;;3748   		#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;3749   		{
;;;3750   			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
;;;3751   		}
;;;3752   		#endif /* configUSE_NEWLIB_REENTRANT */
;;;3753   
;;;3754   		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
;;;3755   		{
;;;3756   			/* The task can only have been allocated dynamically - free both
;;;3757   			the stack and TCB. */
;;;3758   			vPortFree( pxTCB->pxStack );
000004  6b20              LDR      r0,[r4,#0x30]
000006  f7fffffe          BL       vPortFree
;;;3759   			vPortFree( pxTCB );
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       vPortFree
;;;3760   		}
;;;3761   		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
;;;3762   		{
;;;3763   			/* The task could have been allocated statically or dynamically, so
;;;3764   			check what was statically allocated before trying to free the
;;;3765   			memory. */
;;;3766   			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
;;;3767   			{
;;;3768   				/* Both the stack and TCB were allocated dynamically, so both
;;;3769   				must be freed. */
;;;3770   				vPortFree( pxTCB->pxStack );
;;;3771   				vPortFree( pxTCB );
;;;3772   			}
;;;3773   			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
;;;3774   			{
;;;3775   				/* Only the stack was statically allocated, so the TCB is the
;;;3776   				only memory that must be freed. */
;;;3777   				vPortFree( pxTCB );
;;;3778   			}
;;;3779   			else
;;;3780   			{
;;;3781   				/* Neither the stack nor the TCB were allocated dynamically, so
;;;3782   				nothing needs to be freed. */
;;;3783   				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
;;;3784   				mtCOVERAGE_TEST_MARKER();
;;;3785   			}
;;;3786   		}
;;;3787   		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
;;;3788   	}
000010  bd10              POP      {r4,pc}
;;;3789   
                          ENDP


                          AREA ||i.prvIdleTask||, CODE, READONLY, ALIGN=2

                  prvIdleTask PROC
;;;3286    */
;;;3287   static portTASK_FUNCTION( prvIdleTask, pvParameters )
000000  bf00              NOP      
                  |L7.2|
;;;3288   {
;;;3289   	/* Stop warnings. */
;;;3290   	( void ) pvParameters;
;;;3291   
;;;3292   	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
;;;3293   	SCHEDULER IS STARTED. **/
;;;3294   
;;;3295   	/* In case a task that has a secure context deletes itself, in which case
;;;3296   	the idle task is responsible for deleting the task's secure context, if
;;;3297   	any. */
;;;3298   	portTASK_CALLS_SECURE_FUNCTIONS();
;;;3299   
;;;3300   	for( ;; )
;;;3301   	{
;;;3302   		/* See if any tasks have deleted themselves - if so then the idle task
;;;3303   		is responsible for freeing the deleted task's TCB and stack. */
;;;3304   		prvCheckTasksWaitingTermination();
000002  f7fffffe          BL       prvCheckTasksWaitingTermination
;;;3305   
;;;3306   		#if ( configUSE_PREEMPTION == 0 )
;;;3307   		{
;;;3308   			/* If we are not using preemption we keep forcing a task switch to
;;;3309   			see if any other task has become available.  If we are using
;;;3310   			preemption we don't need to do this as any task becoming available
;;;3311   			will automatically get the processor anyway. */
;;;3312   			taskYIELD();
;;;3313   		}
;;;3314   		#endif /* configUSE_PREEMPTION */
;;;3315   
;;;3316   		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
;;;3317   		{
;;;3318   			/* When using preemption tasks of equal priority will be
;;;3319   			timesliced.  If a task that is sharing the idle priority is ready
;;;3320   			to run then the idle task should yield before the end of the
;;;3321   			timeslice.
;;;3322   
;;;3323   			A critical region is not required here as we are just reading from
;;;3324   			the list, and an occasional incorrect value will not matter.  If
;;;3325   			the ready list at the idle priority contains more than one task
;;;3326   			then a task other than the idle task is ready to execute. */
;;;3327   			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
000006  4806              LDR      r0,|L7.32|
000008  6800              LDR      r0,[r0,#0]  ; pxReadyTasksLists
00000a  2801              CMP      r0,#1
00000c  d9f9              BLS      |L7.2|
;;;3328   			{
;;;3329   				taskYIELD();
00000e  f04f5080          MOV      r0,#0x10000000
000012  4904              LDR      r1,|L7.36|
000014  6008              STR      r0,[r1,#0]
000016  f3bf8f4f          DSB      
00001a  f3bf8f6f          ISB      
00001e  e7f0              B        |L7.2|
;;;3330   			}
;;;3331   			else
;;;3332   			{
;;;3333   				mtCOVERAGE_TEST_MARKER();
;;;3334   			}
;;;3335   		}
;;;3336   		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
;;;3337   
;;;3338   		#if ( configUSE_IDLE_HOOK == 1 )
;;;3339   		{
;;;3340   			extern void vApplicationIdleHook( void );
;;;3341   
;;;3342   			/* Call the user defined function from within the idle task.  This
;;;3343   			allows the application designer to add background functionality
;;;3344   			without the overhead of a separate task.
;;;3345   			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
;;;3346   			CALL A FUNCTION THAT MIGHT BLOCK. */
;;;3347   			vApplicationIdleHook();
;;;3348   		}
;;;3349   		#endif /* configUSE_IDLE_HOOK */
;;;3350   
;;;3351   		/* This conditional compilation should use inequality to 0, not equality
;;;3352   		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
;;;3353   		user defined low power mode	implementations require
;;;3354   		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
;;;3355   		#if ( configUSE_TICKLESS_IDLE != 0 )
;;;3356   		{
;;;3357   		TickType_t xExpectedIdleTime;
;;;3358   
;;;3359   			/* It is not desirable to suspend then resume the scheduler on
;;;3360   			each iteration of the idle task.  Therefore, a preliminary
;;;3361   			test of the expected idle time is performed without the
;;;3362   			scheduler suspended.  The result here is not necessarily
;;;3363   			valid. */
;;;3364   			xExpectedIdleTime = prvGetExpectedIdleTime();
;;;3365   
;;;3366   			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
;;;3367   			{
;;;3368   				vTaskSuspendAll();
;;;3369   				{
;;;3370   					/* Now the scheduler is suspended, the expected idle
;;;3371   					time can be sampled again, and this time its value can
;;;3372   					be used. */
;;;3373   					configASSERT( xNextTaskUnblockTime >= xTickCount );
;;;3374   					xExpectedIdleTime = prvGetExpectedIdleTime();
;;;3375   
;;;3376   					/* Define the following macro to set xExpectedIdleTime to 0
;;;3377   					if the application does not want
;;;3378   					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
;;;3379   					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
;;;3380   
;;;3381   					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
;;;3382   					{
;;;3383   						traceLOW_POWER_IDLE_BEGIN();
;;;3384   						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
;;;3385   						traceLOW_POWER_IDLE_END();
;;;3386   					}
;;;3387   					else
;;;3388   					{
;;;3389   						mtCOVERAGE_TEST_MARKER();
;;;3390   					}
;;;3391   				}
;;;3392   				( void ) xTaskResumeAll();
;;;3393   			}
;;;3394   			else
;;;3395   			{
;;;3396   				mtCOVERAGE_TEST_MARKER();
;;;3397   			}
;;;3398   		}
;;;3399   		#endif /* configUSE_TICKLESS_IDLE */
;;;3400   	}
;;;3401   }
;;;3402   /*-----------------------------------------------------------*/
                          ENDP

                  |L7.32|
                          DCD      pxReadyTasksLists
                  |L7.36|
                          DCD      0xe000ed04

                          AREA ||i.prvInitialiseNewTask||, CODE, READONLY, ALIGN=1

                  prvInitialiseNewTask PROC
;;;837    
;;;838    static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;839    									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
;;;840    									const uint32_t ulStackDepth,
;;;841    									void * const pvParameters,
;;;842    									UBaseType_t uxPriority,
;;;843    									TaskHandle_t * const pxCreatedTask,
;;;844    									TCB_t *pxNewTCB,
;;;845    									const MemoryRegion_t * const xRegions )
;;;846    {
000004  4682              MOV      r10,r0
000006  460e              MOV      r6,r1
000008  4690              MOV      r8,r2
00000a  469b              MOV      r11,r3
00000c  9f0a              LDR      r7,[sp,#0x28]
00000e  9c0c              LDR      r4,[sp,#0x30]
;;;847    StackType_t *pxTopOfStack;
;;;848    UBaseType_t x;
;;;849    
;;;850    	#if( portUSING_MPU_WRAPPERS == 1 )
;;;851    		/* Should the task be created in privileged mode? */
;;;852    		BaseType_t xRunPrivileged;
;;;853    		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
;;;854    		{
;;;855    			xRunPrivileged = pdTRUE;
;;;856    		}
;;;857    		else
;;;858    		{
;;;859    			xRunPrivileged = pdFALSE;
;;;860    		}
;;;861    		uxPriority &= ~portPRIVILEGE_BIT;
;;;862    	#endif /* portUSING_MPU_WRAPPERS == 1 */
;;;863    
;;;864    	configASSERT( pcName );
000010  b956              CBNZ     r6,|L8.40|
000012  bf00              NOP      
000014  2040              MOVS     r0,#0x40
000016  f3808811          MSR      BASEPRI,r0
00001a  f3bf8f4f          DSB      
00001e  f3bf8f6f          ISB      
000022  bf00              NOP      
000024  bf00              NOP      
                  |L8.38|
000026  e7fe              B        |L8.38|
                  |L8.40|
;;;865    
;;;866    	/* Avoid dependency on memset() if it is not required. */
;;;867    	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
;;;868    	{
;;;869    		/* Fill the stack with a known value to assist debugging. */
;;;870    		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
000028  ea4f0188          LSL      r1,r8,#2
00002c  22a5              MOVS     r2,#0xa5
00002e  6b20              LDR      r0,[r4,#0x30]
000030  f7fffffe          BL       __aeabi_memset
;;;871    	}
;;;872    	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
;;;873    
;;;874    	/* Calculate the top of stack address.  This depends on whether the stack
;;;875    	grows from high memory to low (as per the 80x86) or vice versa.
;;;876    	portSTACK_GROWTH is used to make the result positive or negative as required
;;;877    	by the port. */
;;;878    	#if( portSTACK_GROWTH < 0 )
;;;879    	{
;;;880    		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
000034  f1a80001          SUB      r0,r8,#1
000038  6b21              LDR      r1,[r4,#0x30]
00003a  eb010980          ADD      r9,r1,r0,LSL #2
;;;881    		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
00003e  f0290907          BIC      r9,r9,#7
;;;882    
;;;883    		/* Check the alignment of the calculated top of stack is correct. */
;;;884    		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
000042  f0090007          AND      r0,r9,#7
000046  b908              CBNZ     r0,|L8.76|
000048  2001              MOVS     r0,#1
00004a  e000              B        |L8.78|
                  |L8.76|
00004c  2000              MOVS     r0,#0
                  |L8.78|
00004e  b950              CBNZ     r0,|L8.102|
000050  bf00              NOP      
000052  2040              MOVS     r0,#0x40
000054  f3808811          MSR      BASEPRI,r0
000058  f3bf8f4f          DSB      
00005c  f3bf8f6f          ISB      
000060  bf00              NOP      
000062  bf00              NOP      
                  |L8.100|
000064  e7fe              B        |L8.100|
                  |L8.102|
;;;885    
;;;886    		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
;;;887    		{
;;;888    			/* Also record the stack's high address, which may assist
;;;889    			debugging. */
;;;890    			pxNewTCB->pxEndOfStack = pxTopOfStack;
;;;891    		}
;;;892    		#endif /* configRECORD_STACK_HIGH_ADDRESS */
;;;893    	}
;;;894    	#else /* portSTACK_GROWTH */
;;;895    	{
;;;896    		pxTopOfStack = pxNewTCB->pxStack;
;;;897    
;;;898    		/* Check the alignment of the stack buffer is correct. */
;;;899    		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
;;;900    
;;;901    		/* The other extreme of the stack space is required if stack checking is
;;;902    		performed. */
;;;903    		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
;;;904    	}
;;;905    	#endif /* portSTACK_GROWTH */
;;;906    
;;;907    	/* Store the task name in the TCB. */
;;;908    	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
000066  2500              MOVS     r5,#0
000068  e007              B        |L8.122|
                  |L8.106|
;;;909    	{
;;;910    		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
00006a  5d71              LDRB     r1,[r6,r5]
00006c  f1040034          ADD      r0,r4,#0x34
000070  5541              STRB     r1,[r0,r5]
;;;911    
;;;912    		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
;;;913    		configMAX_TASK_NAME_LEN characters just in case the memory after the
;;;914    		string is not accessible (extremely unlikely). */
;;;915    		if( pcName[ x ] == ( char ) 0x00 )
000072  5d70              LDRB     r0,[r6,r5]
000074  b900              CBNZ     r0,|L8.120|
;;;916    		{
;;;917    			break;
000076  e002              B        |L8.126|
                  |L8.120|
000078  1c6d              ADDS     r5,r5,#1              ;908
                  |L8.122|
00007a  2d0a              CMP      r5,#0xa               ;908
00007c  d3f5              BCC      |L8.106|
                  |L8.126|
00007e  bf00              NOP      
;;;918    		}
;;;919    		else
;;;920    		{
;;;921    			mtCOVERAGE_TEST_MARKER();
;;;922    		}
;;;923    	}
;;;924    
;;;925    	/* Ensure the name string is terminated in the case that the string length
;;;926    	was greater or equal to configMAX_TASK_NAME_LEN. */
;;;927    	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
000080  2100              MOVS     r1,#0
000082  203d              MOVS     r0,#0x3d
000084  5501              STRB     r1,[r0,r4]
;;;928    
;;;929    	/* This is used as an array index so must ensure it's not too large.  First
;;;930    	remove the privilege bit if one is present. */
;;;931    	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
000086  2f05              CMP      r7,#5
000088  d300              BCC      |L8.140|
;;;932    	{
;;;933    		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
00008a  2704              MOVS     r7,#4
                  |L8.140|
;;;934    	}
;;;935    	else
;;;936    	{
;;;937    		mtCOVERAGE_TEST_MARKER();
;;;938    	}
;;;939    
;;;940    	pxNewTCB->uxPriority = uxPriority;
00008c  62e7              STR      r7,[r4,#0x2c]
;;;941    	#if ( configUSE_MUTEXES == 1 )
;;;942    	{
;;;943    		pxNewTCB->uxBasePriority = uxPriority;
00008e  64a7              STR      r7,[r4,#0x48]
;;;944    		pxNewTCB->uxMutexesHeld = 0;
000090  2000              MOVS     r0,#0
000092  64e0              STR      r0,[r4,#0x4c]
;;;945    	}
;;;946    	#endif /* configUSE_MUTEXES */
;;;947    
;;;948    	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
000094  1d20              ADDS     r0,r4,#4
000096  f7fffffe          BL       vListInitialiseItem
;;;949    	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
00009a  f1040018          ADD      r0,r4,#0x18
00009e  f7fffffe          BL       vListInitialiseItem
;;;950    
;;;951    	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
;;;952    	back to	the containing TCB from a generic item in a list. */
;;;953    	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
0000a2  6124              STR      r4,[r4,#0x10]
;;;954    
;;;955    	/* Event lists are always in priority order. */
;;;956    	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
0000a4  f1c70005          RSB      r0,r7,#5
0000a8  61a0              STR      r0,[r4,#0x18]
;;;957    	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
0000aa  6264              STR      r4,[r4,#0x24]
;;;958    
;;;959    	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
;;;960    	{
;;;961    		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
;;;962    	}
;;;963    	#endif /* portCRITICAL_NESTING_IN_TCB */
;;;964    
;;;965    	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
;;;966    	{
;;;967    		pxNewTCB->pxTaskTag = NULL;
;;;968    	}
;;;969    	#endif /* configUSE_APPLICATION_TASK_TAG */
;;;970    
;;;971    	#if ( configGENERATE_RUN_TIME_STATS == 1 )
;;;972    	{
;;;973    		pxNewTCB->ulRunTimeCounter = 0UL;
;;;974    	}
;;;975    	#endif /* configGENERATE_RUN_TIME_STATS */
;;;976    
;;;977    	#if ( portUSING_MPU_WRAPPERS == 1 )
;;;978    	{
;;;979    		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth );
;;;980    	}
;;;981    	#else
;;;982    	{
;;;983    		/* Avoid compiler warning about unreferenced parameter. */
;;;984    		( void ) xRegions;
;;;985    	}
;;;986    	#endif
;;;987    
;;;988    	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
;;;989    	{
;;;990    		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
;;;991    		{
;;;992    			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
;;;993    		}
;;;994    	}
;;;995    	#endif
;;;996    
;;;997    	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
;;;998    	{
;;;999    		pxNewTCB->ulNotifiedValue = 0;
0000ac  2000              MOVS     r0,#0
0000ae  6520              STR      r0,[r4,#0x50]
;;;1000   		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
0000b0  f8840054          STRB     r0,[r4,#0x54]
;;;1001   	}
;;;1002   	#endif
;;;1003   
;;;1004   	#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;1005   	{
;;;1006   		/* Initialise this task's Newlib reent structure. */
;;;1007   		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
;;;1008   	}
;;;1009   	#endif
;;;1010   
;;;1011   	#if( INCLUDE_xTaskAbortDelay == 1 )
;;;1012   	{
;;;1013   		pxNewTCB->ucDelayAborted = pdFALSE;
;;;1014   	}
;;;1015   	#endif
;;;1016   
;;;1017   	/* Initialize the TCB stack to look as if the task was already running,
;;;1018   	but had been interrupted by the scheduler.  The return address is set
;;;1019   	to the start of the task function. Once the stack has been initialised
;;;1020   	the top of stack variable is updated. */
;;;1021   	#if( portUSING_MPU_WRAPPERS == 1 )
;;;1022   	{
;;;1023   		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
;;;1024   	}
;;;1025   	#else /* portUSING_MPU_WRAPPERS */
;;;1026   	{
;;;1027   		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
0000b4  465a              MOV      r2,r11
0000b6  4651              MOV      r1,r10
0000b8  4648              MOV      r0,r9
0000ba  f7fffffe          BL       pxPortInitialiseStack
0000be  6020              STR      r0,[r4,#0]
;;;1028   	}
;;;1029   	#endif /* portUSING_MPU_WRAPPERS */
;;;1030   
;;;1031   	if( pxCreatedTask != NULL )
0000c0  980b              LDR      r0,[sp,#0x2c]
0000c2  b108              CBZ      r0,|L8.200|
;;;1032   	{
;;;1033   		/* Pass the handle out in an anonymous way.  The handle can be used to
;;;1034   		change the created task's priority, delete the created task, etc.*/
;;;1035   		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
0000c4  980b              LDR      r0,[sp,#0x2c]
0000c6  6004              STR      r4,[r0,#0]
                  |L8.200|
;;;1036   	}
;;;1037   	else
;;;1038   	{
;;;1039   		mtCOVERAGE_TEST_MARKER();
;;;1040   	}
;;;1041   }
0000c8  e8bd9ff0          POP      {r4-r12,pc}
;;;1042   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.prvInitialiseTaskLists||, CODE, READONLY, ALIGN=2

                  prvInitialiseTaskLists PROC
;;;3498   
;;;3499   static void prvInitialiseTaskLists( void )
000000  b510              PUSH     {r4,lr}
;;;3500   {
;;;3501   UBaseType_t uxPriority;
;;;3502   
;;;3503   	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
000002  2400              MOVS     r4,#0
000004  e007              B        |L9.22|
                  |L9.6|
;;;3504   	{
;;;3505   		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
000006  eb040184          ADD      r1,r4,r4,LSL #2
00000a  4a0f              LDR      r2,|L9.72|
00000c  eb020081          ADD      r0,r2,r1,LSL #2
000010  f7fffffe          BL       vListInitialise
000014  1c64              ADDS     r4,r4,#1              ;3503
                  |L9.22|
000016  2c05              CMP      r4,#5                 ;3503
000018  d3f5              BCC      |L9.6|
;;;3506   	}
;;;3507   
;;;3508   	vListInitialise( &xDelayedTaskList1 );
00001a  480c              LDR      r0,|L9.76|
00001c  f7fffffe          BL       vListInitialise
;;;3509   	vListInitialise( &xDelayedTaskList2 );
000020  480b              LDR      r0,|L9.80|
000022  f7fffffe          BL       vListInitialise
;;;3510   	vListInitialise( &xPendingReadyList );
000026  480b              LDR      r0,|L9.84|
000028  f7fffffe          BL       vListInitialise
;;;3511   
;;;3512   	#if ( INCLUDE_vTaskDelete == 1 )
;;;3513   	{
;;;3514   		vListInitialise( &xTasksWaitingTermination );
00002c  480a              LDR      r0,|L9.88|
00002e  f7fffffe          BL       vListInitialise
;;;3515   	}
;;;3516   	#endif /* INCLUDE_vTaskDelete */
;;;3517   
;;;3518   	#if ( INCLUDE_vTaskSuspend == 1 )
;;;3519   	{
;;;3520   		vListInitialise( &xSuspendedTaskList );
000032  480a              LDR      r0,|L9.92|
000034  f7fffffe          BL       vListInitialise
;;;3521   	}
;;;3522   	#endif /* INCLUDE_vTaskSuspend */
;;;3523   
;;;3524   	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
;;;3525   	using list2. */
;;;3526   	pxDelayedTaskList = &xDelayedTaskList1;
000038  4804              LDR      r0,|L9.76|
00003a  4909              LDR      r1,|L9.96|
00003c  6008              STR      r0,[r1,#0]  ; pxDelayedTaskList
;;;3527   	pxOverflowDelayedTaskList = &xDelayedTaskList2;
00003e  4804              LDR      r0,|L9.80|
000040  4908              LDR      r1,|L9.100|
000042  6008              STR      r0,[r1,#0]  ; pxOverflowDelayedTaskList
;;;3528   }
000044  bd10              POP      {r4,pc}
;;;3529   /*-----------------------------------------------------------*/
                          ENDP

000046  0000              DCW      0x0000
                  |L9.72|
                          DCD      pxReadyTasksLists
                  |L9.76|
                          DCD      xDelayedTaskList1
                  |L9.80|
                          DCD      xDelayedTaskList2
                  |L9.84|
                          DCD      xPendingReadyList
                  |L9.88|
                          DCD      xTasksWaitingTermination
                  |L9.92|
                          DCD      xSuspendedTaskList
                  |L9.96|
                          DCD      pxDelayedTaskList
                  |L9.100|
                          DCD      pxOverflowDelayedTaskList

                          AREA ||i.prvListTasksWithinSingleList||, CODE, READONLY, ALIGN=1

                  prvListTasksWithinSingleList PROC
;;;3657   
;;;3658   	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;3659   	{
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4690              MOV      r8,r2
;;;3660   	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
;;;3661   	UBaseType_t uxTask = 0;
00000a  2600              MOVS     r6,#0
;;;3662   
;;;3663   		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
00000c  6820              LDR      r0,[r4,#0]
00000e  b348              CBZ      r0,|L10.100|
;;;3664   		{
;;;3665   			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
000010  4620              MOV      r0,r4
000012  6841              LDR      r1,[r0,#4]
000014  6849              LDR      r1,[r1,#4]
000016  6041              STR      r1,[r0,#4]
000018  f1000108          ADD      r1,r0,#8
00001c  6842              LDR      r2,[r0,#4]
00001e  428a              CMP      r2,r1
000020  d102              BNE      |L10.40|
000022  6841              LDR      r1,[r0,#4]
000024  6849              LDR      r1,[r1,#4]
000026  6041              STR      r1,[r0,#4]
                  |L10.40|
000028  6841              LDR      r1,[r0,#4]
00002a  f8d1900c          LDR      r9,[r1,#0xc]
;;;3666   
;;;3667   			/* Populate an TaskStatus_t structure within the
;;;3668   			pxTaskStatusArray array for each task that is referenced from
;;;3669   			pxList.  See the definition of TaskStatus_t in task.h for the
;;;3670   			meaning of each TaskStatus_t structure member. */
;;;3671   			do
00002e  bf00              NOP      
                  |L10.48|
;;;3672   			{
;;;3673   				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
000030  4620              MOV      r0,r4
000032  6841              LDR      r1,[r0,#4]
000034  6849              LDR      r1,[r1,#4]
000036  6041              STR      r1,[r0,#4]
000038  f1000108          ADD      r1,r0,#8
00003c  6842              LDR      r2,[r0,#4]
00003e  428a              CMP      r2,r1
000040  d102              BNE      |L10.72|
000042  6841              LDR      r1,[r0,#4]
000044  6849              LDR      r1,[r1,#4]
000046  6041              STR      r1,[r0,#4]
                  |L10.72|
000048  6841              LDR      r1,[r0,#4]
00004a  68cd              LDR      r5,[r1,#0xc]
;;;3674   				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
00004c  eb0600c6          ADD      r0,r6,r6,LSL #3
000050  eb070180          ADD      r1,r7,r0,LSL #2
000054  4643              MOV      r3,r8
000056  2201              MOVS     r2,#1
000058  4628              MOV      r0,r5
00005a  f7fffffe          BL       vTaskGetInfo
;;;3675   				uxTask++;
00005e  1c76              ADDS     r6,r6,#1
;;;3676   			} while( pxNextTCB != pxFirstTCB );
000060  454d              CMP      r5,r9
000062  d1e5              BNE      |L10.48|
                  |L10.100|
;;;3677   		}
;;;3678   		else
;;;3679   		{
;;;3680   			mtCOVERAGE_TEST_MARKER();
;;;3681   		}
;;;3682   
;;;3683   		return uxTask;
000064  4630              MOV      r0,r6
;;;3684   	}
000066  e8bd87f0          POP      {r4-r10,pc}
;;;3685   
                          ENDP


                          AREA ||i.prvResetNextTaskUnblockTime||, CODE, READONLY, ALIGN=2

                  prvResetNextTaskUnblockTime PROC
;;;3792   
;;;3793   static void prvResetNextTaskUnblockTime( void )
000000  490a              LDR      r1,|L11.44|
;;;3794   {
;;;3795   TCB_t *pxTCB;
;;;3796   
;;;3797   	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
000002  6809              LDR      r1,[r1,#0]  ; pxDelayedTaskList
000004  6809              LDR      r1,[r1,#0]
000006  b909              CBNZ     r1,|L11.12|
000008  2101              MOVS     r1,#1
00000a  e000              B        |L11.14|
                  |L11.12|
00000c  2100              MOVS     r1,#0
                  |L11.14|
00000e  b121              CBZ      r1,|L11.26|
;;;3798   	{
;;;3799   		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
;;;3800   		the maximum possible value so it is	extremely unlikely that the
;;;3801   		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
;;;3802   		there is an item in the delayed list. */
;;;3803   		xNextTaskUnblockTime = portMAX_DELAY;
000010  f04f31ff          MOV      r1,#0xffffffff
000014  4a06              LDR      r2,|L11.48|
000016  6011              STR      r1,[r2,#0]  ; xNextTaskUnblockTime
000018  e006              B        |L11.40|
                  |L11.26|
;;;3804   	}
;;;3805   	else
;;;3806   	{
;;;3807   		/* The new current delayed list is not empty, get the value of
;;;3808   		the item at the head of the delayed list.  This is the time at
;;;3809   		which the task at the head of the delayed list should be removed
;;;3810   		from the Blocked state. */
;;;3811   		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
00001a  4904              LDR      r1,|L11.44|
00001c  6809              LDR      r1,[r1,#0]  ; pxDelayedTaskList
00001e  68c9              LDR      r1,[r1,#0xc]
000020  68c8              LDR      r0,[r1,#0xc]
;;;3812   		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
000022  4a03              LDR      r2,|L11.48|
000024  6841              LDR      r1,[r0,#4]
000026  6011              STR      r1,[r2,#0]  ; xNextTaskUnblockTime
                  |L11.40|
;;;3813   	}
;;;3814   }
000028  4770              BX       lr
;;;3815   /*-----------------------------------------------------------*/
                          ENDP

00002a  0000              DCW      0x0000
                  |L11.44|
                          DCD      pxDelayedTaskList
                  |L11.48|
                          DCD      xNextTaskUnblockTime

                          AREA ||i.prvTaskCheckFreeStackSpace||, CODE, READONLY, ALIGN=1

                  prvTaskCheckFreeStackSpace PROC
;;;3690   
;;;3691   	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
000000  4602              MOV      r2,r0
;;;3692   	{
;;;3693   	uint32_t ulCount = 0U;
000002  2100              MOVS     r1,#0
;;;3694   
;;;3695   		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
000004  e001              B        |L12.10|
                  |L12.6|
;;;3696   		{
;;;3697   			pucStackByte -= portSTACK_GROWTH;
000006  1c52              ADDS     r2,r2,#1
;;;3698   			ulCount++;
000008  1c49              ADDS     r1,r1,#1
                  |L12.10|
00000a  7810              LDRB     r0,[r2,#0]            ;3695
00000c  28a5              CMP      r0,#0xa5              ;3695
00000e  d0fa              BEQ      |L12.6|
;;;3699   		}
;;;3700   
;;;3701   		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
000010  0889              LSRS     r1,r1,#2
;;;3702   
;;;3703   		return ( configSTACK_DEPTH_TYPE ) ulCount;
000012  b288              UXTH     r0,r1
;;;3704   	}
000014  4770              BX       lr
;;;3705   
                          ENDP


                          AREA ||i.prvTaskIsTaskSuspended||, CODE, READONLY, ALIGN=2

                  prvTaskIsTaskSuspended PROC
;;;1768   
;;;1769   	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
000000  b510              PUSH     {r4,lr}
;;;1770   	{
000002  4602              MOV      r2,r0
;;;1771   	BaseType_t xReturn = pdFALSE;
000004  2000              MOVS     r0,#0
;;;1772   	const TCB_t * const pxTCB = xTask;
000006  4611              MOV      r1,r2
;;;1773   
;;;1774   		/* Accesses xPendingReadyList so must be called from a critical
;;;1775   		section. */
;;;1776   
;;;1777   		/* It does not make sense to check if the calling task is suspended. */
;;;1778   		configASSERT( xTask );
000008  b952              CBNZ     r2,|L13.32|
00000a  bf00              NOP      
00000c  2340              MOVS     r3,#0x40
00000e  f3838811          MSR      BASEPRI,r3
000012  f3bf8f4f          DSB      
000016  f3bf8f6f          ISB      
00001a  bf00              NOP      
00001c  bf00              NOP      
                  |L13.30|
00001e  e7fe              B        |L13.30|
                  |L13.32|
;;;1779   
;;;1780   		/* Is the task being resumed actually in the suspended list? */
;;;1781   		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
000020  4c0b              LDR      r4,|L13.80|
000022  694b              LDR      r3,[r1,#0x14]
000024  42a3              CMP      r3,r4
000026  d101              BNE      |L13.44|
000028  2301              MOVS     r3,#1
00002a  e000              B        |L13.46|
                  |L13.44|
00002c  2300              MOVS     r3,#0
                  |L13.46|
00002e  b173              CBZ      r3,|L13.78|
;;;1782   		{
;;;1783   			/* Has the task already been resumed from within an ISR? */
;;;1784   			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
000030  4c08              LDR      r4,|L13.84|
000032  6a8b              LDR      r3,[r1,#0x28]
000034  42a3              CMP      r3,r4
000036  d101              BNE      |L13.60|
000038  2301              MOVS     r3,#1
00003a  e000              B        |L13.62|
                  |L13.60|
00003c  2300              MOVS     r3,#0
                  |L13.62|
00003e  b933              CBNZ     r3,|L13.78|
;;;1785   			{
;;;1786   				/* Is it in the suspended list because it is in the	Suspended
;;;1787   				state, or because is is blocked with no timeout? */
;;;1788   				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
000040  6a8b              LDR      r3,[r1,#0x28]
000042  b90b              CBNZ     r3,|L13.72|
000044  2301              MOVS     r3,#1
000046  e000              B        |L13.74|
                  |L13.72|
000048  2300              MOVS     r3,#0
                  |L13.74|
00004a  b103              CBZ      r3,|L13.78|
;;;1789   				{
;;;1790   					xReturn = pdTRUE;
00004c  2001              MOVS     r0,#1
                  |L13.78|
;;;1791   				}
;;;1792   				else
;;;1793   				{
;;;1794   					mtCOVERAGE_TEST_MARKER();
;;;1795   				}
;;;1796   			}
;;;1797   			else
;;;1798   			{
;;;1799   				mtCOVERAGE_TEST_MARKER();
;;;1800   			}
;;;1801   		}
;;;1802   		else
;;;1803   		{
;;;1804   			mtCOVERAGE_TEST_MARKER();
;;;1805   		}
;;;1806   
;;;1807   		return xReturn;
;;;1808   	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
00004e  bd10              POP      {r4,pc}
;;;1809   
                          ENDP

                  |L13.80|
                          DCD      xSuspendedTaskList
                  |L13.84|
                          DCD      xPendingReadyList

                          AREA ||i.prvWriteNameToBuffer||, CODE, READONLY, ALIGN=1

                  prvWriteNameToBuffer PROC
;;;4195   
;;;4196   	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
000000  b570              PUSH     {r4-r6,lr}
;;;4197   	{
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;4198   	size_t x;
;;;4199   
;;;4200   		/* Start by copying the entire string. */
;;;4201   		strcpy( pcBuffer, pcTaskName );
000006  4631              MOV      r1,r6
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       strcpy
;;;4202   
;;;4203   		/* Pad the end of the string with spaces to ensure columns line up when
;;;4204   		printed out. */
;;;4205   		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       strlen
000014  4604              MOV      r4,r0
000016  e002              B        |L14.30|
                  |L14.24|
;;;4206   		{
;;;4207   			pcBuffer[ x ] = ' ';
000018  2020              MOVS     r0,#0x20
00001a  5528              STRB     r0,[r5,r4]
00001c  1c64              ADDS     r4,r4,#1              ;4205
                  |L14.30|
00001e  2c09              CMP      r4,#9                 ;4205
000020  d3fa              BCC      |L14.24|
;;;4208   		}
;;;4209   
;;;4210   		/* Terminate. */
;;;4211   		pcBuffer[ x ] = ( char ) 0x00;
000022  2000              MOVS     r0,#0
000024  5528              STRB     r0,[r5,r4]
;;;4212   
;;;4213   		/* Return the new end of string. */
;;;4214   		return &( pcBuffer[ x ] );
000026  1928              ADDS     r0,r5,r4
;;;4215   	}
000028  bd70              POP      {r4-r6,pc}
;;;4216   
                          ENDP


                          AREA ||i.pvTaskIncrementMutexHeldCount||, CODE, READONLY, ALIGN=2

                  pvTaskIncrementMutexHeldCount PROC
;;;4461   
;;;4462   	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
000000  4806              LDR      r0,|L15.28|
;;;4463   	{
;;;4464   		/* If xSemaphoreCreateMutex() is called before any tasks have been created
;;;4465   		then pxCurrentTCB will be NULL. */
;;;4466   		if( pxCurrentTCB != NULL )
000002  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000004  b130              CBZ      r0,|L15.20|
;;;4467   		{
;;;4468   			( pxCurrentTCB->uxMutexesHeld )++;
000006  4905              LDR      r1,|L15.28|
000008  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
00000a  f101004c          ADD      r0,r1,#0x4c
00000e  6cc9              LDR      r1,[r1,#0x4c]
000010  1c49              ADDS     r1,r1,#1
000012  6001              STR      r1,[r0,#0]
                  |L15.20|
;;;4469   		}
;;;4470   
;;;4471   		return pxCurrentTCB;
000014  4801              LDR      r0,|L15.28|
000016  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
;;;4472   	}
000018  4770              BX       lr
;;;4473   
                          ENDP

00001a  0000              DCW      0x0000
                  |L15.28|
                          DCD      pxCurrentTCB

                          AREA ||i.ulTaskNotifyTake||, CODE, READONLY, ALIGN=2

                  ulTaskNotifyTake PROC
;;;4478   
;;;4479   	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
000000  b570              PUSH     {r4-r6,lr}
;;;4480   	{
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;4481   	uint32_t ulReturn;
;;;4482   
;;;4483   		taskENTER_CRITICAL();
000006  f7fffffe          BL       vPortEnterCritical
;;;4484   		{
;;;4485   			/* Only block if the notification count is not already non-zero. */
;;;4486   			if( pxCurrentTCB->ulNotifiedValue == 0UL )
00000a  4818              LDR      r0,|L16.108|
00000c  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00000e  6d00              LDR      r0,[r0,#0x50]
000010  b988              CBNZ     r0,|L16.54|
;;;4487   			{
;;;4488   				/* Mark this task as waiting for a notification. */
;;;4489   				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
000012  2001              MOVS     r0,#1
000014  4915              LDR      r1,|L16.108|
000016  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000018  f8810054          STRB     r0,[r1,#0x54]
;;;4490   
;;;4491   				if( xTicksToWait > ( TickType_t ) 0 )
00001c  b15d              CBZ      r5,|L16.54|
;;;4492   				{
;;;4493   					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
00001e  2101              MOVS     r1,#1
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;4494   					traceTASK_NOTIFY_TAKE_BLOCK();
;;;4495   
;;;4496   					/* All ports are written to allow a yield in a critical
;;;4497   					section (some will yield immediately, others wait until the
;;;4498   					critical section exits) - but it is not something that
;;;4499   					application code should ever do. */
;;;4500   					portYIELD_WITHIN_API();
000026  f04f5080          MOV      r0,#0x10000000
00002a  4911              LDR      r1,|L16.112|
00002c  6008              STR      r0,[r1,#0]
00002e  f3bf8f4f          DSB      
000032  f3bf8f6f          ISB      
                  |L16.54|
;;;4501   				}
;;;4502   				else
;;;4503   				{
;;;4504   					mtCOVERAGE_TEST_MARKER();
;;;4505   				}
;;;4506   			}
;;;4507   			else
;;;4508   			{
;;;4509   				mtCOVERAGE_TEST_MARKER();
;;;4510   			}
;;;4511   		}
;;;4512   		taskEXIT_CRITICAL();
000036  f7fffffe          BL       vPortExitCritical
;;;4513   
;;;4514   		taskENTER_CRITICAL();
00003a  f7fffffe          BL       vPortEnterCritical
;;;4515   		{
;;;4516   			traceTASK_NOTIFY_TAKE();
;;;4517   			ulReturn = pxCurrentTCB->ulNotifiedValue;
00003e  480b              LDR      r0,|L16.108|
000040  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000042  6d04              LDR      r4,[r0,#0x50]
;;;4518   
;;;4519   			if( ulReturn != 0UL )
000044  b14c              CBZ      r4,|L16.90|
;;;4520   			{
;;;4521   				if( xClearCountOnExit != pdFALSE )
000046  b126              CBZ      r6,|L16.82|
;;;4522   				{
;;;4523   					pxCurrentTCB->ulNotifiedValue = 0UL;
000048  2000              MOVS     r0,#0
00004a  4908              LDR      r1,|L16.108|
00004c  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
00004e  6508              STR      r0,[r1,#0x50]
000050  e003              B        |L16.90|
                  |L16.82|
;;;4524   				}
;;;4525   				else
;;;4526   				{
;;;4527   					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
000052  1e60              SUBS     r0,r4,#1
000054  4905              LDR      r1,|L16.108|
000056  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000058  6508              STR      r0,[r1,#0x50]
                  |L16.90|
;;;4528   				}
;;;4529   			}
;;;4530   			else
;;;4531   			{
;;;4532   				mtCOVERAGE_TEST_MARKER();
;;;4533   			}
;;;4534   
;;;4535   			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
00005a  2000              MOVS     r0,#0
00005c  4903              LDR      r1,|L16.108|
00005e  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000060  f8810054          STRB     r0,[r1,#0x54]
;;;4536   		}
;;;4537   		taskEXIT_CRITICAL();
000064  f7fffffe          BL       vPortExitCritical
;;;4538   
;;;4539   		return ulReturn;
000068  4620              MOV      r0,r4
;;;4540   	}
00006a  bd70              POP      {r4-r6,pc}
;;;4541   
                          ENDP

                  |L16.108|
                          DCD      pxCurrentTCB
                  |L16.112|
                          DCD      0xe000ed04

                          AREA ||i.uxTaskGetNumberOfTasks||, CODE, READONLY, ALIGN=2

                  uxTaskGetNumberOfTasks PROC
;;;2300   
;;;2301   UBaseType_t uxTaskGetNumberOfTasks( void )
000000  4801              LDR      r0,|L17.8|
;;;2302   {
;;;2303   	/* A critical section is not required because the variables are of type
;;;2304   	BaseType_t. */
;;;2305   	return uxCurrentNumberOfTasks;
000002  6800              LDR      r0,[r0,#0]  ; uxCurrentNumberOfTasks
;;;2306   }
000004  4770              BX       lr
;;;2307   /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L17.8|
                          DCD      uxCurrentNumberOfTasks

                          AREA ||i.uxTaskGetSystemState||, CODE, READONLY, ALIGN=2

                  uxTaskGetSystemState PROC
;;;2455   
;;;2456   	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2457   	{
000004  4605              MOV      r5,r0
000006  4688              MOV      r8,r1
000008  4616              MOV      r6,r2
;;;2458   	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
00000a  2400              MOVS     r4,#0
00000c  2705              MOVS     r7,#5
;;;2459   
;;;2460   		vTaskSuspendAll();
00000e  f7fffffe          BL       vTaskSuspendAll
;;;2461   		{
;;;2462   			/* Is there a space in the array for each task in the system? */
;;;2463   			if( uxArraySize >= uxCurrentNumberOfTasks )
000012  4821              LDR      r0,|L18.152|
000014  6800              LDR      r0,[r0,#0]  ; uxCurrentNumberOfTasks
000016  4580              CMP      r8,r0
000018  d339              BCC      |L18.142|
;;;2464   			{
;;;2465   				/* Fill in an TaskStatus_t structure with information on each
;;;2466   				task in the Ready state. */
;;;2467   				do
00001a  bf00              NOP      
                  |L18.28|
;;;2468   				{
;;;2469   					uxQueue--;
00001c  1e7f              SUBS     r7,r7,#1
;;;2470   					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
00001e  eb070287          ADD      r2,r7,r7,LSL #2
000022  4b1e              LDR      r3,|L18.156|
000024  eb030182          ADD      r1,r3,r2,LSL #2
000028  eb0402c4          ADD      r2,r4,r4,LSL #3
00002c  eb050082          ADD      r0,r5,r2,LSL #2
000030  2201              MOVS     r2,#1
000032  f7fffffe          BL       prvListTasksWithinSingleList
000036  4404              ADD      r4,r4,r0
;;;2471   
;;;2472   				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000038  2f00              CMP      r7,#0
00003a  d1ef              BNE      |L18.28|
;;;2473   
;;;2474   				/* Fill in an TaskStatus_t structure with information on each
;;;2475   				task in the Blocked state. */
;;;2476   				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
00003c  eb0401c4          ADD      r1,r4,r4,LSL #3
000040  eb050081          ADD      r0,r5,r1,LSL #2
000044  2202              MOVS     r2,#2
000046  4916              LDR      r1,|L18.160|
000048  6809              LDR      r1,[r1,#0]  ; pxDelayedTaskList
00004a  f7fffffe          BL       prvListTasksWithinSingleList
00004e  4404              ADD      r4,r4,r0
;;;2477   				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
000050  eb0401c4          ADD      r1,r4,r4,LSL #3
000054  eb050081          ADD      r0,r5,r1,LSL #2
000058  2202              MOVS     r2,#2
00005a  4912              LDR      r1,|L18.164|
00005c  6809              LDR      r1,[r1,#0]  ; pxOverflowDelayedTaskList
00005e  f7fffffe          BL       prvListTasksWithinSingleList
000062  4404              ADD      r4,r4,r0
;;;2478   
;;;2479   				#if( INCLUDE_vTaskDelete == 1 )
;;;2480   				{
;;;2481   					/* Fill in an TaskStatus_t structure with information on
;;;2482   					each task that has been deleted but not yet cleaned up. */
;;;2483   					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
000064  eb0401c4          ADD      r1,r4,r4,LSL #3
000068  eb050081          ADD      r0,r5,r1,LSL #2
00006c  2204              MOVS     r2,#4
00006e  490e              LDR      r1,|L18.168|
000070  f7fffffe          BL       prvListTasksWithinSingleList
000074  4404              ADD      r4,r4,r0
;;;2484   				}
;;;2485   				#endif
;;;2486   
;;;2487   				#if ( INCLUDE_vTaskSuspend == 1 )
;;;2488   				{
;;;2489   					/* Fill in an TaskStatus_t structure with information on
;;;2490   					each task in the Suspended state. */
;;;2491   					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
000076  eb0401c4          ADD      r1,r4,r4,LSL #3
00007a  eb050081          ADD      r0,r5,r1,LSL #2
00007e  2203              MOVS     r2,#3
000080  490a              LDR      r1,|L18.172|
000082  f7fffffe          BL       prvListTasksWithinSingleList
000086  4404              ADD      r4,r4,r0
;;;2492   				}
;;;2493   				#endif
;;;2494   
;;;2495   				#if ( configGENERATE_RUN_TIME_STATS == 1)
;;;2496   				{
;;;2497   					if( pulTotalRunTime != NULL )
;;;2498   					{
;;;2499   						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
;;;2500   							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
;;;2501   						#else
;;;2502   							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
;;;2503   						#endif
;;;2504   					}
;;;2505   				}
;;;2506   				#else
;;;2507   				{
;;;2508   					if( pulTotalRunTime != NULL )
000088  b10e              CBZ      r6,|L18.142|
;;;2509   					{
;;;2510   						*pulTotalRunTime = 0;
00008a  2000              MOVS     r0,#0
00008c  6030              STR      r0,[r6,#0]
                  |L18.142|
;;;2511   					}
;;;2512   				}
;;;2513   				#endif
;;;2514   			}
;;;2515   			else
;;;2516   			{
;;;2517   				mtCOVERAGE_TEST_MARKER();
;;;2518   			}
;;;2519   		}
;;;2520   		( void ) xTaskResumeAll();
00008e  f7fffffe          BL       xTaskResumeAll
;;;2521   
;;;2522   		return uxTask;
000092  4620              MOV      r0,r4
;;;2523   	}
000094  e8bd81f0          POP      {r4-r8,pc}
;;;2524   
                          ENDP

                  |L18.152|
                          DCD      uxCurrentNumberOfTasks
                  |L18.156|
                          DCD      pxReadyTasksLists
                  |L18.160|
                          DCD      pxDelayedTaskList
                  |L18.164|
                          DCD      pxOverflowDelayedTaskList
                  |L18.168|
                          DCD      xTasksWaitingTermination
                  |L18.172|
                          DCD      xSuspendedTaskList

                          AREA ||i.uxTaskGetTaskNumber||, CODE, READONLY, ALIGN=1

                  uxTaskGetTaskNumber PROC
;;;3239   
;;;3240   	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
000000  4601              MOV      r1,r0
;;;3241   	{
;;;3242   	UBaseType_t uxReturn;
;;;3243   	TCB_t const *pxTCB;
;;;3244   
;;;3245   		if( xTask != NULL )
000002  b111              CBZ      r1,|L19.10|
;;;3246   		{
;;;3247   			pxTCB = xTask;
000004  460a              MOV      r2,r1
;;;3248   			uxReturn = pxTCB->uxTaskNumber;
000006  6c50              LDR      r0,[r2,#0x44]
000008  e000              B        |L19.12|
                  |L19.10|
;;;3249   		}
;;;3250   		else
;;;3251   		{
;;;3252   			uxReturn = 0U;
00000a  2000              MOVS     r0,#0
                  |L19.12|
;;;3253   		}
;;;3254   
;;;3255   		return uxReturn;
;;;3256   	}
00000c  4770              BX       lr
;;;3257   
                          ENDP


                          AREA ||i.uxTaskPriorityGet||, CODE, READONLY, ALIGN=2

                  uxTaskPriorityGet PROC
;;;1441   
;;;1442   	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
000000  b570              PUSH     {r4-r6,lr}
;;;1443   	{
000002  4604              MOV      r4,r0
;;;1444   	TCB_t const *pxTCB;
;;;1445   	UBaseType_t uxReturn;
;;;1446   
;;;1447   		taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;1448   		{
;;;1449   			/* If null is passed in here then it is the priority of the task
;;;1450   			that called uxTaskPriorityGet() that is being queried. */
;;;1451   			pxTCB = prvGetTCBFromHandle( xTask );
000008  b914              CBNZ     r4,|L20.16|
00000a  4805              LDR      r0,|L20.32|
00000c  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00000e  e000              B        |L20.18|
                  |L20.16|
000010  4620              MOV      r0,r4
                  |L20.18|
000012  4606              MOV      r6,r0
;;;1452   			uxReturn = pxTCB->uxPriority;
000014  6af5              LDR      r5,[r6,#0x2c]
;;;1453   		}
;;;1454   		taskEXIT_CRITICAL();
000016  f7fffffe          BL       vPortExitCritical
;;;1455   
;;;1456   		return uxReturn;
00001a  4628              MOV      r0,r5
;;;1457   	}
00001c  bd70              POP      {r4-r6,pc}
;;;1458   
                          ENDP

00001e  0000              DCW      0x0000
                  |L20.32|
                          DCD      pxCurrentTCB

                          AREA ||i.uxTaskPriorityGetFromISR||, CODE, READONLY, ALIGN=2

                  uxTaskPriorityGetFromISR PROC
;;;1463   
;;;1464   	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1465   	{
000004  4605              MOV      r5,r0
;;;1466   	TCB_t const *pxTCB;
;;;1467   	UBaseType_t uxReturn, uxSavedInterruptState;
;;;1468   
;;;1469   		/* RTOS ports that support interrupt nesting have the concept of a
;;;1470   		maximum	system call (or maximum API call) interrupt priority.
;;;1471   		Interrupts that are	above the maximum system call priority are keep
;;;1472   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;1473   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;1474   		is defined in FreeRTOSConfig.h then
;;;1475   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1476   		failure if a FreeRTOS API function is called from an interrupt that has
;;;1477   		been assigned a priority above the configured maximum system call
;;;1478   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;1479   		from interrupts	that have been assigned a priority at or (logically)
;;;1480   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;1481   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;1482   		simple as possible.  More information (albeit Cortex-M specific) is
;;;1483   		provided on the following link:
;;;1484   		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1485   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
000006  f7fffffe          BL       vPortValidateInterruptPriority
;;;1486   
;;;1487   		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
00000a  bf00              NOP      
00000c  2140              MOVS     r1,#0x40
00000e  f3ef8011          MRS      r0,BASEPRI
000012  f3818811          MSR      BASEPRI,r1
000016  f3bf8f4f          DSB      
00001a  f3bf8f6f          ISB      
00001e  bf00              NOP      
000020  4604              MOV      r4,r0
;;;1488   		{
;;;1489   			/* If null is passed in here then it is the priority of the calling
;;;1490   			task that is being queried. */
;;;1491   			pxTCB = prvGetTCBFromHandle( xTask );
000022  b915              CBNZ     r5,|L21.42|
000024  4806              LDR      r0,|L21.64|
000026  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000028  e000              B        |L21.44|
                  |L21.42|
00002a  4628              MOV      r0,r5
                  |L21.44|
00002c  4607              MOV      r7,r0
;;;1492   			uxReturn = pxTCB->uxPriority;
00002e  6afe              LDR      r6,[r7,#0x2c]
;;;1493   		}
;;;1494   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
000030  bf00              NOP      
000032  f3848811          MSR      BASEPRI,r4
000036  bf00              NOP      
;;;1495   
;;;1496   		return uxReturn;
000038  4630              MOV      r0,r6
;;;1497   	}
00003a  e8bd81f0          POP      {r4-r8,pc}
;;;1498   
                          ENDP

00003e  0000              DCW      0x0000
                  |L21.64|
                          DCD      pxCurrentTCB

                          AREA ||i.uxTaskResetEventItemValue||, CODE, READONLY, ALIGN=2

                  uxTaskResetEventItemValue PROC
;;;4445   
;;;4446   TickType_t uxTaskResetEventItemValue( void )
000000  4905              LDR      r1,|L22.24|
;;;4447   {
;;;4448   TickType_t uxReturn;
;;;4449   
;;;4450   	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
000002  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000004  6988              LDR      r0,[r1,#0x18]
;;;4451   
;;;4452   	/* Reset the event list item to its normal value - so it can be used with
;;;4453   	queues and semaphores. */
;;;4454   	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000006  4904              LDR      r1,|L22.24|
000008  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
00000a  6ac9              LDR      r1,[r1,#0x2c]
00000c  f1c10105          RSB      r1,r1,#5
000010  4a01              LDR      r2,|L22.24|
000012  6812              LDR      r2,[r2,#0]  ; pxCurrentTCB
000014  6191              STR      r1,[r2,#0x18]
;;;4455   
;;;4456   	return uxReturn;
;;;4457   }
000016  4770              BX       lr
;;;4458   /*-----------------------------------------------------------*/
                          ENDP

                  |L22.24|
                          DCD      pxCurrentTCB

                          AREA ||i.vTaskDelay||, CODE, READONLY, ALIGN=2

                  vTaskDelay PROC
;;;1304   
;;;1305   	void vTaskDelay( const TickType_t xTicksToDelay )
000000  b570              PUSH     {r4-r6,lr}
;;;1306   	{
000002  4604              MOV      r4,r0
;;;1307   	BaseType_t xAlreadyYielded = pdFALSE;
000004  2500              MOVS     r5,#0
;;;1308   
;;;1309   		/* A delay time of zero just forces a reschedule. */
;;;1310   		if( xTicksToDelay > ( TickType_t ) 0U )
000006  b1d4              CBZ      r4,|L23.62|
;;;1311   		{
;;;1312   			configASSERT( uxSchedulerSuspended == 0 );
000008  4812              LDR      r0,|L23.84|
00000a  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00000c  b908              CBNZ     r0,|L23.18|
00000e  2001              MOVS     r0,#1
000010  e000              B        |L23.20|
                  |L23.18|
000012  2000              MOVS     r0,#0
                  |L23.20|
000014  b950              CBNZ     r0,|L23.44|
000016  bf00              NOP      
000018  2040              MOVS     r0,#0x40
00001a  f3808811          MSR      BASEPRI,r0
00001e  f3bf8f4f          DSB      
000022  f3bf8f6f          ISB      
000026  bf00              NOP      
000028  bf00              NOP      
                  |L23.42|
00002a  e7fe              B        |L23.42|
                  |L23.44|
;;;1313   			vTaskSuspendAll();
00002c  f7fffffe          BL       vTaskSuspendAll
;;;1314   			{
;;;1315   				traceTASK_DELAY();
;;;1316   
;;;1317   				/* A task that is removed from the event list while the
;;;1318   				scheduler is suspended will not get placed in the ready
;;;1319   				list or removed from the blocked list until the scheduler
;;;1320   				is resumed.
;;;1321   
;;;1322   				This task cannot be in an event list as it is the currently
;;;1323   				executing task. */
;;;1324   				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
000030  2100              MOVS     r1,#0
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;1325   			}
;;;1326   			xAlreadyYielded = xTaskResumeAll();
000038  f7fffffe          BL       xTaskResumeAll
00003c  4605              MOV      r5,r0
                  |L23.62|
;;;1327   		}
;;;1328   		else
;;;1329   		{
;;;1330   			mtCOVERAGE_TEST_MARKER();
;;;1331   		}
;;;1332   
;;;1333   		/* Force a reschedule if xTaskResumeAll has not already done so, we may
;;;1334   		have put ourselves to sleep. */
;;;1335   		if( xAlreadyYielded == pdFALSE )
00003e  b93d              CBNZ     r5,|L23.80|
;;;1336   		{
;;;1337   			portYIELD_WITHIN_API();
000040  f04f5080          MOV      r0,#0x10000000
000044  4904              LDR      r1,|L23.88|
000046  6008              STR      r0,[r1,#0]
000048  f3bf8f4f          DSB      
00004c  f3bf8f6f          ISB      
                  |L23.80|
;;;1338   		}
;;;1339   		else
;;;1340   		{
;;;1341   			mtCOVERAGE_TEST_MARKER();
;;;1342   		}
;;;1343   	}
000050  bd70              POP      {r4-r6,pc}
;;;1344   
                          ENDP

000052  0000              DCW      0x0000
                  |L23.84|
                          DCD      uxSchedulerSuspended
                  |L23.88|
                          DCD      0xe000ed04

                          AREA ||i.vTaskDelayUntil||, CODE, READONLY, ALIGN=2

                  vTaskDelayUntil PROC
;;;1220   
;;;1221   	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1222   	{
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
;;;1223   	TickType_t xTimeToWake;
;;;1224   	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
000008  f04f0900          MOV      r9,#0
;;;1225   
;;;1226   		configASSERT( pxPreviousWakeTime );
00000c  b954              CBNZ     r4,|L24.36|
00000e  bf00              NOP      
000010  2040              MOVS     r0,#0x40
000012  f3808811          MSR      BASEPRI,r0
000016  f3bf8f4f          DSB      
00001a  f3bf8f6f          ISB      
00001e  bf00              NOP      
000020  bf00              NOP      
                  |L24.34|
000022  e7fe              B        |L24.34|
                  |L24.36|
;;;1227   		configASSERT( ( xTimeIncrement > 0U ) );
000024  b10f              CBZ      r7,|L24.42|
000026  2001              MOVS     r0,#1
000028  e000              B        |L24.44|
                  |L24.42|
00002a  2000              MOVS     r0,#0
                  |L24.44|
00002c  b950              CBNZ     r0,|L24.68|
00002e  bf00              NOP      
000030  2040              MOVS     r0,#0x40
000032  f3808811          MSR      BASEPRI,r0
000036  f3bf8f4f          DSB      
00003a  f3bf8f6f          ISB      
00003e  bf00              NOP      
000040  bf00              NOP      
                  |L24.66|
000042  e7fe              B        |L24.66|
                  |L24.68|
;;;1228   		configASSERT( uxSchedulerSuspended == 0 );
000044  4820              LDR      r0,|L24.200|
000046  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000048  b908              CBNZ     r0,|L24.78|
00004a  2001              MOVS     r0,#1
00004c  e000              B        |L24.80|
                  |L24.78|
00004e  2000              MOVS     r0,#0
                  |L24.80|
000050  b950              CBNZ     r0,|L24.104|
000052  bf00              NOP      
000054  2040              MOVS     r0,#0x40
000056  f3808811          MSR      BASEPRI,r0
00005a  f3bf8f4f          DSB      
00005e  f3bf8f6f          ISB      
000062  bf00              NOP      
000064  bf00              NOP      
                  |L24.102|
000066  e7fe              B        |L24.102|
                  |L24.104|
;;;1229   
;;;1230   		vTaskSuspendAll();
000068  f7fffffe          BL       vTaskSuspendAll
;;;1231   		{
;;;1232   			/* Minor optimisation.  The tick count cannot change in this
;;;1233   			block. */
;;;1234   			const TickType_t xConstTickCount = xTickCount;
00006c  4817              LDR      r0,|L24.204|
00006e  6806              LDR      r6,[r0,#0]  ; xTickCount
;;;1235   
;;;1236   			/* Generate the tick time at which the task wants to wake. */
;;;1237   			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
000070  6820              LDR      r0,[r4,#0]
000072  19c5              ADDS     r5,r0,r7
;;;1238   
;;;1239   			if( xConstTickCount < *pxPreviousWakeTime )
000074  6820              LDR      r0,[r4,#0]
000076  42b0              CMP      r0,r6
000078  d907              BLS      |L24.138|
;;;1240   			{
;;;1241   				/* The tick count has overflowed since this function was
;;;1242   				lasted called.  In this case the only time we should ever
;;;1243   				actually delay is if the wake time has also	overflowed,
;;;1244   				and the wake time is greater than the tick time.  When this
;;;1245   				is the case it is as if neither time had overflowed. */
;;;1246   				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
00007a  6820              LDR      r0,[r4,#0]
00007c  42a8              CMP      r0,r5
00007e  d90b              BLS      |L24.152|
000080  42b5              CMP      r5,r6
000082  d909              BLS      |L24.152|
;;;1247   				{
;;;1248   					xShouldDelay = pdTRUE;
000084  f04f0901          MOV      r9,#1
000088  e006              B        |L24.152|
                  |L24.138|
;;;1249   				}
;;;1250   				else
;;;1251   				{
;;;1252   					mtCOVERAGE_TEST_MARKER();
;;;1253   				}
;;;1254   			}
;;;1255   			else
;;;1256   			{
;;;1257   				/* The tick time has not overflowed.  In this case we will
;;;1258   				delay if either the wake time has overflowed, and/or the
;;;1259   				tick time is less than the wake time. */
;;;1260   				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
00008a  6820              LDR      r0,[r4,#0]
00008c  42a8              CMP      r0,r5
00008e  d801              BHI      |L24.148|
000090  42b5              CMP      r5,r6
000092  d901              BLS      |L24.152|
                  |L24.148|
;;;1261   				{
;;;1262   					xShouldDelay = pdTRUE;
000094  f04f0901          MOV      r9,#1
                  |L24.152|
;;;1263   				}
;;;1264   				else
;;;1265   				{
;;;1266   					mtCOVERAGE_TEST_MARKER();
;;;1267   				}
;;;1268   			}
;;;1269   
;;;1270   			/* Update the wake time ready for the next call. */
;;;1271   			*pxPreviousWakeTime = xTimeToWake;
000098  6025              STR      r5,[r4,#0]
;;;1272   
;;;1273   			if( xShouldDelay != pdFALSE )
00009a  f1b90f00          CMP      r9,#0
00009e  d003              BEQ      |L24.168|
;;;1274   			{
;;;1275   				traceTASK_DELAY_UNTIL( xTimeToWake );
;;;1276   
;;;1277   				/* prvAddCurrentTaskToDelayedList() needs the block time, not
;;;1278   				the time to wake, so subtract the current tick count. */
;;;1279   				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
0000a0  1ba8              SUBS     r0,r5,r6
0000a2  2100              MOVS     r1,#0
0000a4  f7fffffe          BL       prvAddCurrentTaskToDelayedList
                  |L24.168|
;;;1280   			}
;;;1281   			else
;;;1282   			{
;;;1283   				mtCOVERAGE_TEST_MARKER();
;;;1284   			}
;;;1285   		}
;;;1286   		xAlreadyYielded = xTaskResumeAll();
0000a8  f7fffffe          BL       xTaskResumeAll
0000ac  4680              MOV      r8,r0
;;;1287   
;;;1288   		/* Force a reschedule if xTaskResumeAll has not already done so, we may
;;;1289   		have put ourselves to sleep. */
;;;1290   		if( xAlreadyYielded == pdFALSE )
0000ae  f1b80f00          CMP      r8,#0
0000b2  d107              BNE      |L24.196|
;;;1291   		{
;;;1292   			portYIELD_WITHIN_API();
0000b4  f04f5080          MOV      r0,#0x10000000
0000b8  4905              LDR      r1,|L24.208|
0000ba  6008              STR      r0,[r1,#0]
0000bc  f3bf8f4f          DSB      
0000c0  f3bf8f6f          ISB      
                  |L24.196|
;;;1293   		}
;;;1294   		else
;;;1295   		{
;;;1296   			mtCOVERAGE_TEST_MARKER();
;;;1297   		}
;;;1298   	}
0000c4  e8bd87f0          POP      {r4-r10,pc}
;;;1299   
                          ENDP

                  |L24.200|
                          DCD      uxSchedulerSuspended
                  |L24.204|
                          DCD      xTickCount
                  |L24.208|
                          DCD      0xe000ed04

                          AREA ||i.vTaskDelete||, CODE, READONLY, ALIGN=2

                  vTaskDelete PROC
;;;1128   
;;;1129   	void vTaskDelete( TaskHandle_t xTaskToDelete )
000000  b570              PUSH     {r4-r6,lr}
;;;1130   	{
000002  4605              MOV      r5,r0
;;;1131   	TCB_t *pxTCB;
;;;1132   
;;;1133   		taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;1134   		{
;;;1135   			/* If null is passed in here then it is the calling task that is
;;;1136   			being deleted. */
;;;1137   			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
000008  b915              CBNZ     r5,|L25.16|
00000a  4830              LDR      r0,|L25.204|
00000c  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00000e  e000              B        |L25.18|
                  |L25.16|
000010  4628              MOV      r0,r5
                  |L25.18|
000012  4604              MOV      r4,r0
;;;1138   
;;;1139   			/* Remove task from the ready list. */
;;;1140   			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
000014  1d20              ADDS     r0,r4,#4
000016  f7fffffe          BL       uxListRemove
00001a  b978              CBNZ     r0,|L25.60|
;;;1141   			{
;;;1142   				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
00001c  6ae0              LDR      r0,[r4,#0x2c]
00001e  eb000080          ADD      r0,r0,r0,LSL #2
000022  492b              LDR      r1,|L25.208|
000024  f8510020          LDR      r0,[r1,r0,LSL #2]
000028  b940              CBNZ     r0,|L25.60|
00002a  f894102c          LDRB     r1,[r4,#0x2c]
00002e  2001              MOVS     r0,#1
000030  4088              LSLS     r0,r0,r1
000032  4928              LDR      r1,|L25.212|
000034  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000036  4381              BICS     r1,r1,r0
000038  4826              LDR      r0,|L25.212|
00003a  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L25.60|
;;;1143   			}
;;;1144   			else
;;;1145   			{
;;;1146   				mtCOVERAGE_TEST_MARKER();
;;;1147   			}
;;;1148   
;;;1149   			/* Is the task waiting on an event also? */
;;;1150   			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
00003c  6aa0              LDR      r0,[r4,#0x28]
00003e  b118              CBZ      r0,|L25.72|
;;;1151   			{
;;;1152   				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
000040  f1040018          ADD      r0,r4,#0x18
000044  f7fffffe          BL       uxListRemove
                  |L25.72|
;;;1153   			}
;;;1154   			else
;;;1155   			{
;;;1156   				mtCOVERAGE_TEST_MARKER();
;;;1157   			}
;;;1158   
;;;1159   			/* Increment the uxTaskNumber also so kernel aware debuggers can
;;;1160   			detect that the task lists need re-generating.  This is done before
;;;1161   			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
;;;1162   			not return. */
;;;1163   			uxTaskNumber++;
000048  4823              LDR      r0,|L25.216|
00004a  6800              LDR      r0,[r0,#0]  ; uxTaskNumber
00004c  1c40              ADDS     r0,r0,#1
00004e  4922              LDR      r1,|L25.216|
000050  6008              STR      r0,[r1,#0]  ; uxTaskNumber
;;;1164   
;;;1165   			if( pxTCB == pxCurrentTCB )
000052  481e              LDR      r0,|L25.204|
000054  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000056  4284              CMP      r4,r0
000058  d109              BNE      |L25.110|
;;;1166   			{
;;;1167   				/* A task is deleting itself.  This cannot complete within the
;;;1168   				task itself, as a context switch to another task is required.
;;;1169   				Place the task in the termination list.  The idle task will
;;;1170   				check the termination list and free up any memory allocated by
;;;1171   				the scheduler for the TCB and stack of the deleted task. */
;;;1172   				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
00005a  1d21              ADDS     r1,r4,#4
00005c  481f              LDR      r0,|L25.220|
00005e  f7fffffe          BL       vListInsertEnd
;;;1173   
;;;1174   				/* Increment the ucTasksDeleted variable so the idle task knows
;;;1175   				there is a task that has been deleted and that it should therefore
;;;1176   				check the xTasksWaitingTermination list. */
;;;1177   				++uxDeletedTasksWaitingCleanUp;
000062  481f              LDR      r0,|L25.224|
000064  6800              LDR      r0,[r0,#0]  ; uxDeletedTasksWaitingCleanUp
000066  1c40              ADDS     r0,r0,#1
000068  491d              LDR      r1,|L25.224|
00006a  6008              STR      r0,[r1,#0]  ; uxDeletedTasksWaitingCleanUp
00006c  e009              B        |L25.130|
                  |L25.110|
;;;1178   
;;;1179   				/* The pre-delete hook is primarily for the Windows simulator,
;;;1180   				in which Windows specific clean up operations are performed,
;;;1181   				after which it is not possible to yield away from this task -
;;;1182   				hence xYieldPending is used to latch that a context switch is
;;;1183   				required. */
;;;1184   				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
;;;1185   			}
;;;1186   			else
;;;1187   			{
;;;1188   				--uxCurrentNumberOfTasks;
00006e  481d              LDR      r0,|L25.228|
000070  6800              LDR      r0,[r0,#0]  ; uxCurrentNumberOfTasks
000072  1e40              SUBS     r0,r0,#1
000074  491b              LDR      r1,|L25.228|
000076  6008              STR      r0,[r1,#0]  ; uxCurrentNumberOfTasks
;;;1189   				prvDeleteTCB( pxTCB );
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       prvDeleteTCB
;;;1190   
;;;1191   				/* Reset the next expected unblock time in case it referred to
;;;1192   				the task that has just been deleted. */
;;;1193   				prvResetNextTaskUnblockTime();
00007e  f7fffffe          BL       prvResetNextTaskUnblockTime
                  |L25.130|
;;;1194   			}
;;;1195   
;;;1196   			traceTASK_DELETE( pxTCB );
;;;1197   		}
;;;1198   		taskEXIT_CRITICAL();
000082  f7fffffe          BL       vPortExitCritical
;;;1199   
;;;1200   		/* Force a reschedule if it is the currently running task that has just
;;;1201   		been deleted. */
;;;1202   		if( xSchedulerRunning != pdFALSE )
000086  4818              LDR      r0,|L25.232|
000088  6800              LDR      r0,[r0,#0]  ; xSchedulerRunning
00008a  b1e8              CBZ      r0,|L25.200|
;;;1203   		{
;;;1204   			if( pxTCB == pxCurrentTCB )
00008c  480f              LDR      r0,|L25.204|
00008e  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000090  4284              CMP      r4,r0
000092  d119              BNE      |L25.200|
;;;1205   			{
;;;1206   				configASSERT( uxSchedulerSuspended == 0 );
000094  4815              LDR      r0,|L25.236|
000096  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000098  b908              CBNZ     r0,|L25.158|
00009a  2001              MOVS     r0,#1
00009c  e000              B        |L25.160|
                  |L25.158|
00009e  2000              MOVS     r0,#0
                  |L25.160|
0000a0  b950              CBNZ     r0,|L25.184|
0000a2  bf00              NOP      
0000a4  2040              MOVS     r0,#0x40
0000a6  f3808811          MSR      BASEPRI,r0
0000aa  f3bf8f4f          DSB      
0000ae  f3bf8f6f          ISB      
0000b2  bf00              NOP      
0000b4  bf00              NOP      
                  |L25.182|
0000b6  e7fe              B        |L25.182|
                  |L25.184|
;;;1207   				portYIELD_WITHIN_API();
0000b8  f04f5080          MOV      r0,#0x10000000
0000bc  490c              LDR      r1,|L25.240|
0000be  6008              STR      r0,[r1,#0]
0000c0  f3bf8f4f          DSB      
0000c4  f3bf8f6f          ISB      
                  |L25.200|
;;;1208   			}
;;;1209   			else
;;;1210   			{
;;;1211   				mtCOVERAGE_TEST_MARKER();
;;;1212   			}
;;;1213   		}
;;;1214   	}
0000c8  bd70              POP      {r4-r6,pc}
;;;1215   
                          ENDP

0000ca  0000              DCW      0x0000
                  |L25.204|
                          DCD      pxCurrentTCB
                  |L25.208|
                          DCD      pxReadyTasksLists
                  |L25.212|
                          DCD      uxTopReadyPriority
                  |L25.216|
                          DCD      uxTaskNumber
                  |L25.220|
                          DCD      xTasksWaitingTermination
                  |L25.224|
                          DCD      uxDeletedTasksWaitingCleanUp
                  |L25.228|
                          DCD      uxCurrentNumberOfTasks
                  |L25.232|
                          DCD      xSchedulerRunning
                  |L25.236|
                          DCD      uxSchedulerSuspended
                  |L25.240|
                          DCD      0xe000ed04

                          AREA ||i.vTaskEndScheduler||, CODE, READONLY, ALIGN=2

                  vTaskEndScheduler PROC
;;;2060   
;;;2061   void vTaskEndScheduler( void )
000000  b510              PUSH     {r4,lr}
;;;2062   {
;;;2063   	/* Stop the scheduler interrupts and call the portable scheduler end
;;;2064   	routine so the original ISRs can be restored if necessary.  The port
;;;2065   	layer must ensure interrupts enable	bit is left in the correct state. */
;;;2066   	portDISABLE_INTERRUPTS();
000002  bf00              NOP      
000004  2040              MOVS     r0,#0x40
000006  f3808811          MSR      BASEPRI,r0
00000a  f3bf8f4f          DSB      
00000e  f3bf8f6f          ISB      
000012  bf00              NOP      
;;;2067   	xSchedulerRunning = pdFALSE;
000014  2000              MOVS     r0,#0
000016  4902              LDR      r1,|L26.32|
000018  6008              STR      r0,[r1,#0]  ; xSchedulerRunning
;;;2068   	vPortEndScheduler();
00001a  f7fffffe          BL       vPortEndScheduler
;;;2069   }
00001e  bd10              POP      {r4,pc}
;;;2070   /*----------------------------------------------------------*/
                          ENDP

                  |L26.32|
                          DCD      xSchedulerRunning

                          AREA ||i.vTaskGetInfo||, CODE, READONLY, ALIGN=2

                  vTaskGetInfo PROC
;;;3561   
;;;3562   	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;3563   	{
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4690              MOV      r8,r2
00000a  461e              MOV      r6,r3
;;;3564   	TCB_t *pxTCB;
;;;3565   
;;;3566   		/* xTask is NULL then get the state of the calling task. */
;;;3567   		pxTCB = prvGetTCBFromHandle( xTask );
00000c  b917              CBNZ     r7,|L27.20|
00000e  481c              LDR      r0,|L27.128|
000010  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000012  e000              B        |L27.22|
                  |L27.20|
000014  4638              MOV      r0,r7
                  |L27.22|
000016  4605              MOV      r5,r0
;;;3568   
;;;3569   		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
000018  6025              STR      r5,[r4,#0]
;;;3570   		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
00001a  f1050034          ADD      r0,r5,#0x34
00001e  6060              STR      r0,[r4,#4]
;;;3571   		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
000020  6ae8              LDR      r0,[r5,#0x2c]
000022  6120              STR      r0,[r4,#0x10]
;;;3572   		pxTaskStatus->pxStackBase = pxTCB->pxStack;
000024  6b28              LDR      r0,[r5,#0x30]
000026  61e0              STR      r0,[r4,#0x1c]
;;;3573   		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
000028  6c28              LDR      r0,[r5,#0x40]
00002a  60a0              STR      r0,[r4,#8]
;;;3574   
;;;3575   		#if ( configUSE_MUTEXES == 1 )
;;;3576   		{
;;;3577   			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
00002c  6ca8              LDR      r0,[r5,#0x48]
00002e  6160              STR      r0,[r4,#0x14]
;;;3578   		}
;;;3579   		#else
;;;3580   		{
;;;3581   			pxTaskStatus->uxBasePriority = 0;
;;;3582   		}
;;;3583   		#endif
;;;3584   
;;;3585   		#if ( configGENERATE_RUN_TIME_STATS == 1 )
;;;3586   		{
;;;3587   			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
;;;3588   		}
;;;3589   		#else
;;;3590   		{
;;;3591   			pxTaskStatus->ulRunTimeCounter = 0;
000030  2000              MOVS     r0,#0
000032  61a0              STR      r0,[r4,#0x18]
;;;3592   		}
;;;3593   		#endif
;;;3594   
;;;3595   		/* Obtaining the task state is a little fiddly, so is only done if the
;;;3596   		value of eState passed into this function is eInvalid - otherwise the
;;;3597   		state is just set to whatever is passed in. */
;;;3598   		if( eState != eInvalid )
000034  2e05              CMP      r6,#5
000036  d012              BEQ      |L27.94|
;;;3599   		{
;;;3600   			if( pxTCB == pxCurrentTCB )
000038  4811              LDR      r0,|L27.128|
00003a  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00003c  4285              CMP      r5,r0
00003e  d102              BNE      |L27.70|
;;;3601   			{
;;;3602   				pxTaskStatus->eCurrentState = eRunning;
000040  2000              MOVS     r0,#0
000042  7320              STRB     r0,[r4,#0xc]
000044  e00f              B        |L27.102|
                  |L27.70|
;;;3603   			}
;;;3604   			else
;;;3605   			{
;;;3606   				pxTaskStatus->eCurrentState = eState;
000046  7326              STRB     r6,[r4,#0xc]
;;;3607   
;;;3608   				#if ( INCLUDE_vTaskSuspend == 1 )
;;;3609   				{
;;;3610   					/* If the task is in the suspended list then there is a
;;;3611   					chance it is actually just blocked indefinitely - so really
;;;3612   					it should be reported as being in the Blocked state. */
;;;3613   					if( eState == eSuspended )
000048  2e03              CMP      r6,#3
00004a  d10c              BNE      |L27.102|
;;;3614   					{
;;;3615   						vTaskSuspendAll();
00004c  f7fffffe          BL       vTaskSuspendAll
;;;3616   						{
;;;3617   							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
000050  6aa8              LDR      r0,[r5,#0x28]
000052  b108              CBZ      r0,|L27.88|
;;;3618   							{
;;;3619   								pxTaskStatus->eCurrentState = eBlocked;
000054  2002              MOVS     r0,#2
000056  7320              STRB     r0,[r4,#0xc]
                  |L27.88|
;;;3620   							}
;;;3621   						}
;;;3622   						( void ) xTaskResumeAll();
000058  f7fffffe          BL       xTaskResumeAll
00005c  e003              B        |L27.102|
                  |L27.94|
;;;3623   					}
;;;3624   				}
;;;3625   				#endif /* INCLUDE_vTaskSuspend */
;;;3626   			}
;;;3627   		}
;;;3628   		else
;;;3629   		{
;;;3630   			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
00005e  4628              MOV      r0,r5
000060  f7fffffe          BL       eTaskGetState
000064  7320              STRB     r0,[r4,#0xc]
                  |L27.102|
;;;3631   		}
;;;3632   
;;;3633   		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
;;;3634   		parameter is provided to allow it to be skipped. */
;;;3635   		if( xGetFreeStackSpace != pdFALSE )
000066  f1b80f00          CMP      r8,#0
00006a  d004              BEQ      |L27.118|
;;;3636   		{
;;;3637   			#if ( portSTACK_GROWTH > 0 )
;;;3638   			{
;;;3639   				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
;;;3640   			}
;;;3641   			#else
;;;3642   			{
;;;3643   				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
00006c  6b28              LDR      r0,[r5,#0x30]
00006e  f7fffffe          BL       prvTaskCheckFreeStackSpace
000072  8420              STRH     r0,[r4,#0x20]
000074  e001              B        |L27.122|
                  |L27.118|
;;;3644   			}
;;;3645   			#endif
;;;3646   		}
;;;3647   		else
;;;3648   		{
;;;3649   			pxTaskStatus->usStackHighWaterMark = 0;
000076  2000              MOVS     r0,#0
000078  8420              STRH     r0,[r4,#0x20]
                  |L27.122|
;;;3650   		}
;;;3651   	}
00007a  e8bd81f0          POP      {r4-r8,pc}
;;;3652   
                          ENDP

00007e  0000              DCW      0x0000
                  |L27.128|
                          DCD      pxCurrentTCB

                          AREA ||i.vTaskInternalSetTimeOutState||, CODE, READONLY, ALIGN=2

                  vTaskInternalSetTimeOutState PROC
;;;3160   
;;;3161   void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
000000  4903              LDR      r1,|L28.16|
;;;3162   {
;;;3163   	/* For internal use only as it does not use a critical section. */
;;;3164   	pxTimeOut->xOverflowCount = xNumOfOverflows;
000002  6809              LDR      r1,[r1,#0]  ; xNumOfOverflows
000004  6001              STR      r1,[r0,#0]
;;;3165   	pxTimeOut->xTimeOnEntering = xTickCount;
000006  4903              LDR      r1,|L28.20|
000008  6809              LDR      r1,[r1,#0]  ; xTickCount
00000a  6041              STR      r1,[r0,#4]
;;;3166   }
00000c  4770              BX       lr
;;;3167   /*-----------------------------------------------------------*/
                          ENDP

00000e  0000              DCW      0x0000
                  |L28.16|
                          DCD      xNumOfOverflows
                  |L28.20|
                          DCD      xTickCount

                          AREA ||i.vTaskList||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_u
                          REQUIRE _printf_c
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  vTaskList PROC
;;;4221   
;;;4222   	void vTaskList( char * pcWriteBuffer )
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;4223   	{
000004  4606              MOV      r6,r0
;;;4224   	TaskStatus_t *pxTaskStatusArray;
;;;4225   	UBaseType_t uxArraySize, x;
;;;4226   	char cStatus;
;;;4227   
;;;4228   		/*
;;;4229   		 * PLEASE NOTE:
;;;4230   		 *
;;;4231   		 * This function is provided for convenience only, and is used by many
;;;4232   		 * of the demo applications.  Do not consider it to be part of the
;;;4233   		 * scheduler.
;;;4234   		 *
;;;4235   		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
;;;4236   		 * uxTaskGetSystemState() output into a human readable table that
;;;4237   		 * displays task names, states and stack usage.
;;;4238   		 *
;;;4239   		 * vTaskList() has a dependency on the sprintf() C library function that
;;;4240   		 * might bloat the code size, use a lot of stack, and provide different
;;;4241   		 * results on different platforms.  An alternative, tiny, third party,
;;;4242   		 * and limited functionality implementation of sprintf() is provided in
;;;4243   		 * many of the FreeRTOS/Demo sub-directories in a file called
;;;4244   		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
;;;4245   		 * snprintf() implementation!).
;;;4246   		 *
;;;4247   		 * It is recommended that production systems call uxTaskGetSystemState()
;;;4248   		 * directly to get access to raw stats data, rather than indirectly
;;;4249   		 * through a call to vTaskList().
;;;4250   		 */
;;;4251   
;;;4252   
;;;4253   		/* Make sure the write buffer does not contain a string. */
;;;4254   		*pcWriteBuffer = ( char ) 0x00;
000006  2000              MOVS     r0,#0
000008  7030              STRB     r0,[r6,#0]
;;;4255   
;;;4256   		/* Take a snapshot of the number of tasks in case it changes while this
;;;4257   		function is executing. */
;;;4258   		uxArraySize = uxCurrentNumberOfTasks;
00000a  482f              LDR      r0,|L29.200|
00000c  6807              LDR      r7,[r0,#0]  ; uxCurrentNumberOfTasks
;;;4259   
;;;4260   		/* Allocate an array index for each task.  NOTE!  if
;;;4261   		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
;;;4262   		equate to NULL. */
;;;4263   		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
00000e  4601              MOV      r1,r0
000010  6809              LDR      r1,[r1,#0]  ; uxCurrentNumberOfTasks
000012  eb0101c1          ADD      r1,r1,r1,LSL #3
000016  0088              LSLS     r0,r1,#2
000018  f7fffffe          BL       pvPortMalloc
00001c  4605              MOV      r5,r0
;;;4264   
;;;4265   		if( pxTaskStatusArray != NULL )
00001e  2d00              CMP      r5,#0
000020  d050              BEQ      |L29.196|
;;;4266   		{
;;;4267   			/* Generate the (binary) data. */
;;;4268   			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
000022  2200              MOVS     r2,#0
000024  4639              MOV      r1,r7
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       uxTaskGetSystemState
00002c  4607              MOV      r7,r0
;;;4269   
;;;4270   			/* Create a human readable table from the binary data. */
;;;4271   			for( x = 0; x < uxArraySize; x++ )
00002e  2400              MOVS     r4,#0
000030  e043              B        |L29.186|
                  |L29.50|
;;;4272   			{
;;;4273   				switch( pxTaskStatusArray[ x ].eCurrentState )
000032  eb0400c4          ADD      r0,r4,r4,LSL #3
000036  eb050080          ADD      r0,r5,r0,LSL #2
00003a  7b00              LDRB     r0,[r0,#0xc]
00003c  2806              CMP      r0,#6
00003e  d213              BCS      |L29.104|
000040  e8dff000          TBB      [pc,r0]
000044  0306090c          DCB      0x03,0x06,0x09,0x0c
000048  0f13              DCB      0x0f,0x13
;;;4274   				{
;;;4275   					case eRunning:		cStatus = tskRUNNING_CHAR;
00004a  f04f0858          MOV      r8,#0x58
;;;4276   										break;
00004e  e00f              B        |L29.112|
;;;4277   
;;;4278   					case eReady:		cStatus = tskREADY_CHAR;
000050  f04f0852          MOV      r8,#0x52
;;;4279   										break;
000054  e00c              B        |L29.112|
;;;4280   
;;;4281   					case eBlocked:		cStatus = tskBLOCKED_CHAR;
000056  f04f0842          MOV      r8,#0x42
;;;4282   										break;
00005a  e009              B        |L29.112|
;;;4283   
;;;4284   					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
00005c  f04f0853          MOV      r8,#0x53
;;;4285   										break;
000060  e006              B        |L29.112|
;;;4286   
;;;4287   					case eDeleted:		cStatus = tskDELETED_CHAR;
000062  f04f0844          MOV      r8,#0x44
;;;4288   										break;
000066  e003              B        |L29.112|
                  |L29.104|
;;;4289   
;;;4290   					case eInvalid:		/* Fall through. */
000068  bf00              NOP      
;;;4291   					default:			/* Should not get here, but it is included
;;;4292   										to prevent static checking errors. */
;;;4293   										cStatus = ( char ) 0x00;
00006a  f04f0800          MOV      r8,#0
;;;4294   										break;
00006e  bf00              NOP      
                  |L29.112|
000070  bf00              NOP                            ;4276
;;;4295   				}
;;;4296   
;;;4297   				/* Write the task name to the string, padding with spaces so it
;;;4298   				can be printed in tabular form more easily. */
;;;4299   				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
000072  eb0400c4          ADD      r0,r4,r4,LSL #3
000076  eb050080          ADD      r0,r5,r0,LSL #2
00007a  6841              LDR      r1,[r0,#4]
00007c  4630              MOV      r0,r6
00007e  f7fffffe          BL       prvWriteNameToBuffer
000082  4606              MOV      r6,r0
;;;4300   
;;;4301   				/* Write the rest of the string. */
;;;4302   				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
000084  eb0400c4          ADD      r0,r4,r4,LSL #3
000088  eb050080          ADD      r0,r5,r0,LSL #2
00008c  6880              LDR      r0,[r0,#8]
00008e  eb0401c4          ADD      r1,r4,r4,LSL #3
000092  eb050181          ADD      r1,r5,r1,LSL #2
000096  8c09              LDRH     r1,[r1,#0x20]
000098  e9cd1000          STRD     r1,r0,[sp,#0]
00009c  eb0400c4          ADD      r0,r4,r4,LSL #3
0000a0  eb050080          ADD      r0,r5,r0,LSL #2
0000a4  4642              MOV      r2,r8
0000a6  a109              ADR      r1,|L29.204|
0000a8  6903              LDR      r3,[r0,#0x10]
0000aa  4630              MOV      r0,r6
0000ac  f7fffffe          BL       __2sprintf
;;;4303   				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
0000b0  4630              MOV      r0,r6
0000b2  f7fffffe          BL       strlen
0000b6  4406              ADD      r6,r6,r0
0000b8  1c64              ADDS     r4,r4,#1              ;4271
                  |L29.186|
0000ba  42bc              CMP      r4,r7                 ;4271
0000bc  d3b9              BCC      |L29.50|
;;;4304   			}
;;;4305   
;;;4306   			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
;;;4307   			is 0 then vPortFree() will be #defined to nothing. */
;;;4308   			vPortFree( pxTaskStatusArray );
0000be  4628              MOV      r0,r5
0000c0  f7fffffe          BL       vPortFree
                  |L29.196|
;;;4309   		}
;;;4310   		else
;;;4311   		{
;;;4312   			mtCOVERAGE_TEST_MARKER();
;;;4313   		}
;;;4314   	}
0000c4  e8bd81fc          POP      {r2-r8,pc}
;;;4315   
                          ENDP

                  |L29.200|
                          DCD      uxCurrentNumberOfTasks
                  |L29.204|
0000cc  09256309          DCB      "\t%c\t%u\t%u\t%u\r\n",0
0000d0  25750925
0000d4  75092575
0000d8  0d0a00  
0000db  00                DCB      0

                          AREA ||i.vTaskMissedYield||, CODE, READONLY, ALIGN=2

                  vTaskMissedYield PROC
;;;3231   
;;;3232   void vTaskMissedYield( void )
000000  2001              MOVS     r0,#1
;;;3233   {
;;;3234   	xYieldPending = pdTRUE;
000002  4901              LDR      r1,|L30.8|
000004  6008              STR      r0,[r1,#0]  ; xYieldPending
;;;3235   }
000006  4770              BX       lr
;;;3236   /*-----------------------------------------------------------*/
                          ENDP

                  |L30.8|
                          DCD      xYieldPending

                          AREA ||i.vTaskNotifyGiveFromISR||, CODE, READONLY, ALIGN=2

                  vTaskNotifyGiveFromISR PROC
;;;4869   
;;;4870   	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4871   	{
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
;;;4872   	TCB_t * pxTCB;
;;;4873   	uint8_t ucOriginalNotifyState;
;;;4874   	UBaseType_t uxSavedInterruptStatus;
;;;4875   
;;;4876   		configASSERT( xTaskToNotify );
000008  b955              CBNZ     r5,|L31.32|
00000a  bf00              NOP      
00000c  2040              MOVS     r0,#0x40
00000e  f3808811          MSR      BASEPRI,r0
000012  f3bf8f4f          DSB      
000016  f3bf8f6f          ISB      
00001a  bf00              NOP      
00001c  bf00              NOP      
                  |L31.30|
00001e  e7fe              B        |L31.30|
                  |L31.32|
;;;4877   
;;;4878   		/* RTOS ports that support interrupt nesting have the concept of a
;;;4879   		maximum	system call (or maximum API call) interrupt priority.
;;;4880   		Interrupts that are	above the maximum system call priority are keep
;;;4881   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;4882   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;4883   		is defined in FreeRTOSConfig.h then
;;;4884   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;4885   		failure if a FreeRTOS API function is called from an interrupt that has
;;;4886   		been assigned a priority above the configured maximum system call
;;;4887   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;4888   		from interrupts	that have been assigned a priority at or (logically)
;;;4889   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;4890   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;4891   		simple as possible.  More information (albeit Cortex-M specific) is
;;;4892   		provided on the following link:
;;;4893   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;4894   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
000020  f7fffffe          BL       vPortValidateInterruptPriority
;;;4895   
;;;4896   		pxTCB = xTaskToNotify;
000024  462c              MOV      r4,r5
;;;4897   
;;;4898   		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
000026  bf00              NOP      
000028  2140              MOVS     r1,#0x40
00002a  f3ef8011          MRS      r0,BASEPRI
00002e  f3818811          MSR      BASEPRI,r1
000032  f3bf8f4f          DSB      
000036  f3bf8f6f          ISB      
00003a  bf00              NOP      
00003c  4606              MOV      r6,r0
;;;4899   		{
;;;4900   			ucOriginalNotifyState = pxTCB->ucNotifyState;
00003e  f8948054          LDRB     r8,[r4,#0x54]
;;;4901   			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
000042  2002              MOVS     r0,#2
000044  f8840054          STRB     r0,[r4,#0x54]
;;;4902   
;;;4903   			/* 'Giving' is equivalent to incrementing a count in a counting
;;;4904   			semaphore. */
;;;4905   			( pxTCB->ulNotifiedValue )++;
000048  6d20              LDR      r0,[r4,#0x50]
00004a  1c40              ADDS     r0,r0,#1
00004c  6520              STR      r0,[r4,#0x50]
;;;4906   
;;;4907   			traceTASK_NOTIFY_GIVE_FROM_ISR();
;;;4908   
;;;4909   			/* If the task is in the blocked state specifically to wait for a
;;;4910   			notification then unblock it now. */
;;;4911   			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
00004e  f1b80f01          CMP      r8,#1
000052  d13a              BNE      |L31.202|
;;;4912   			{
;;;4913   				/* The task should not have been on an event list. */
;;;4914   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
000054  6aa0              LDR      r0,[r4,#0x28]
000056  b908              CBNZ     r0,|L31.92|
000058  2001              MOVS     r0,#1
00005a  e000              B        |L31.94|
                  |L31.92|
00005c  2000              MOVS     r0,#0
                  |L31.94|
00005e  b950              CBNZ     r0,|L31.118|
000060  bf00              NOP      
000062  2040              MOVS     r0,#0x40
000064  f3808811          MSR      BASEPRI,r0
000068  f3bf8f4f          DSB      
00006c  f3bf8f6f          ISB      
000070  bf00              NOP      
000072  bf00              NOP      
                  |L31.116|
000074  e7fe              B        |L31.116|
                  |L31.118|
;;;4915   
;;;4916   				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000076  4818              LDR      r0,|L31.216|
000078  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00007a  b9a8              CBNZ     r0,|L31.168|
;;;4917   				{
;;;4918   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
00007c  1d20              ADDS     r0,r4,#4
00007e  f7fffffe          BL       uxListRemove
;;;4919   					prvAddTaskToReadyList( pxTCB );
000082  f894102c          LDRB     r1,[r4,#0x2c]
000086  2001              MOVS     r0,#1
000088  4088              LSLS     r0,r0,r1
00008a  4914              LDR      r1,|L31.220|
00008c  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
00008e  4308              ORRS     r0,r0,r1
000090  4912              LDR      r1,|L31.220|
000092  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000094  6ae1              LDR      r1,[r4,#0x2c]
000096  eb010181          ADD      r1,r1,r1,LSL #2
00009a  4a11              LDR      r2,|L31.224|
00009c  eb020081          ADD      r0,r2,r1,LSL #2
0000a0  1d21              ADDS     r1,r4,#4
0000a2  f7fffffe          BL       vListInsertEnd
0000a6  e004              B        |L31.178|
                  |L31.168|
;;;4920   				}
;;;4921   				else
;;;4922   				{
;;;4923   					/* The delayed and ready lists cannot be accessed, so hold
;;;4924   					this task pending until the scheduler is resumed. */
;;;4925   					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
0000a8  f1040118          ADD      r1,r4,#0x18
0000ac  480d              LDR      r0,|L31.228|
0000ae  f7fffffe          BL       vListInsertEnd
                  |L31.178|
;;;4926   				}
;;;4927   
;;;4928   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
0000b2  490d              LDR      r1,|L31.232|
0000b4  6ae0              LDR      r0,[r4,#0x2c]
0000b6  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
0000b8  6ac9              LDR      r1,[r1,#0x2c]
0000ba  4288              CMP      r0,r1
0000bc  d905              BLS      |L31.202|
;;;4929   				{
;;;4930   					/* The notified task has a priority above the currently
;;;4931   					executing task so a yield is required. */
;;;4932   					if( pxHigherPriorityTaskWoken != NULL )
0000be  b10f              CBZ      r7,|L31.196|
;;;4933   					{
;;;4934   						*pxHigherPriorityTaskWoken = pdTRUE;
0000c0  2001              MOVS     r0,#1
0000c2  6038              STR      r0,[r7,#0]
                  |L31.196|
;;;4935   					}
;;;4936   
;;;4937   					/* Mark that a yield is pending in case the user is not
;;;4938   					using the "xHigherPriorityTaskWoken" parameter in an ISR
;;;4939   					safe FreeRTOS function. */
;;;4940   					xYieldPending = pdTRUE;
0000c4  2001              MOVS     r0,#1
0000c6  4909              LDR      r1,|L31.236|
0000c8  6008              STR      r0,[r1,#0]  ; xYieldPending
                  |L31.202|
;;;4941   				}
;;;4942   				else
;;;4943   				{
;;;4944   					mtCOVERAGE_TEST_MARKER();
;;;4945   				}
;;;4946   			}
;;;4947   		}
;;;4948   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
0000ca  bf00              NOP      
0000cc  f3868811          MSR      BASEPRI,r6
0000d0  bf00              NOP      
;;;4949   	}
0000d2  e8bd81f0          POP      {r4-r8,pc}
;;;4950   
                          ENDP

0000d6  0000              DCW      0x0000
                  |L31.216|
                          DCD      uxSchedulerSuspended
                  |L31.220|
                          DCD      uxTopReadyPriority
                  |L31.224|
                          DCD      pxReadyTasksLists
                  |L31.228|
                          DCD      xPendingReadyList
                  |L31.232|
                          DCD      pxCurrentTCB
                  |L31.236|
                          DCD      xYieldPending

                          AREA ||i.vTaskPlaceOnEventList||, CODE, READONLY, ALIGN=2

                  vTaskPlaceOnEventList PROC
;;;2972   
;;;2973   void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
000000  b570              PUSH     {r4-r6,lr}
;;;2974   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2975   	configASSERT( pxEventList );
000006  b954              CBNZ     r4,|L32.30|
000008  bf00              NOP      
00000a  2040              MOVS     r0,#0x40
00000c  f3808811          MSR      BASEPRI,r0
000010  f3bf8f4f          DSB      
000014  f3bf8f6f          ISB      
000018  bf00              NOP      
00001a  bf00              NOP      
                  |L32.28|
00001c  e7fe              B        |L32.28|
                  |L32.30|
;;;2976   
;;;2977   	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
;;;2978   	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
;;;2979   
;;;2980   	/* Place the event list item of the TCB in the appropriate event list.
;;;2981   	This is placed in the list in priority order so the highest priority task
;;;2982   	is the first to be woken by the event.  The queue that contains the event
;;;2983   	list is locked, preventing simultaneous access from interrupts. */
;;;2984   	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
00001e  4805              LDR      r0,|L32.52|
000020  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
000022  3118              ADDS     r1,r1,#0x18
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       vListInsert
;;;2985   
;;;2986   	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
00002a  2101              MOVS     r1,#1
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;2987   }
000032  bd70              POP      {r4-r6,pc}
;;;2988   /*-----------------------------------------------------------*/
                          ENDP

                  |L32.52|
                          DCD      pxCurrentTCB

                          AREA ||i.vTaskPlaceOnEventListRestricted||, CODE, READONLY, ALIGN=2

                  vTaskPlaceOnEventListRestricted PROC
;;;3015   
;;;3016   	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
000000  b570              PUSH     {r4-r6,lr}
;;;3017   	{
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;3018   		configASSERT( pxEventList );
000008  b955              CBNZ     r5,|L33.32|
00000a  bf00              NOP      
00000c  2040              MOVS     r0,#0x40
00000e  f3808811          MSR      BASEPRI,r0
000012  f3bf8f4f          DSB      
000016  f3bf8f6f          ISB      
00001a  bf00              NOP      
00001c  bf00              NOP      
                  |L33.30|
00001e  e7fe              B        |L33.30|
                  |L33.32|
;;;3019   
;;;3020   		/* This function should not be called by application code hence the
;;;3021   		'Restricted' in its name.  It is not part of the public API.  It is
;;;3022   		designed for use by kernel code, and has special calling requirements -
;;;3023   		it should be called with the scheduler suspended. */
;;;3024   
;;;3025   
;;;3026   		/* Place the event list item of the TCB in the appropriate event list.
;;;3027   		In this case it is assume that this is the only task that is going to
;;;3028   		be waiting on this event list, so the faster vListInsertEnd() function
;;;3029   		can be used in place of vListInsert. */
;;;3030   		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
000020  4806              LDR      r0,|L33.60|
000022  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
000024  3118              ADDS     r1,r1,#0x18
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       vListInsertEnd
;;;3031   
;;;3032   		/* If the task should block indefinitely then set the block time to a
;;;3033   		value that will be recognised as an indefinite delay inside the
;;;3034   		prvAddCurrentTaskToDelayedList() function. */
;;;3035   		if( xWaitIndefinitely != pdFALSE )
00002c  b10c              CBZ      r4,|L33.50|
;;;3036   		{
;;;3037   			xTicksToWait = portMAX_DELAY;
00002e  f04f36ff          MOV      r6,#0xffffffff
                  |L33.50|
;;;3038   		}
;;;3039   
;;;3040   		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
;;;3041   		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
000032  4621              MOV      r1,r4
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;3042   	}
00003a  bd70              POP      {r4-r6,pc}
;;;3043   
                          ENDP

                  |L33.60|
                          DCD      pxCurrentTCB

                          AREA ||i.vTaskPlaceOnUnorderedEventList||, CODE, READONLY, ALIGN=2

                  vTaskPlaceOnUnorderedEventList PROC
;;;2989   
;;;2990   void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
000000  b570              PUSH     {r4-r6,lr}
;;;2991   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;2992   	configASSERT( pxEventList );
000008  b954              CBNZ     r4,|L34.32|
00000a  bf00              NOP      
00000c  2040              MOVS     r0,#0x40
00000e  f3808811          MSR      BASEPRI,r0
000012  f3bf8f4f          DSB      
000016  f3bf8f6f          ISB      
00001a  bf00              NOP      
00001c  bf00              NOP      
                  |L34.30|
00001e  e7fe              B        |L34.30|
                  |L34.32|
;;;2993   
;;;2994   	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
;;;2995   	the event groups implementation. */
;;;2996   	configASSERT( uxSchedulerSuspended != 0 );
000020  4810              LDR      r0,|L34.100|
000022  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000024  b108              CBZ      r0,|L34.42|
000026  2001              MOVS     r0,#1
000028  e000              B        |L34.44|
                  |L34.42|
00002a  2000              MOVS     r0,#0
                  |L34.44|
00002c  b950              CBNZ     r0,|L34.68|
00002e  bf00              NOP      
000030  2040              MOVS     r0,#0x40
000032  f3808811          MSR      BASEPRI,r0
000036  f3bf8f4f          DSB      
00003a  f3bf8f6f          ISB      
00003e  bf00              NOP      
000040  bf00              NOP      
                  |L34.66|
000042  e7fe              B        |L34.66|
                  |L34.68|
;;;2997   
;;;2998   	/* Store the item value in the event list item.  It is safe to access the
;;;2999   	event list item here as interrupts won't access the event list item of a
;;;3000   	task that is not in the Blocked state. */
;;;3001   	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
000044  f0454000          ORR      r0,r5,#0x80000000
000048  4907              LDR      r1,|L34.104|
00004a  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
00004c  6188              STR      r0,[r1,#0x18]
;;;3002   
;;;3003   	/* Place the event list item of the TCB at the end of the appropriate event
;;;3004   	list.  It is safe to access the event list here because it is part of an
;;;3005   	event group implementation - and interrupts don't access event groups
;;;3006   	directly (instead they access them indirectly by pending function calls to
;;;3007   	the task level). */
;;;3008   	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
00004e  4806              LDR      r0,|L34.104|
000050  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
000052  3118              ADDS     r1,r1,#0x18
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       vListInsertEnd
;;;3009   
;;;3010   	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
00005a  2101              MOVS     r1,#1
00005c  4630              MOV      r0,r6
00005e  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;3011   }
000062  bd70              POP      {r4-r6,pc}
;;;3012   /*-----------------------------------------------------------*/
                          ENDP

                  |L34.100|
                          DCD      uxSchedulerSuspended
                  |L34.104|
                          DCD      pxCurrentTCB

                          AREA ||i.vTaskPriorityDisinheritAfterTimeout||, CODE, READONLY, ALIGN=2

                  vTaskPriorityDisinheritAfterTimeout PROC
;;;4030   
;;;4031   	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;4032   	{
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;4033   	TCB_t * const pxTCB = pxMutexHolder;
000008  4634              MOV      r4,r6
;;;4034   	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
;;;4035   	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
00000a  f04f0901          MOV      r9,#1
;;;4036   
;;;4037   		if( pxMutexHolder != NULL )
00000e  2e00              CMP      r6,#0
000010  d067              BEQ      |L35.226|
;;;4038   		{
;;;4039   			/* If pxMutexHolder is not NULL then the holder must hold at least
;;;4040   			one mutex. */
;;;4041   			configASSERT( pxTCB->uxMutexesHeld );
000012  6ce0              LDR      r0,[r4,#0x4c]
000014  b950              CBNZ     r0,|L35.44|
000016  bf00              NOP      
000018  2040              MOVS     r0,#0x40
00001a  f3808811          MSR      BASEPRI,r0
00001e  f3bf8f4f          DSB      
000022  f3bf8f6f          ISB      
000026  bf00              NOP      
000028  bf00              NOP      
                  |L35.42|
00002a  e7fe              B        |L35.42|
                  |L35.44|
;;;4042   
;;;4043   			/* Determine the priority to which the priority of the task that
;;;4044   			holds the mutex should be set.  This will be the greater of the
;;;4045   			holding task's base priority and the priority of the highest
;;;4046   			priority task that is waiting to obtain the mutex. */
;;;4047   			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
00002c  6ca0              LDR      r0,[r4,#0x48]
00002e  42b8              CMP      r0,r7
000030  d201              BCS      |L35.54|
;;;4048   			{
;;;4049   				uxPriorityToUse = uxHighestPriorityWaitingTask;
000032  463d              MOV      r5,r7
000034  e000              B        |L35.56|
                  |L35.54|
;;;4050   			}
;;;4051   			else
;;;4052   			{
;;;4053   				uxPriorityToUse = pxTCB->uxBasePriority;
000036  6ca5              LDR      r5,[r4,#0x48]
                  |L35.56|
;;;4054   			}
;;;4055   
;;;4056   			/* Does the priority need to change? */
;;;4057   			if( pxTCB->uxPriority != uxPriorityToUse )
000038  6ae0              LDR      r0,[r4,#0x2c]
00003a  42a8              CMP      r0,r5
00003c  d051              BEQ      |L35.226|
;;;4058   			{
;;;4059   				/* Only disinherit if no other mutexes are held.  This is a
;;;4060   				simplification in the priority inheritance implementation.  If
;;;4061   				the task that holds the mutex is also holding other mutexes then
;;;4062   				the other mutexes may have caused the priority inheritance. */
;;;4063   				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
00003e  6ce0              LDR      r0,[r4,#0x4c]
000040  2801              CMP      r0,#1
000042  d14e              BNE      |L35.226|
;;;4064   				{
;;;4065   					/* If a task has timed out because it already holds the
;;;4066   					mutex it was trying to obtain then it cannot of inherited
;;;4067   					its own priority. */
;;;4068   					configASSERT( pxTCB != pxCurrentTCB );
000044  4828              LDR      r0,|L35.232|
000046  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000048  4284              CMP      r4,r0
00004a  d001              BEQ      |L35.80|
00004c  2001              MOVS     r0,#1
00004e  e000              B        |L35.82|
                  |L35.80|
000050  2000              MOVS     r0,#0
                  |L35.82|
000052  b950              CBNZ     r0,|L35.106|
000054  bf00              NOP      
000056  2040              MOVS     r0,#0x40
000058  f3808811          MSR      BASEPRI,r0
00005c  f3bf8f4f          DSB      
000060  f3bf8f6f          ISB      
000064  bf00              NOP      
000066  bf00              NOP      
                  |L35.104|
000068  e7fe              B        |L35.104|
                  |L35.106|
;;;4069   
;;;4070   					/* Disinherit the priority, remembering the previous
;;;4071   					priority to facilitate determining the subject task's
;;;4072   					state. */
;;;4073   					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
;;;4074   					uxPriorityUsedOnEntry = pxTCB->uxPriority;
00006a  f8d4802c          LDR      r8,[r4,#0x2c]
;;;4075   					pxTCB->uxPriority = uxPriorityToUse;
00006e  62e5              STR      r5,[r4,#0x2c]
;;;4076   
;;;4077   					/* Only reset the event list item value if the value is not
;;;4078   					being used for anything else. */
;;;4079   					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
000070  69a0              LDR      r0,[r4,#0x18]
000072  f0004000          AND      r0,r0,#0x80000000
000076  b910              CBNZ     r0,|L35.126|
;;;4080   					{
;;;4081   						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000078  f1c50005          RSB      r0,r5,#5
00007c  61a0              STR      r0,[r4,#0x18]
                  |L35.126|
;;;4082   					}
;;;4083   					else
;;;4084   					{
;;;4085   						mtCOVERAGE_TEST_MARKER();
;;;4086   					}
;;;4087   
;;;4088   					/* If the running task is not the task that holds the mutex
;;;4089   					then the task that holds the mutex could be in either the
;;;4090   					Ready, Blocked or Suspended states.  Only remove the task
;;;4091   					from its current state list if it is in the Ready state as
;;;4092   					the task's priority is going to change and there is one
;;;4093   					Ready list per priority. */
;;;4094   					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
00007e  eb080188          ADD      r1,r8,r8,LSL #2
000082  4a1a              LDR      r2,|L35.236|
000084  eb020181          ADD      r1,r2,r1,LSL #2
000088  6960              LDR      r0,[r4,#0x14]
00008a  4288              CMP      r0,r1
00008c  d101              BNE      |L35.146|
00008e  2001              MOVS     r0,#1
000090  e000              B        |L35.148|
                  |L35.146|
000092  2000              MOVS     r0,#0
                  |L35.148|
000094  b328              CBZ      r0,|L35.226|
;;;4095   					{
;;;4096   						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
000096  1d20              ADDS     r0,r4,#4
000098  f7fffffe          BL       uxListRemove
00009c  b978              CBNZ     r0,|L35.190|
;;;4097   						{
;;;4098   							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
00009e  6ae0              LDR      r0,[r4,#0x2c]
0000a0  eb000080          ADD      r0,r0,r0,LSL #2
0000a4  4911              LDR      r1,|L35.236|
0000a6  f8510020          LDR      r0,[r1,r0,LSL #2]
0000aa  b940              CBNZ     r0,|L35.190|
0000ac  f894102c          LDRB     r1,[r4,#0x2c]
0000b0  2001              MOVS     r0,#1
0000b2  4088              LSLS     r0,r0,r1
0000b4  490e              LDR      r1,|L35.240|
0000b6  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
0000b8  4381              BICS     r1,r1,r0
0000ba  480d              LDR      r0,|L35.240|
0000bc  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L35.190|
;;;4099   						}
;;;4100   						else
;;;4101   						{
;;;4102   							mtCOVERAGE_TEST_MARKER();
;;;4103   						}
;;;4104   
;;;4105   						prvAddTaskToReadyList( pxTCB );
0000be  f894102c          LDRB     r1,[r4,#0x2c]
0000c2  2001              MOVS     r0,#1
0000c4  4088              LSLS     r0,r0,r1
0000c6  490a              LDR      r1,|L35.240|
0000c8  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
0000ca  4308              ORRS     r0,r0,r1
0000cc  4908              LDR      r1,|L35.240|
0000ce  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
0000d0  6ae1              LDR      r1,[r4,#0x2c]
0000d2  eb010181          ADD      r1,r1,r1,LSL #2
0000d6  4a05              LDR      r2,|L35.236|
0000d8  eb020081          ADD      r0,r2,r1,LSL #2
0000dc  1d21              ADDS     r1,r4,#4
0000de  f7fffffe          BL       vListInsertEnd
                  |L35.226|
;;;4106   					}
;;;4107   					else
;;;4108   					{
;;;4109   						mtCOVERAGE_TEST_MARKER();
;;;4110   					}
;;;4111   				}
;;;4112   				else
;;;4113   				{
;;;4114   					mtCOVERAGE_TEST_MARKER();
;;;4115   				}
;;;4116   			}
;;;4117   			else
;;;4118   			{
;;;4119   				mtCOVERAGE_TEST_MARKER();
;;;4120   			}
;;;4121   		}
;;;4122   		else
;;;4123   		{
;;;4124   			mtCOVERAGE_TEST_MARKER();
;;;4125   		}
;;;4126   	}
0000e2  e8bd87f0          POP      {r4-r10,pc}
;;;4127   
                          ENDP

0000e6  0000              DCW      0x0000
                  |L35.232|
                          DCD      pxCurrentTCB
                  |L35.236|
                          DCD      pxReadyTasksLists
                  |L35.240|
                          DCD      uxTopReadyPriority

                          AREA ||i.vTaskPrioritySet||, CODE, READONLY, ALIGN=2

                  vTaskPrioritySet PROC
;;;1503   
;;;1504   	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1505   	{
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
;;;1506   	TCB_t *pxTCB;
;;;1507   	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
;;;1508   	BaseType_t xYieldRequired = pdFALSE;
000008  f04f0900          MOV      r9,#0
;;;1509   
;;;1510   		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
00000c  2d05              CMP      r5,#5
00000e  d201              BCS      |L36.20|
000010  2001              MOVS     r0,#1
000012  e000              B        |L36.22|
                  |L36.20|
000014  2000              MOVS     r0,#0
                  |L36.22|
000016  b950              CBNZ     r0,|L36.46|
000018  bf00              NOP      
00001a  2040              MOVS     r0,#0x40
00001c  f3808811          MSR      BASEPRI,r0
000020  f3bf8f4f          DSB      
000024  f3bf8f6f          ISB      
000028  bf00              NOP      
00002a  bf00              NOP      
                  |L36.44|
00002c  e7fe              B        |L36.44|
                  |L36.46|
;;;1511   
;;;1512   		/* Ensure the new priority is valid. */
;;;1513   		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
00002e  2d05              CMP      r5,#5
000030  d300              BCC      |L36.52|
;;;1514   		{
;;;1515   			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
000032  2504              MOVS     r5,#4
                  |L36.52|
;;;1516   		}
;;;1517   		else
;;;1518   		{
;;;1519   			mtCOVERAGE_TEST_MARKER();
;;;1520   		}
;;;1521   
;;;1522   		taskENTER_CRITICAL();
000034  f7fffffe          BL       vPortEnterCritical
;;;1523   		{
;;;1524   			/* If null is passed in here then it is the priority of the calling
;;;1525   			task that is being changed. */
;;;1526   			pxTCB = prvGetTCBFromHandle( xTask );
000038  f1b80f00          CMP      r8,#0
00003c  d102              BNE      |L36.68|
00003e  4831              LDR      r0,|L36.260|
000040  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000042  e000              B        |L36.70|
                  |L36.68|
000044  4640              MOV      r0,r8
                  |L36.70|
000046  4604              MOV      r4,r0
;;;1527   
;;;1528   			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
;;;1529   
;;;1530   			#if ( configUSE_MUTEXES == 1 )
;;;1531   			{
;;;1532   				uxCurrentBasePriority = pxTCB->uxBasePriority;
000048  6ca6              LDR      r6,[r4,#0x48]
;;;1533   			}
;;;1534   			#else
;;;1535   			{
;;;1536   				uxCurrentBasePriority = pxTCB->uxPriority;
;;;1537   			}
;;;1538   			#endif
;;;1539   
;;;1540   			if( uxCurrentBasePriority != uxNewPriority )
00004a  42ae              CMP      r6,r5
00004c  d056              BEQ      |L36.252|
;;;1541   			{
;;;1542   				/* The priority change may have readied a task of higher
;;;1543   				priority than the calling task. */
;;;1544   				if( uxNewPriority > uxCurrentBasePriority )
00004e  42b5              CMP      r5,r6
000050  d90b              BLS      |L36.106|
;;;1545   				{
;;;1546   					if( pxTCB != pxCurrentTCB )
000052  482c              LDR      r0,|L36.260|
000054  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000056  4284              CMP      r4,r0
000058  d00d              BEQ      |L36.118|
;;;1547   					{
;;;1548   						/* The priority of a task other than the currently
;;;1549   						running task is being raised.  Is the priority being
;;;1550   						raised above that of the running task? */
;;;1551   						if( uxNewPriority >= pxCurrentTCB->uxPriority )
00005a  482a              LDR      r0,|L36.260|
00005c  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00005e  6ac0              LDR      r0,[r0,#0x2c]
000060  42a8              CMP      r0,r5
000062  d808              BHI      |L36.118|
;;;1552   						{
;;;1553   							xYieldRequired = pdTRUE;
000064  f04f0901          MOV      r9,#1
000068  e005              B        |L36.118|
                  |L36.106|
;;;1554   						}
;;;1555   						else
;;;1556   						{
;;;1557   							mtCOVERAGE_TEST_MARKER();
;;;1558   						}
;;;1559   					}
;;;1560   					else
;;;1561   					{
;;;1562   						/* The priority of the running task is being raised,
;;;1563   						but the running task must already be the highest
;;;1564   						priority task able to run so no yield is required. */
;;;1565   					}
;;;1566   				}
;;;1567   				else if( pxTCB == pxCurrentTCB )
00006a  4826              LDR      r0,|L36.260|
00006c  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00006e  4284              CMP      r4,r0
000070  d101              BNE      |L36.118|
;;;1568   				{
;;;1569   					/* Setting the priority of the running task down means
;;;1570   					there may now be another task of higher priority that
;;;1571   					is ready to execute. */
;;;1572   					xYieldRequired = pdTRUE;
000072  f04f0901          MOV      r9,#1
                  |L36.118|
;;;1573   				}
;;;1574   				else
;;;1575   				{
;;;1576   					/* Setting the priority of any other task down does not
;;;1577   					require a yield as the running task must be above the
;;;1578   					new priority of the task being modified. */
;;;1579   				}
;;;1580   
;;;1581   				/* Remember the ready list the task might be referenced from
;;;1582   				before its uxPriority member is changed so the
;;;1583   				taskRESET_READY_PRIORITY() macro can function correctly. */
;;;1584   				uxPriorityUsedOnEntry = pxTCB->uxPriority;
000076  6ae7              LDR      r7,[r4,#0x2c]
;;;1585   
;;;1586   				#if ( configUSE_MUTEXES == 1 )
;;;1587   				{
;;;1588   					/* Only change the priority being used if the task is not
;;;1589   					currently using an inherited priority. */
;;;1590   					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
000078  6ae1              LDR      r1,[r4,#0x2c]
00007a  6ca0              LDR      r0,[r4,#0x48]
00007c  4288              CMP      r0,r1
00007e  d100              BNE      |L36.130|
;;;1591   					{
;;;1592   						pxTCB->uxPriority = uxNewPriority;
000080  62e5              STR      r5,[r4,#0x2c]
                  |L36.130|
;;;1593   					}
;;;1594   					else
;;;1595   					{
;;;1596   						mtCOVERAGE_TEST_MARKER();
;;;1597   					}
;;;1598   
;;;1599   					/* The base priority gets set whatever. */
;;;1600   					pxTCB->uxBasePriority = uxNewPriority;
000082  64a5              STR      r5,[r4,#0x48]
;;;1601   				}
;;;1602   				#else
;;;1603   				{
;;;1604   					pxTCB->uxPriority = uxNewPriority;
;;;1605   				}
;;;1606   				#endif
;;;1607   
;;;1608   				/* Only reset the event list item value if the value is not
;;;1609   				being used for anything else. */
;;;1610   				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
000084  69a0              LDR      r0,[r4,#0x18]
000086  f0004000          AND      r0,r0,#0x80000000
00008a  b910              CBNZ     r0,|L36.146|
;;;1611   				{
;;;1612   					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
00008c  f1c50005          RSB      r0,r5,#5
000090  61a0              STR      r0,[r4,#0x18]
                  |L36.146|
;;;1613   				}
;;;1614   				else
;;;1615   				{
;;;1616   					mtCOVERAGE_TEST_MARKER();
;;;1617   				}
;;;1618   
;;;1619   				/* If the task is in the blocked or suspended list we need do
;;;1620   				nothing more than change its priority variable. However, if
;;;1621   				the task is in a ready list it needs to be removed and placed
;;;1622   				in the list appropriate to its new priority. */
;;;1623   				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
000092  eb070187          ADD      r1,r7,r7,LSL #2
000096  4a1c              LDR      r2,|L36.264|
000098  eb020181          ADD      r1,r2,r1,LSL #2
00009c  6960              LDR      r0,[r4,#0x14]
00009e  4288              CMP      r0,r1
0000a0  d101              BNE      |L36.166|
0000a2  2001              MOVS     r0,#1
0000a4  e000              B        |L36.168|
                  |L36.166|
0000a6  2000              MOVS     r0,#0
                  |L36.168|
0000a8  b1e0              CBZ      r0,|L36.228|
;;;1624   				{
;;;1625   					/* The task is currently in its ready list - remove before
;;;1626   					adding it to it's new ready list.  As we are in a critical
;;;1627   					section we can do this even if the scheduler is suspended. */
;;;1628   					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
0000aa  1d20              ADDS     r0,r4,#4
0000ac  f7fffffe          BL       uxListRemove
0000b0  b930              CBNZ     r0,|L36.192|
;;;1629   					{
;;;1630   						/* It is known that the task is in its ready list so
;;;1631   						there is no need to check again and the port level
;;;1632   						reset macro can be called directly. */
;;;1633   						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
0000b2  2001              MOVS     r0,#1
0000b4  40b8              LSLS     r0,r0,r7
0000b6  4915              LDR      r1,|L36.268|
0000b8  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
0000ba  4381              BICS     r1,r1,r0
0000bc  4813              LDR      r0,|L36.268|
0000be  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L36.192|
;;;1634   					}
;;;1635   					else
;;;1636   					{
;;;1637   						mtCOVERAGE_TEST_MARKER();
;;;1638   					}
;;;1639   					prvAddTaskToReadyList( pxTCB );
0000c0  f894102c          LDRB     r1,[r4,#0x2c]
0000c4  2001              MOVS     r0,#1
0000c6  4088              LSLS     r0,r0,r1
0000c8  4910              LDR      r1,|L36.268|
0000ca  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
0000cc  4308              ORRS     r0,r0,r1
0000ce  490f              LDR      r1,|L36.268|
0000d0  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
0000d2  6ae1              LDR      r1,[r4,#0x2c]
0000d4  eb010181          ADD      r1,r1,r1,LSL #2
0000d8  4a0b              LDR      r2,|L36.264|
0000da  eb020081          ADD      r0,r2,r1,LSL #2
0000de  1d21              ADDS     r1,r4,#4
0000e0  f7fffffe          BL       vListInsertEnd
                  |L36.228|
;;;1640   				}
;;;1641   				else
;;;1642   				{
;;;1643   					mtCOVERAGE_TEST_MARKER();
;;;1644   				}
;;;1645   
;;;1646   				if( xYieldRequired != pdFALSE )
0000e4  f1b90f00          CMP      r9,#0
0000e8  d007              BEQ      |L36.250|
;;;1647   				{
;;;1648   					taskYIELD_IF_USING_PREEMPTION();
0000ea  f04f5080          MOV      r0,#0x10000000
0000ee  4908              LDR      r1,|L36.272|
0000f0  6008              STR      r0,[r1,#0]
0000f2  f3bf8f4f          DSB      
0000f6  f3bf8f6f          ISB      
                  |L36.250|
;;;1649   				}
;;;1650   				else
;;;1651   				{
;;;1652   					mtCOVERAGE_TEST_MARKER();
;;;1653   				}
;;;1654   
;;;1655   				/* Remove compiler warning about unused variables when the port
;;;1656   				optimised task selection is not being used. */
;;;1657   				( void ) uxPriorityUsedOnEntry;
0000fa  bf00              NOP      
                  |L36.252|
;;;1658   			}
;;;1659   		}
;;;1660   		taskEXIT_CRITICAL();
0000fc  f7fffffe          BL       vPortExitCritical
;;;1661   	}
000100  e8bd87f0          POP      {r4-r10,pc}
;;;1662   
                          ENDP

                  |L36.260|
                          DCD      pxCurrentTCB
                  |L36.264|
                          DCD      pxReadyTasksLists
                  |L36.268|
                          DCD      uxTopReadyPriority
                  |L36.272|
                          DCD      0xe000ed04

                          AREA ||i.vTaskRemoveFromUnorderedEventList||, CODE, READONLY, ALIGN=2

                  vTaskRemoveFromUnorderedEventList PROC
;;;3114   
;;;3115   void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
000000  b570              PUSH     {r4-r6,lr}
;;;3116   {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;3117   TCB_t *pxUnblockedTCB;
;;;3118   
;;;3119   	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
;;;3120   	the event flags implementation. */
;;;3121   	configASSERT( uxSchedulerSuspended != pdFALSE );
000006  4822              LDR      r0,|L37.144|
000008  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00000a  b108              CBZ      r0,|L37.16|
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L37.18|
                  |L37.16|
000010  2000              MOVS     r0,#0
                  |L37.18|
000012  b950              CBNZ     r0,|L37.42|
000014  bf00              NOP      
000016  2040              MOVS     r0,#0x40
000018  f3808811          MSR      BASEPRI,r0
00001c  f3bf8f4f          DSB      
000020  f3bf8f6f          ISB      
000024  bf00              NOP      
000026  bf00              NOP      
                  |L37.40|
000028  e7fe              B        |L37.40|
                  |L37.42|
;;;3122   
;;;3123   	/* Store the new item value in the event list. */
;;;3124   	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
00002a  f0464000          ORR      r0,r6,#0x80000000
00002e  6028              STR      r0,[r5,#0]
;;;3125   
;;;3126   	/* Remove the event list form the event flag.  Interrupts do not access
;;;3127   	event flags. */
;;;3128   	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
000030  68ec              LDR      r4,[r5,#0xc]
;;;3129   	configASSERT( pxUnblockedTCB );
000032  b954              CBNZ     r4,|L37.74|
000034  bf00              NOP      
000036  2040              MOVS     r0,#0x40
000038  f3808811          MSR      BASEPRI,r0
00003c  f3bf8f4f          DSB      
000040  f3bf8f6f          ISB      
000044  bf00              NOP      
000046  bf00              NOP      
                  |L37.72|
000048  e7fe              B        |L37.72|
                  |L37.74|
;;;3130   	( void ) uxListRemove( pxEventListItem );
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       uxListRemove
;;;3131   
;;;3132   	/* Remove the task from the delayed list and add it to the ready list.  The
;;;3133   	scheduler is suspended so interrupts will not be accessing the ready
;;;3134   	lists. */
;;;3135   	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
000050  1d20              ADDS     r0,r4,#4
000052  f7fffffe          BL       uxListRemove
;;;3136   	prvAddTaskToReadyList( pxUnblockedTCB );
000056  f894102c          LDRB     r1,[r4,#0x2c]
00005a  2001              MOVS     r0,#1
00005c  4088              LSLS     r0,r0,r1
00005e  490d              LDR      r1,|L37.148|
000060  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000062  4308              ORRS     r0,r0,r1
000064  490b              LDR      r1,|L37.148|
000066  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000068  6ae1              LDR      r1,[r4,#0x2c]
00006a  eb010181          ADD      r1,r1,r1,LSL #2
00006e  4a0a              LDR      r2,|L37.152|
000070  eb020081          ADD      r0,r2,r1,LSL #2
000074  1d21              ADDS     r1,r4,#4
000076  f7fffffe          BL       vListInsertEnd
;;;3137   
;;;3138   	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
00007a  4908              LDR      r1,|L37.156|
00007c  6ae0              LDR      r0,[r4,#0x2c]
00007e  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000080  6ac9              LDR      r1,[r1,#0x2c]
000082  4288              CMP      r0,r1
000084  d902              BLS      |L37.140|
;;;3139   	{
;;;3140   		/* The unblocked task has a priority above that of the calling task, so
;;;3141   		a context switch is required.  This function is called with the
;;;3142   		scheduler suspended so xYieldPending is set so the context switch
;;;3143   		occurs immediately that the scheduler is resumed (unsuspended). */
;;;3144   		xYieldPending = pdTRUE;
000086  2001              MOVS     r0,#1
000088  4905              LDR      r1,|L37.160|
00008a  6008              STR      r0,[r1,#0]  ; xYieldPending
                  |L37.140|
;;;3145   	}
;;;3146   }
00008c  bd70              POP      {r4-r6,pc}
;;;3147   /*-----------------------------------------------------------*/
                          ENDP

00008e  0000              DCW      0x0000
                  |L37.144|
                          DCD      uxSchedulerSuspended
                  |L37.148|
                          DCD      uxTopReadyPriority
                  |L37.152|
                          DCD      pxReadyTasksLists
                  |L37.156|
                          DCD      pxCurrentTCB
                  |L37.160|
                          DCD      xYieldPending

                          AREA ||i.vTaskResume||, CODE, READONLY, ALIGN=2

                  vTaskResume PROC
;;;1814   
;;;1815   	void vTaskResume( TaskHandle_t xTaskToResume )
000000  b570              PUSH     {r4-r6,lr}
;;;1816   	{
000002  4605              MOV      r5,r0
;;;1817   	TCB_t * const pxTCB = xTaskToResume;
000004  462c              MOV      r4,r5
;;;1818   
;;;1819   		/* It does not make sense to resume the calling task. */
;;;1820   		configASSERT( xTaskToResume );
000006  b955              CBNZ     r5,|L38.30|
000008  bf00              NOP      
00000a  2040              MOVS     r0,#0x40
00000c  f3808811          MSR      BASEPRI,r0
000010  f3bf8f4f          DSB      
000014  f3bf8f6f          ISB      
000018  bf00              NOP      
00001a  bf00              NOP      
                  |L38.28|
00001c  e7fe              B        |L38.28|
                  |L38.30|
;;;1821   
;;;1822   		/* The parameter cannot be NULL as it is impossible to resume the
;;;1823   		currently executing task. */
;;;1824   		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
00001e  4818              LDR      r0,|L38.128|
000020  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000022  4284              CMP      r4,r0
000024  d02b              BEQ      |L38.126|
000026  b354              CBZ      r4,|L38.126|
;;;1825   		{
;;;1826   			taskENTER_CRITICAL();
000028  f7fffffe          BL       vPortEnterCritical
;;;1827   			{
;;;1828   				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       prvTaskIsTaskSuspended
000032  b310              CBZ      r0,|L38.122|
;;;1829   				{
;;;1830   					traceTASK_RESUME( pxTCB );
;;;1831   
;;;1832   					/* The ready list can be accessed even if the scheduler is
;;;1833   					suspended because this is inside a critical section. */
;;;1834   					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
000034  1d20              ADDS     r0,r4,#4
000036  f7fffffe          BL       uxListRemove
;;;1835   					prvAddTaskToReadyList( pxTCB );
00003a  f894102c          LDRB     r1,[r4,#0x2c]
00003e  2001              MOVS     r0,#1
000040  4088              LSLS     r0,r0,r1
000042  4910              LDR      r1,|L38.132|
000044  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000046  4308              ORRS     r0,r0,r1
000048  490e              LDR      r1,|L38.132|
00004a  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
00004c  6ae1              LDR      r1,[r4,#0x2c]
00004e  eb010181          ADD      r1,r1,r1,LSL #2
000052  4a0d              LDR      r2,|L38.136|
000054  eb020081          ADD      r0,r2,r1,LSL #2
000058  1d21              ADDS     r1,r4,#4
00005a  f7fffffe          BL       vListInsertEnd
;;;1836   
;;;1837   					/* A higher priority task may have just been resumed. */
;;;1838   					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
00005e  4908              LDR      r1,|L38.128|
000060  6ae0              LDR      r0,[r4,#0x2c]
000062  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000064  6ac9              LDR      r1,[r1,#0x2c]
000066  4288              CMP      r0,r1
000068  d307              BCC      |L38.122|
;;;1839   					{
;;;1840   						/* This yield may not cause the task just resumed to run,
;;;1841   						but will leave the lists in the correct state for the
;;;1842   						next yield. */
;;;1843   						taskYIELD_IF_USING_PREEMPTION();
00006a  f04f5080          MOV      r0,#0x10000000
00006e  4907              LDR      r1,|L38.140|
000070  6008              STR      r0,[r1,#0]
000072  f3bf8f4f          DSB      
000076  f3bf8f6f          ISB      
                  |L38.122|
;;;1844   					}
;;;1845   					else
;;;1846   					{
;;;1847   						mtCOVERAGE_TEST_MARKER();
;;;1848   					}
;;;1849   				}
;;;1850   				else
;;;1851   				{
;;;1852   					mtCOVERAGE_TEST_MARKER();
;;;1853   				}
;;;1854   			}
;;;1855   			taskEXIT_CRITICAL();
00007a  f7fffffe          BL       vPortExitCritical
                  |L38.126|
;;;1856   		}
;;;1857   		else
;;;1858   		{
;;;1859   			mtCOVERAGE_TEST_MARKER();
;;;1860   		}
;;;1861   	}
00007e  bd70              POP      {r4-r6,pc}
;;;1862   
                          ENDP

                  |L38.128|
                          DCD      pxCurrentTCB
                  |L38.132|
                          DCD      uxTopReadyPriority
                  |L38.136|
                          DCD      pxReadyTasksLists
                  |L38.140|
                          DCD      0xe000ed04

                          AREA ||i.vTaskSetTaskNumber||, CODE, READONLY, ALIGN=1

                  vTaskSetTaskNumber PROC
;;;3262   
;;;3263   	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
000000  b108              CBZ      r0,|L39.6|
;;;3264   	{
;;;3265   	TCB_t * pxTCB;
;;;3266   
;;;3267   		if( xTask != NULL )
;;;3268   		{
;;;3269   			pxTCB = xTask;
000002  4602              MOV      r2,r0
;;;3270   			pxTCB->uxTaskNumber = uxHandle;
000004  6451              STR      r1,[r2,#0x44]
                  |L39.6|
;;;3271   		}
;;;3272   	}
000006  4770              BX       lr
;;;3273   
                          ENDP


                          AREA ||i.vTaskSetTimeOutState||, CODE, READONLY, ALIGN=2

                  vTaskSetTimeOutState PROC
;;;3148   
;;;3149   void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
000000  b510              PUSH     {r4,lr}
;;;3150   {
000002  4604              MOV      r4,r0
;;;3151   	configASSERT( pxTimeOut );
000004  b954              CBNZ     r4,|L40.28|
000006  bf00              NOP      
000008  2040              MOVS     r0,#0x40
00000a  f3808811          MSR      BASEPRI,r0
00000e  f3bf8f4f          DSB      
000012  f3bf8f6f          ISB      
000016  bf00              NOP      
000018  bf00              NOP      
                  |L40.26|
00001a  e7fe              B        |L40.26|
                  |L40.28|
;;;3152   	taskENTER_CRITICAL();
00001c  f7fffffe          BL       vPortEnterCritical
;;;3153   	{
;;;3154   		pxTimeOut->xOverflowCount = xNumOfOverflows;
000020  4804              LDR      r0,|L40.52|
000022  6800              LDR      r0,[r0,#0]  ; xNumOfOverflows
000024  6020              STR      r0,[r4,#0]
;;;3155   		pxTimeOut->xTimeOnEntering = xTickCount;
000026  4804              LDR      r0,|L40.56|
000028  6800              LDR      r0,[r0,#0]  ; xTickCount
00002a  6060              STR      r0,[r4,#4]
;;;3156   	}
;;;3157   	taskEXIT_CRITICAL();
00002c  f7fffffe          BL       vPortExitCritical
;;;3158   }
000030  bd10              POP      {r4,pc}
;;;3159   /*-----------------------------------------------------------*/
                          ENDP

000032  0000              DCW      0x0000
                  |L40.52|
                          DCD      xNumOfOverflows
                  |L40.56|
                          DCD      xTickCount

                          AREA ||i.vTaskStartScheduler||, CODE, READONLY, ALIGN=2

                  vTaskStartScheduler PROC
;;;1938   
;;;1939   void vTaskStartScheduler( void )
000000  b51c              PUSH     {r2-r4,lr}
;;;1940   {
;;;1941   BaseType_t xReturn;
;;;1942   
;;;1943   	/* Add the idle task at the lowest priority. */
;;;1944   	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
;;;1945   	{
;;;1946   		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
;;;1947   		StackType_t *pxIdleTaskStackBuffer = NULL;
;;;1948   		uint32_t ulIdleTaskStackSize;
;;;1949   
;;;1950   		/* The Idle task is created using user provided RAM - obtain the
;;;1951   		address of the RAM then create the idle task. */
;;;1952   		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
;;;1953   		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
;;;1954   												configIDLE_TASK_NAME,
;;;1955   												ulIdleTaskStackSize,
;;;1956   												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
;;;1957   												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
;;;1958   												pxIdleTaskStackBuffer,
;;;1959   												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
;;;1960   
;;;1961   		if( xIdleTaskHandle != NULL )
;;;1962   		{
;;;1963   			xReturn = pdPASS;
;;;1964   		}
;;;1965   		else
;;;1966   		{
;;;1967   			xReturn = pdFAIL;
;;;1968   		}
;;;1969   	}
;;;1970   	#else
;;;1971   	{
;;;1972   		/* The Idle task is being created using dynamically allocated RAM. */
;;;1973   		xReturn = xTaskCreate(	prvIdleTask,
000002  481d              LDR      r0,|L41.120|
000004  2100              MOVS     r1,#0
000006  460b              MOV      r3,r1
000008  2280              MOVS     r2,#0x80
00000a  e9cd1000          STRD     r1,r0,[sp,#0]
00000e  a11b              ADR      r1,|L41.124|
000010  481c              LDR      r0,|L41.132|
000012  f7fffffe          BL       xTaskCreate
000016  4604              MOV      r4,r0
;;;1974   								configIDLE_TASK_NAME,
;;;1975   								configMINIMAL_STACK_SIZE,
;;;1976   								( void * ) NULL,
;;;1977   								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
;;;1978   								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
;;;1979   	}
;;;1980   	#endif /* configSUPPORT_STATIC_ALLOCATION */
;;;1981   
;;;1982   	#if ( configUSE_TIMERS == 1 )
;;;1983   	{
;;;1984   		if( xReturn == pdPASS )
000018  2c01              CMP      r4,#1
00001a  d102              BNE      |L41.34|
;;;1985   		{
;;;1986   			xReturn = xTimerCreateTimerTask();
00001c  f7fffffe          BL       xTimerCreateTimerTask
000020  4604              MOV      r4,r0
                  |L41.34|
;;;1987   		}
;;;1988   		else
;;;1989   		{
;;;1990   			mtCOVERAGE_TEST_MARKER();
;;;1991   		}
;;;1992   	}
;;;1993   	#endif /* configUSE_TIMERS */
;;;1994   
;;;1995   	if( xReturn == pdPASS )
000022  2c01              CMP      r4,#1
000024  d115              BNE      |L41.82|
;;;1996   	{
;;;1997   		/* freertos_tasks_c_additions_init() should only be called if the user
;;;1998   		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
;;;1999   		the only macro called by the function. */
;;;2000   		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
;;;2001   		{
;;;2002   			freertos_tasks_c_additions_init();
;;;2003   		}
;;;2004   		#endif
;;;2005   
;;;2006   		/* Interrupts are turned off here, to ensure a tick does not occur
;;;2007   		before or during the call to xPortStartScheduler().  The stacks of
;;;2008   		the created tasks contain a status word with interrupts switched on
;;;2009   		so interrupts will automatically get re-enabled when the first task
;;;2010   		starts to run. */
;;;2011   		portDISABLE_INTERRUPTS();
000026  bf00              NOP      
000028  2040              MOVS     r0,#0x40
00002a  f3808811          MSR      BASEPRI,r0
00002e  f3bf8f4f          DSB      
000032  f3bf8f6f          ISB      
000036  bf00              NOP      
;;;2012   
;;;2013   		#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;2014   		{
;;;2015   			/* Switch Newlib's _impure_ptr variable to point to the _reent
;;;2016   			structure specific to the task that will run first. */
;;;2017   			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
;;;2018   		}
;;;2019   		#endif /* configUSE_NEWLIB_REENTRANT */
;;;2020   
;;;2021   		xNextTaskUnblockTime = portMAX_DELAY;
000038  f04f30ff          MOV      r0,#0xffffffff
00003c  4912              LDR      r1,|L41.136|
00003e  6008              STR      r0,[r1,#0]  ; xNextTaskUnblockTime
;;;2022   		xSchedulerRunning = pdTRUE;
000040  2001              MOVS     r0,#1
000042  4912              LDR      r1,|L41.140|
000044  6008              STR      r0,[r1,#0]  ; xSchedulerRunning
;;;2023   		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
000046  2000              MOVS     r0,#0
000048  4911              LDR      r1,|L41.144|
00004a  6008              STR      r0,[r1,#0]  ; xTickCount
;;;2024   
;;;2025   		/* If configGENERATE_RUN_TIME_STATS is defined then the following
;;;2026   		macro must be defined to configure the timer/counter used to generate
;;;2027   		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
;;;2028   		is set to 0 and the following line fails to build then ensure you do not
;;;2029   		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
;;;2030   		FreeRTOSConfig.h file. */
;;;2031   		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
;;;2032   
;;;2033   		traceTASK_SWITCHED_IN();
;;;2034   
;;;2035   		/* Setting up the timer tick is hardware specific and thus in the
;;;2036   		portable interface. */
;;;2037   		if( xPortStartScheduler() != pdFALSE )
00004c  f7fffffe          BL       xPortStartScheduler
000050  e010              B        |L41.116|
                  |L41.82|
;;;2038   		{
;;;2039   			/* Should not reach here as if the scheduler is running the
;;;2040   			function will not return. */
;;;2041   		}
;;;2042   		else
;;;2043   		{
;;;2044   			/* Should only reach here if a task calls xTaskEndScheduler(). */
;;;2045   		}
;;;2046   	}
;;;2047   	else
;;;2048   	{
;;;2049   		/* This line will only be reached if the kernel could not be started,
;;;2050   		because there was not enough FreeRTOS heap to create the idle task
;;;2051   		or the timer task. */
;;;2052   		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
000052  1c60              ADDS     r0,r4,#1
000054  b108              CBZ      r0,|L41.90|
000056  2001              MOVS     r0,#1
000058  e000              B        |L41.92|
                  |L41.90|
00005a  2000              MOVS     r0,#0
                  |L41.92|
00005c  b950              CBNZ     r0,|L41.116|
00005e  bf00              NOP      
000060  2040              MOVS     r0,#0x40
000062  f3808811          MSR      BASEPRI,r0
000066  f3bf8f4f          DSB      
00006a  f3bf8f6f          ISB      
00006e  bf00              NOP      
000070  bf00              NOP      
                  |L41.114|
000072  e7fe              B        |L41.114|
                  |L41.116|
;;;2053   	}
;;;2054   
;;;2055   	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
;;;2056   	meaning xIdleTaskHandle is not used anywhere else. */
;;;2057   	( void ) xIdleTaskHandle;
;;;2058   }
000074  bd1c              POP      {r2-r4,pc}
;;;2059   /*-----------------------------------------------------------*/
                          ENDP

000076  0000              DCW      0x0000
                  |L41.120|
                          DCD      xIdleTaskHandle
                  |L41.124|
00007c  49444c45          DCB      "IDLE",0
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0
                  |L41.132|
                          DCD      prvIdleTask
                  |L41.136|
                          DCD      xNextTaskUnblockTime
                  |L41.140|
                          DCD      xSchedulerRunning
                  |L41.144|
                          DCD      xTickCount

                          AREA ||i.vTaskSuspend||, CODE, READONLY, ALIGN=2

                  vTaskSuspend PROC
;;;1667   
;;;1668   	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
000000  b570              PUSH     {r4-r6,lr}
;;;1669   	{
000002  4605              MOV      r5,r0
;;;1670   	TCB_t *pxTCB;
;;;1671   
;;;1672   		taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;1673   		{
;;;1674   			/* If null is passed in here then it is the running task that is
;;;1675   			being suspended. */
;;;1676   			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
000008  b915              CBNZ     r5,|L42.16|
00000a  4832              LDR      r0,|L42.212|
00000c  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00000e  e000              B        |L42.18|
                  |L42.16|
000010  4628              MOV      r0,r5
                  |L42.18|
000012  4604              MOV      r4,r0
;;;1677   
;;;1678   			traceTASK_SUSPEND( pxTCB );
;;;1679   
;;;1680   			/* Remove task from the ready/delayed list and place in the
;;;1681   			suspended list. */
;;;1682   			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
000014  1d20              ADDS     r0,r4,#4
000016  f7fffffe          BL       uxListRemove
00001a  b978              CBNZ     r0,|L42.60|
;;;1683   			{
;;;1684   				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
00001c  6ae0              LDR      r0,[r4,#0x2c]
00001e  eb000080          ADD      r0,r0,r0,LSL #2
000022  492d              LDR      r1,|L42.216|
000024  f8510020          LDR      r0,[r1,r0,LSL #2]
000028  b940              CBNZ     r0,|L42.60|
00002a  f894102c          LDRB     r1,[r4,#0x2c]
00002e  2001              MOVS     r0,#1
000030  4088              LSLS     r0,r0,r1
000032  492a              LDR      r1,|L42.220|
000034  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000036  4381              BICS     r1,r1,r0
000038  4828              LDR      r0,|L42.220|
00003a  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L42.60|
;;;1685   			}
;;;1686   			else
;;;1687   			{
;;;1688   				mtCOVERAGE_TEST_MARKER();
;;;1689   			}
;;;1690   
;;;1691   			/* Is the task waiting on an event also? */
;;;1692   			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
00003c  6aa0              LDR      r0,[r4,#0x28]
00003e  b118              CBZ      r0,|L42.72|
;;;1693   			{
;;;1694   				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
000040  f1040018          ADD      r0,r4,#0x18
000044  f7fffffe          BL       uxListRemove
                  |L42.72|
;;;1695   			}
;;;1696   			else
;;;1697   			{
;;;1698   				mtCOVERAGE_TEST_MARKER();
;;;1699   			}
;;;1700   
;;;1701   			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
000048  1d21              ADDS     r1,r4,#4
00004a  4825              LDR      r0,|L42.224|
00004c  f7fffffe          BL       vListInsertEnd
;;;1702   
;;;1703   			#if( configUSE_TASK_NOTIFICATIONS == 1 )
;;;1704   			{
;;;1705   				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
000050  f8940054          LDRB     r0,[r4,#0x54]
000054  2801              CMP      r0,#1
000056  d102              BNE      |L42.94|
;;;1706   				{
;;;1707   					/* The task was blocked to wait for a notification, but is
;;;1708   					now suspended, so no notification was received. */
;;;1709   					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
000058  2000              MOVS     r0,#0
00005a  f8840054          STRB     r0,[r4,#0x54]
                  |L42.94|
;;;1710   				}
;;;1711   			}
;;;1712   			#endif
;;;1713   		}
;;;1714   		taskEXIT_CRITICAL();
00005e  f7fffffe          BL       vPortExitCritical
;;;1715   
;;;1716   		if( xSchedulerRunning != pdFALSE )
000062  4820              LDR      r0,|L42.228|
000064  6800              LDR      r0,[r0,#0]  ; xSchedulerRunning
000066  b128              CBZ      r0,|L42.116|
;;;1717   		{
;;;1718   			/* Reset the next expected unblock time in case it referred to the
;;;1719   			task that is now in the Suspended state. */
;;;1720   			taskENTER_CRITICAL();
000068  f7fffffe          BL       vPortEnterCritical
;;;1721   			{
;;;1722   				prvResetNextTaskUnblockTime();
00006c  f7fffffe          BL       prvResetNextTaskUnblockTime
;;;1723   			}
;;;1724   			taskEXIT_CRITICAL();
000070  f7fffffe          BL       vPortExitCritical
                  |L42.116|
;;;1725   		}
;;;1726   		else
;;;1727   		{
;;;1728   			mtCOVERAGE_TEST_MARKER();
;;;1729   		}
;;;1730   
;;;1731   		if( pxTCB == pxCurrentTCB )
000074  4817              LDR      r0,|L42.212|
000076  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000078  4284              CMP      r4,r0
00007a  d129              BNE      |L42.208|
;;;1732   		{
;;;1733   			if( xSchedulerRunning != pdFALSE )
00007c  4819              LDR      r0,|L42.228|
00007e  6800              LDR      r0,[r0,#0]  ; xSchedulerRunning
000080  b1d0              CBZ      r0,|L42.184|
;;;1734   			{
;;;1735   				/* The current task has just been suspended. */
;;;1736   				configASSERT( uxSchedulerSuspended == 0 );
000082  4819              LDR      r0,|L42.232|
000084  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000086  b908              CBNZ     r0,|L42.140|
000088  2001              MOVS     r0,#1
00008a  e000              B        |L42.142|
                  |L42.140|
00008c  2000              MOVS     r0,#0
                  |L42.142|
00008e  b950              CBNZ     r0,|L42.166|
000090  bf00              NOP      
000092  2040              MOVS     r0,#0x40
000094  f3808811          MSR      BASEPRI,r0
000098  f3bf8f4f          DSB      
00009c  f3bf8f6f          ISB      
0000a0  bf00              NOP      
0000a2  bf00              NOP      
                  |L42.164|
0000a4  e7fe              B        |L42.164|
                  |L42.166|
;;;1737   				portYIELD_WITHIN_API();
0000a6  f04f5080          MOV      r0,#0x10000000
0000aa  4910              LDR      r1,|L42.236|
0000ac  6008              STR      r0,[r1,#0]
0000ae  f3bf8f4f          DSB      
0000b2  f3bf8f6f          ISB      
0000b6  e00b              B        |L42.208|
                  |L42.184|
;;;1738   			}
;;;1739   			else
;;;1740   			{
;;;1741   				/* The scheduler is not running, but the task that was pointed
;;;1742   				to by pxCurrentTCB has just been suspended and pxCurrentTCB
;;;1743   				must be adjusted to point to a different task. */
;;;1744   				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
0000b8  4809              LDR      r0,|L42.224|
0000ba  6800              LDR      r0,[r0,#0]  ; xSuspendedTaskList
0000bc  490c              LDR      r1,|L42.240|
0000be  6809              LDR      r1,[r1,#0]  ; uxCurrentNumberOfTasks
0000c0  4288              CMP      r0,r1
0000c2  d103              BNE      |L42.204|
;;;1745   				{
;;;1746   					/* No other tasks are ready, so set pxCurrentTCB back to
;;;1747   					NULL so when the next task is created pxCurrentTCB will
;;;1748   					be set to point to it no matter what its relative priority
;;;1749   					is. */
;;;1750   					pxCurrentTCB = NULL;
0000c4  2000              MOVS     r0,#0
0000c6  4903              LDR      r1,|L42.212|
0000c8  6008              STR      r0,[r1,#0]  ; pxCurrentTCB
0000ca  e001              B        |L42.208|
                  |L42.204|
;;;1751   				}
;;;1752   				else
;;;1753   				{
;;;1754   					vTaskSwitchContext();
0000cc  f7fffffe          BL       vTaskSwitchContext
                  |L42.208|
;;;1755   				}
;;;1756   			}
;;;1757   		}
;;;1758   		else
;;;1759   		{
;;;1760   			mtCOVERAGE_TEST_MARKER();
;;;1761   		}
;;;1762   	}
0000d0  bd70              POP      {r4-r6,pc}
;;;1763   
                          ENDP

0000d2  0000              DCW      0x0000
                  |L42.212|
                          DCD      pxCurrentTCB
                  |L42.216|
                          DCD      pxReadyTasksLists
                  |L42.220|
                          DCD      uxTopReadyPriority
                  |L42.224|
                          DCD      xSuspendedTaskList
                  |L42.228|
                          DCD      xSchedulerRunning
                  |L42.232|
                          DCD      uxSchedulerSuspended
                  |L42.236|
                          DCD      0xe000ed04
                  |L42.240|
                          DCD      uxCurrentNumberOfTasks

                          AREA ||i.vTaskSuspendAll||, CODE, READONLY, ALIGN=2

                  vTaskSuspendAll PROC
;;;2071   
;;;2072   void vTaskSuspendAll( void )
000000  4802              LDR      r0,|L43.12|
;;;2073   {
;;;2074   	/* A critical section is not required as the variable is of type
;;;2075   	BaseType_t.  Please read Richard Barry's reply in the following link to a
;;;2076   	post in the FreeRTOS support forum before reporting this as a bug! -
;;;2077   	http://goo.gl/wu4acr */
;;;2078   	++uxSchedulerSuspended;
000002  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000004  1c40              ADDS     r0,r0,#1
000006  4901              LDR      r1,|L43.12|
000008  6008              STR      r0,[r1,#0]  ; uxSchedulerSuspended
;;;2079   }
00000a  4770              BX       lr
;;;2080   /*----------------------------------------------------------*/
                          ENDP

                  |L43.12|
                          DCD      uxSchedulerSuspended

                          AREA ||i.vTaskSwitchContext||, CODE, READONLY, ALIGN=2

                  vTaskSwitchContext PROC
;;;2899   
;;;2900   void vTaskSwitchContext( void )
000000  481d              LDR      r0,|L44.120|
;;;2901   {
;;;2902   	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
000002  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000004  b118              CBZ      r0,|L44.14|
;;;2903   	{
;;;2904   		/* The scheduler is currently suspended - do not allow a context
;;;2905   		switch. */
;;;2906   		xYieldPending = pdTRUE;
000006  2001              MOVS     r0,#1
000008  491c              LDR      r1,|L44.124|
00000a  6008              STR      r0,[r1,#0]  ; xYieldPending
00000c  e032              B        |L44.116|
                  |L44.14|
;;;2907   	}
;;;2908   	else
;;;2909   	{
;;;2910   		xYieldPending = pdFALSE;
00000e  2000              MOVS     r0,#0
000010  491a              LDR      r1,|L44.124|
000012  6008              STR      r0,[r1,#0]  ; xYieldPending
;;;2911   		traceTASK_SWITCHED_OUT();
;;;2912   
;;;2913   		#if ( configGENERATE_RUN_TIME_STATS == 1 )
;;;2914   		{
;;;2915   				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
;;;2916   					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
;;;2917   				#else
;;;2918   					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
;;;2919   				#endif
;;;2920   
;;;2921   				/* Add the amount of time the task has been running to the
;;;2922   				accumulated time so far.  The time the task started running was
;;;2923   				stored in ulTaskSwitchedInTime.  Note that there is no overflow
;;;2924   				protection here so count values are only valid until the timer
;;;2925   				overflows.  The guard against negative values is to protect
;;;2926   				against suspect run time stat counter implementations - which
;;;2927   				are provided by the application, not the kernel. */
;;;2928   				if( ulTotalRunTime > ulTaskSwitchedInTime )
;;;2929   				{
;;;2930   					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
;;;2931   				}
;;;2932   				else
;;;2933   				{
;;;2934   					mtCOVERAGE_TEST_MARKER();
;;;2935   				}
;;;2936   				ulTaskSwitchedInTime = ulTotalRunTime;
;;;2937   		}
;;;2938   		#endif /* configGENERATE_RUN_TIME_STATS */
;;;2939   
;;;2940   		/* Check for stack overflow, if configured. */
;;;2941   		taskCHECK_FOR_STACK_OVERFLOW();
;;;2942   
;;;2943   		/* Before the currently running task is switched out, save its errno. */
;;;2944   		#if( configUSE_POSIX_ERRNO == 1 )
;;;2945   		{
;;;2946   			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
;;;2947   		}
;;;2948   		#endif
;;;2949   
;;;2950   		/* Select a new task to run using either the generic C or port
;;;2951   		optimised asm code. */
;;;2952   		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
000014  481a              LDR      r0,|L44.128|
000016  6800              LDR      r0,[r0,#0]  ; uxTopReadyPriority
000018  fab0f080          CLZ      r0,r0
00001c  f1c0011f          RSB      r1,r0,#0x1f
000020  eb010081          ADD      r0,r1,r1,LSL #2
000024  4a17              LDR      r2,|L44.132|
000026  f8520020          LDR      r0,[r2,r0,LSL #2]
00002a  b108              CBZ      r0,|L44.48|
00002c  2001              MOVS     r0,#1
00002e  e000              B        |L44.50|
                  |L44.48|
000030  2000              MOVS     r0,#0
                  |L44.50|
000032  b950              CBNZ     r0,|L44.74|
000034  bf00              NOP      
000036  2040              MOVS     r0,#0x40
000038  f3808811          MSR      BASEPRI,r0
00003c  f3bf8f4f          DSB      
000040  f3bf8f6f          ISB      
000044  bf00              NOP      
000046  bf00              NOP      
                  |L44.72|
000048  e7fe              B        |L44.72|
                  |L44.74|
00004a  eb010281          ADD      r2,r1,r1,LSL #2
00004e  4b0d              LDR      r3,|L44.132|
000050  eb030082          ADD      r0,r3,r2,LSL #2
000054  6842              LDR      r2,[r0,#4]
000056  6852              LDR      r2,[r2,#4]
000058  6042              STR      r2,[r0,#4]
00005a  f1000208          ADD      r2,r0,#8
00005e  6843              LDR      r3,[r0,#4]
000060  4293              CMP      r3,r2
000062  d102              BNE      |L44.106|
000064  6842              LDR      r2,[r0,#4]
000066  6852              LDR      r2,[r2,#4]
000068  6042              STR      r2,[r0,#4]
                  |L44.106|
00006a  6842              LDR      r2,[r0,#4]
00006c  68d2              LDR      r2,[r2,#0xc]
00006e  4b06              LDR      r3,|L44.136|
000070  601a              STR      r2,[r3,#0]  ; pxCurrentTCB
000072  bf00              NOP      
                  |L44.116|
;;;2953   		traceTASK_SWITCHED_IN();
;;;2954   
;;;2955   		/* After the new task is switched in, update the global errno. */
;;;2956   		#if( configUSE_POSIX_ERRNO == 1 )
;;;2957   		{
;;;2958   			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
;;;2959   		}
;;;2960   		#endif
;;;2961   
;;;2962   		#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;2963   		{
;;;2964   			/* Switch Newlib's _impure_ptr variable to point to the _reent
;;;2965   			structure specific to this task. */
;;;2966   			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
;;;2967   		}
;;;2968   		#endif /* configUSE_NEWLIB_REENTRANT */
;;;2969   	}
;;;2970   }
000074  4770              BX       lr
;;;2971   /*-----------------------------------------------------------*/
                          ENDP

000076  0000              DCW      0x0000
                  |L44.120|
                          DCD      uxSchedulerSuspended
                  |L44.124|
                          DCD      xYieldPending
                  |L44.128|
                          DCD      uxTopReadyPriority
                  |L44.132|
                          DCD      pxReadyTasksLists
                  |L44.136|
                          DCD      pxCurrentTCB

                          AREA ||i.xTaskCheckForTimeOut||, CODE, READONLY, ALIGN=2

                  xTaskCheckForTimeOut PROC
;;;3168   
;;;3169   BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
000000  b570              PUSH     {r4-r6,lr}
;;;3170   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3171   BaseType_t xReturn;
;;;3172   
;;;3173   	configASSERT( pxTimeOut );
000006  b955              CBNZ     r5,|L45.30|
000008  bf00              NOP      
00000a  2040              MOVS     r0,#0x40
00000c  f3808811          MSR      BASEPRI,r0
000010  f3bf8f4f          DSB      
000014  f3bf8f6f          ISB      
000018  bf00              NOP      
00001a  bf00              NOP      
                  |L45.28|
00001c  e7fe              B        |L45.28|
                  |L45.30|
;;;3174   	configASSERT( pxTicksToWait );
00001e  b954              CBNZ     r4,|L45.54|
000020  bf00              NOP      
000022  2040              MOVS     r0,#0x40
000024  f3808811          MSR      BASEPRI,r0
000028  f3bf8f4f          DSB      
00002c  f3bf8f6f          ISB      
000030  bf00              NOP      
000032  bf00              NOP      
                  |L45.52|
000034  e7fe              B        |L45.52|
                  |L45.54|
;;;3175   
;;;3176   	taskENTER_CRITICAL();
000036  f7fffffe          BL       vPortEnterCritical
;;;3177   	{
;;;3178   		/* Minor optimisation.  The tick count cannot change in this block. */
;;;3179   		const TickType_t xConstTickCount = xTickCount;
00003a  4812              LDR      r0,|L45.132|
00003c  6802              LDR      r2,[r0,#0]  ; xTickCount
;;;3180   		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
00003e  6868              LDR      r0,[r5,#4]
000040  1a13              SUBS     r3,r2,r0
;;;3181   
;;;3182   		#if( INCLUDE_xTaskAbortDelay == 1 )
;;;3183   			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
;;;3184   			{
;;;3185   				/* The delay was aborted, which is not the same as a time out,
;;;3186   				but has the same result. */
;;;3187   				pxCurrentTCB->ucDelayAborted = pdFALSE;
;;;3188   				xReturn = pdTRUE;
;;;3189   			}
;;;3190   			else
;;;3191   		#endif
;;;3192   
;;;3193   		#if ( INCLUDE_vTaskSuspend == 1 )
;;;3194   			if( *pxTicksToWait == portMAX_DELAY )
000042  6820              LDR      r0,[r4,#0]
000044  1c40              ADDS     r0,r0,#1
000046  b908              CBNZ     r0,|L45.76|
;;;3195   			{
;;;3196   				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
;;;3197   				specified is the maximum block time then the task should block
;;;3198   				indefinitely, and therefore never time out. */
;;;3199   				xReturn = pdFALSE;
000048  2600              MOVS     r6,#0
00004a  e017              B        |L45.124|
                  |L45.76|
;;;3200   			}
;;;3201   			else
;;;3202   		#endif
;;;3203   
;;;3204   		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
00004c  490e              LDR      r1,|L45.136|
00004e  6828              LDR      r0,[r5,#0]
000050  6809              LDR      r1,[r1,#0]  ; xNumOfOverflows
000052  4288              CMP      r0,r1
000054  d004              BEQ      |L45.96|
000056  6868              LDR      r0,[r5,#4]
000058  4290              CMP      r0,r2
00005a  d801              BHI      |L45.96|
;;;3205   		{
;;;3206   			/* The tick count is greater than the time at which
;;;3207   			vTaskSetTimeout() was called, but has also overflowed since
;;;3208   			vTaskSetTimeOut() was called.  It must have wrapped all the way
;;;3209   			around and gone past again. This passed since vTaskSetTimeout()
;;;3210   			was called. */
;;;3211   			xReturn = pdTRUE;
00005c  2601              MOVS     r6,#1
00005e  e00d              B        |L45.124|
                  |L45.96|
;;;3212   		}
;;;3213   		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
000060  6820              LDR      r0,[r4,#0]
000062  4298              CMP      r0,r3
000064  d907              BLS      |L45.118|
;;;3214   		{
;;;3215   			/* Not a genuine timeout. Adjust parameters for time remaining. */
;;;3216   			*pxTicksToWait -= xElapsedTime;
000066  6820              LDR      r0,[r4,#0]
000068  1ac0              SUBS     r0,r0,r3
00006a  6020              STR      r0,[r4,#0]
;;;3217   			vTaskInternalSetTimeOutState( pxTimeOut );
00006c  4628              MOV      r0,r5
00006e  f7fffffe          BL       vTaskInternalSetTimeOutState
;;;3218   			xReturn = pdFALSE;
000072  2600              MOVS     r6,#0
000074  e002              B        |L45.124|
                  |L45.118|
;;;3219   		}
;;;3220   		else
;;;3221   		{
;;;3222   			*pxTicksToWait = 0;
000076  2000              MOVS     r0,#0
000078  6020              STR      r0,[r4,#0]
;;;3223   			xReturn = pdTRUE;
00007a  2601              MOVS     r6,#1
                  |L45.124|
;;;3224   		}
;;;3225   	}
;;;3226   	taskEXIT_CRITICAL();
00007c  f7fffffe          BL       vPortExitCritical
;;;3227   
;;;3228   	return xReturn;
000080  4630              MOV      r0,r6
;;;3229   }
000082  bd70              POP      {r4-r6,pc}
;;;3230   /*-----------------------------------------------------------*/
                          ENDP

                  |L45.132|
                          DCD      xTickCount
                  |L45.136|
                          DCD      xNumOfOverflows

                          AREA ||i.xTaskCreate||, CODE, READONLY, ALIGN=1

                  xTaskCreate PROC
;;;746    
;;;747    	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;748    							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
;;;749    							const configSTACK_DEPTH_TYPE usStackDepth,
;;;750    							void * const pvParameters,
;;;751    							UBaseType_t uxPriority,
;;;752    							TaskHandle_t * const pxCreatedTask )
;;;753    	{
000004  b085              SUB      sp,sp,#0x14
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
00000a  4617              MOV      r7,r2
00000c  e9ddab12          LDRD     r10,r11,[sp,#0x48]
;;;754    	TCB_t *pxNewTCB;
;;;755    	BaseType_t xReturn;
;;;756    
;;;757    		/* If the stack grows down then allocate the stack then the TCB so the stack
;;;758    		does not grow into the TCB.  Likewise if the stack grows up then allocate
;;;759    		the TCB then the stack. */
;;;760    		#if( portSTACK_GROWTH > 0 )
;;;761    		{
;;;762    			/* Allocate space for the TCB.  Where the memory comes from depends on
;;;763    			the implementation of the port malloc function and whether or not static
;;;764    			allocation is being used. */
;;;765    			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
;;;766    
;;;767    			if( pxNewTCB != NULL )
;;;768    			{
;;;769    				/* Allocate space for the stack used by the task being created.
;;;770    				The base of the stack memory stored in the TCB so the task can
;;;771    				be deleted later if required. */
;;;772    				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
;;;773    
;;;774    				if( pxNewTCB->pxStack == NULL )
;;;775    				{
;;;776    					/* Could not allocate the stack.  Delete the allocated TCB. */
;;;777    					vPortFree( pxNewTCB );
;;;778    					pxNewTCB = NULL;
;;;779    				}
;;;780    			}
;;;781    		}
;;;782    		#else /* portSTACK_GROWTH */
;;;783    		{
;;;784    		StackType_t *pxStack;
;;;785    
;;;786    			/* Allocate space for the stack used by the task being created. */
;;;787    			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
000010  00b8              LSLS     r0,r7,#2
000012  f7fffffe          BL       pvPortMalloc
000016  4606              MOV      r6,r0
;;;788    
;;;789    			if( pxStack != NULL )
000018  b156              CBZ      r6,|L46.48|
;;;790    			{
;;;791    				/* Allocate space for the TCB. */
;;;792    				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
00001a  2058              MOVS     r0,#0x58
00001c  f7fffffe          BL       pvPortMalloc
000020  4604              MOV      r4,r0
;;;793    
;;;794    				if( pxNewTCB != NULL )
000022  b10c              CBZ      r4,|L46.40|
;;;795    				{
;;;796    					/* Store the stack location in the TCB. */
;;;797    					pxNewTCB->pxStack = pxStack;
000024  6326              STR      r6,[r4,#0x30]
000026  e004              B        |L46.50|
                  |L46.40|
;;;798    				}
;;;799    				else
;;;800    				{
;;;801    					/* The stack cannot be used as the TCB was not created.  Free
;;;802    					it again. */
;;;803    					vPortFree( pxStack );
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       vPortFree
00002e  e000              B        |L46.50|
                  |L46.48|
;;;804    				}
;;;805    			}
;;;806    			else
;;;807    			{
;;;808    				pxNewTCB = NULL;
000030  2400              MOVS     r4,#0
                  |L46.50|
;;;809    			}
;;;810    		}
;;;811    		#endif /* portSTACK_GROWTH */
;;;812    
;;;813    		if( pxNewTCB != NULL )
000032  b17c              CBZ      r4,|L46.84|
;;;814    		{
;;;815    			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
;;;816    			{
;;;817    				/* Tasks can be created statically or dynamically, so note this
;;;818    				task was created dynamically in case it is later deleted. */
;;;819    				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
;;;820    			}
;;;821    			#endif /* configSUPPORT_STATIC_ALLOCATION */
;;;822    
;;;823    			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
000034  2000              MOVS     r0,#0
000036  e9cdab00          STRD     r10,r11,[sp,#0]
00003a  e9cd4002          STRD     r4,r0,[sp,#8]
00003e  463a              MOV      r2,r7
000040  4649              MOV      r1,r9
000042  4640              MOV      r0,r8
000044  9b08              LDR      r3,[sp,#0x20]
000046  f7fffffe          BL       prvInitialiseNewTask
;;;824    			prvAddNewTaskToReadyList( pxNewTCB );
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       prvAddNewTaskToReadyList
;;;825    			xReturn = pdPASS;
000050  2501              MOVS     r5,#1
000052  e001              B        |L46.88|
                  |L46.84|
;;;826    		}
;;;827    		else
;;;828    		{
;;;829    			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
000054  f04f35ff          MOV      r5,#0xffffffff
                  |L46.88|
;;;830    		}
;;;831    
;;;832    		return xReturn;
000058  4628              MOV      r0,r5
;;;833    	}
00005a  b009              ADD      sp,sp,#0x24
00005c  e8bd8ff0          POP      {r4-r11,pc}
;;;834    
                          ENDP


                          AREA ||i.xTaskGenericNotify||, CODE, READONLY, ALIGN=2

                  xTaskGenericNotify PROC
;;;4626   
;;;4627   	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;4628   	{
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;4629   	TCB_t * pxTCB;
;;;4630   	BaseType_t xReturn = pdPASS;
00000c  f04f0a01          MOV      r10,#1
;;;4631   	uint8_t ucOriginalNotifyState;
;;;4632   
;;;4633   		configASSERT( xTaskToNotify );
000010  b956              CBNZ     r6,|L47.40|
000012  bf00              NOP      
000014  2040              MOVS     r0,#0x40
000016  f3808811          MSR      BASEPRI,r0
00001a  f3bf8f4f          DSB      
00001e  f3bf8f6f          ISB      
000022  bf00              NOP      
000024  bf00              NOP      
                  |L47.38|
000026  e7fe              B        |L47.38|
                  |L47.40|
;;;4634   		pxTCB = xTaskToNotify;
000028  4634              MOV      r4,r6
;;;4635   
;;;4636   		taskENTER_CRITICAL();
00002a  f7fffffe          BL       vPortEnterCritical
;;;4637   		{
;;;4638   			if( pulPreviousNotificationValue != NULL )
00002e  f1b80f00          CMP      r8,#0
000032  d002              BEQ      |L47.58|
;;;4639   			{
;;;4640   				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
000034  6d20              LDR      r0,[r4,#0x50]
000036  f8c80000          STR      r0,[r8,#0]
                  |L47.58|
;;;4641   			}
;;;4642   
;;;4643   			ucOriginalNotifyState = pxTCB->ucNotifyState;
00003a  f8949054          LDRB     r9,[r4,#0x54]
;;;4644   
;;;4645   			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
00003e  2002              MOVS     r0,#2
000040  f8840054          STRB     r0,[r4,#0x54]
;;;4646   
;;;4647   			switch( eAction )
000044  2f05              CMP      r7,#5
000046  d217              BCS      |L47.120|
000048  e8dff007          TBB      [pc,r7]
00004c  1503070b          DCB      0x15,0x03,0x07,0x0b
000050  0d00              DCB      0x0d,0x00
;;;4648   			{
;;;4649   				case eSetBits	:
;;;4650   					pxTCB->ulNotifiedValue |= ulValue;
000052  6d20              LDR      r0,[r4,#0x50]
000054  4328              ORRS     r0,r0,r5
000056  6520              STR      r0,[r4,#0x50]
;;;4651   					break;
000058  e021              B        |L47.158|
;;;4652   
;;;4653   				case eIncrement	:
;;;4654   					( pxTCB->ulNotifiedValue )++;
00005a  6d20              LDR      r0,[r4,#0x50]
00005c  1c40              ADDS     r0,r0,#1
00005e  6520              STR      r0,[r4,#0x50]
;;;4655   					break;
000060  e01d              B        |L47.158|
;;;4656   
;;;4657   				case eSetValueWithOverwrite	:
;;;4658   					pxTCB->ulNotifiedValue = ulValue;
000062  6525              STR      r5,[r4,#0x50]
;;;4659   					break;
000064  e01b              B        |L47.158|
;;;4660   
;;;4661   				case eSetValueWithoutOverwrite :
;;;4662   					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
000066  f1b90f02          CMP      r9,#2
00006a  d001              BEQ      |L47.112|
;;;4663   					{
;;;4664   						pxTCB->ulNotifiedValue = ulValue;
00006c  6525              STR      r5,[r4,#0x50]
00006e  e001              B        |L47.116|
                  |L47.112|
;;;4665   					}
;;;4666   					else
;;;4667   					{
;;;4668   						/* The value could not be written to the task. */
;;;4669   						xReturn = pdFAIL;
000070  f04f0a00          MOV      r10,#0
                  |L47.116|
;;;4670   					}
;;;4671   					break;
000074  e013              B        |L47.158|
;;;4672   
;;;4673   				case eNoAction:
;;;4674   					/* The task is being notified without its notify value being
;;;4675   					updated. */
;;;4676   					break;
000076  e012              B        |L47.158|
                  |L47.120|
;;;4677   
;;;4678   				default:
;;;4679   					/* Should not get here if all enums are handled.
;;;4680   					Artificially force an assert by testing a value the
;;;4681   					compiler can't assume is const. */
;;;4682   					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
000078  6d20              LDR      r0,[r4,#0x50]
00007a  1c40              ADDS     r0,r0,#1
00007c  b908              CBNZ     r0,|L47.130|
00007e  2001              MOVS     r0,#1
000080  e000              B        |L47.132|
                  |L47.130|
000082  2000              MOVS     r0,#0
                  |L47.132|
000084  b950              CBNZ     r0,|L47.156|
000086  bf00              NOP      
000088  2040              MOVS     r0,#0x40
00008a  f3808811          MSR      BASEPRI,r0
00008e  f3bf8f4f          DSB      
000092  f3bf8f6f          ISB      
000096  bf00              NOP      
000098  bf00              NOP      
                  |L47.154|
00009a  e7fe              B        |L47.154|
                  |L47.156|
;;;4683   
;;;4684   					break;
00009c  bf00              NOP      
                  |L47.158|
00009e  bf00              NOP                            ;4651
;;;4685   			}
;;;4686   
;;;4687   			traceTASK_NOTIFY();
;;;4688   
;;;4689   			/* If the task is in the blocked state specifically to wait for a
;;;4690   			notification then unblock it now. */
;;;4691   			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
0000a0  f1b90f01          CMP      r9,#1
0000a4  d133              BNE      |L47.270|
;;;4692   			{
;;;4693   				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
0000a6  1d20              ADDS     r0,r4,#4
0000a8  f7fffffe          BL       uxListRemove
;;;4694   				prvAddTaskToReadyList( pxTCB );
0000ac  f894102c          LDRB     r1,[r4,#0x2c]
0000b0  2001              MOVS     r0,#1
0000b2  4088              LSLS     r0,r0,r1
0000b4  4918              LDR      r1,|L47.280|
0000b6  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
0000b8  4308              ORRS     r0,r0,r1
0000ba  4917              LDR      r1,|L47.280|
0000bc  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
0000be  6ae1              LDR      r1,[r4,#0x2c]
0000c0  eb010181          ADD      r1,r1,r1,LSL #2
0000c4  4a15              LDR      r2,|L47.284|
0000c6  eb020081          ADD      r0,r2,r1,LSL #2
0000ca  1d21              ADDS     r1,r4,#4
0000cc  f7fffffe          BL       vListInsertEnd
;;;4695   
;;;4696   				/* The task should not have been on an event list. */
;;;4697   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
0000d0  6aa0              LDR      r0,[r4,#0x28]
0000d2  b908              CBNZ     r0,|L47.216|
0000d4  2001              MOVS     r0,#1
0000d6  e000              B        |L47.218|
                  |L47.216|
0000d8  2000              MOVS     r0,#0
                  |L47.218|
0000da  b950              CBNZ     r0,|L47.242|
0000dc  bf00              NOP      
0000de  2040              MOVS     r0,#0x40
0000e0  f3808811          MSR      BASEPRI,r0
0000e4  f3bf8f4f          DSB      
0000e8  f3bf8f6f          ISB      
0000ec  bf00              NOP      
0000ee  bf00              NOP      
                  |L47.240|
0000f0  e7fe              B        |L47.240|
                  |L47.242|
;;;4698   
;;;4699   				#if( configUSE_TICKLESS_IDLE != 0 )
;;;4700   				{
;;;4701   					/* If a task is blocked waiting for a notification then
;;;4702   					xNextTaskUnblockTime might be set to the blocked task's time
;;;4703   					out time.  If the task is unblocked for a reason other than
;;;4704   					a timeout xNextTaskUnblockTime is normally left unchanged,
;;;4705   					because it will automatically get reset to a new value when
;;;4706   					the tick count equals xNextTaskUnblockTime.  However if
;;;4707   					tickless idling is used it might be more important to enter
;;;4708   					sleep mode at the earliest possible time - so reset
;;;4709   					xNextTaskUnblockTime here to ensure it is updated at the
;;;4710   					earliest possible time. */
;;;4711   					prvResetNextTaskUnblockTime();
;;;4712   				}
;;;4713   				#endif
;;;4714   
;;;4715   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
0000f2  490b              LDR      r1,|L47.288|
0000f4  6ae0              LDR      r0,[r4,#0x2c]
0000f6  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
0000f8  6ac9              LDR      r1,[r1,#0x2c]
0000fa  4288              CMP      r0,r1
0000fc  d907              BLS      |L47.270|
;;;4716   				{
;;;4717   					/* The notified task has a priority above the currently
;;;4718   					executing task so a yield is required. */
;;;4719   					taskYIELD_IF_USING_PREEMPTION();
0000fe  f04f5080          MOV      r0,#0x10000000
000102  4908              LDR      r1,|L47.292|
000104  6008              STR      r0,[r1,#0]
000106  f3bf8f4f          DSB      
00010a  f3bf8f6f          ISB      
                  |L47.270|
;;;4720   				}
;;;4721   				else
;;;4722   				{
;;;4723   					mtCOVERAGE_TEST_MARKER();
;;;4724   				}
;;;4725   			}
;;;4726   			else
;;;4727   			{
;;;4728   				mtCOVERAGE_TEST_MARKER();
;;;4729   			}
;;;4730   		}
;;;4731   		taskEXIT_CRITICAL();
00010e  f7fffffe          BL       vPortExitCritical
;;;4732   
;;;4733   		return xReturn;
000112  4650              MOV      r0,r10
;;;4734   	}
000114  e8bd87f0          POP      {r4-r10,pc}
;;;4735   
                          ENDP

                  |L47.280|
                          DCD      uxTopReadyPriority
                  |L47.284|
                          DCD      pxReadyTasksLists
                  |L47.288|
                          DCD      pxCurrentTCB
                  |L47.292|
                          DCD      0xe000ed04

                          AREA ||i.xTaskGenericNotifyFromISR||, CODE, READONLY, ALIGN=2

                  xTaskGenericNotifyFromISR PROC
;;;4740   
;;;4741   	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;4742   	{
000004  4607              MOV      r7,r0
000006  460e              MOV      r6,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
00000c  f8ddb028          LDR      r11,[sp,#0x28]
;;;4743   	TCB_t * pxTCB;
;;;4744   	uint8_t ucOriginalNotifyState;
;;;4745   	BaseType_t xReturn = pdPASS;
000010  2001              MOVS     r0,#1
000012  9000              STR      r0,[sp,#0]
;;;4746   	UBaseType_t uxSavedInterruptStatus;
;;;4747   
;;;4748   		configASSERT( xTaskToNotify );
000014  b957              CBNZ     r7,|L48.44|
000016  bf00              NOP      
000018  2040              MOVS     r0,#0x40
00001a  f3808811          MSR      BASEPRI,r0
00001e  f3bf8f4f          DSB      
000022  f3bf8f6f          ISB      
000026  bf00              NOP      
000028  bf00              NOP      
                  |L48.42|
00002a  e7fe              B        |L48.42|
                  |L48.44|
;;;4749   
;;;4750   		/* RTOS ports that support interrupt nesting have the concept of a
;;;4751   		maximum	system call (or maximum API call) interrupt priority.
;;;4752   		Interrupts that are	above the maximum system call priority are keep
;;;4753   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;4754   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;4755   		is defined in FreeRTOSConfig.h then
;;;4756   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;4757   		failure if a FreeRTOS API function is called from an interrupt that has
;;;4758   		been assigned a priority above the configured maximum system call
;;;4759   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;4760   		from interrupts	that have been assigned a priority at or (logically)
;;;4761   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;4762   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;4763   		simple as possible.  More information (albeit Cortex-M specific) is
;;;4764   		provided on the following link:
;;;4765   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;4766   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
00002c  f7fffffe          BL       vPortValidateInterruptPriority
;;;4767   
;;;4768   		pxTCB = xTaskToNotify;
000030  463c              MOV      r4,r7
;;;4769   
;;;4770   		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
000032  bf00              NOP      
000034  2140              MOVS     r1,#0x40
000036  f3ef8011          MRS      r0,BASEPRI
00003a  f3818811          MSR      BASEPRI,r1
00003e  f3bf8f4f          DSB      
000042  f3bf8f6f          ISB      
000046  bf00              NOP      
000048  4605              MOV      r5,r0
;;;4771   		{
;;;4772   			if( pulPreviousNotificationValue != NULL )
00004a  f1b90f00          CMP      r9,#0
00004e  d002              BEQ      |L48.86|
;;;4773   			{
;;;4774   				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
000050  6d20              LDR      r0,[r4,#0x50]
000052  f8c90000          STR      r0,[r9,#0]
                  |L48.86|
;;;4775   			}
;;;4776   
;;;4777   			ucOriginalNotifyState = pxTCB->ucNotifyState;
000056  f894a054          LDRB     r10,[r4,#0x54]
;;;4778   			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
00005a  2002              MOVS     r0,#2
00005c  f8840054          STRB     r0,[r4,#0x54]
;;;4779   
;;;4780   			switch( eAction )
000060  f1b80f05          CMP      r8,#5
000064  d217              BCS      |L48.150|
000066  e8dff008          TBB      [pc,r8]
00006a  1503              DCB      0x15,0x03
00006c  070b0d00          DCB      0x07,0x0b,0x0d,0x00
;;;4781   			{
;;;4782   				case eSetBits	:
;;;4783   					pxTCB->ulNotifiedValue |= ulValue;
000070  6d20              LDR      r0,[r4,#0x50]
000072  4330              ORRS     r0,r0,r6
000074  6520              STR      r0,[r4,#0x50]
;;;4784   					break;
000076  e021              B        |L48.188|
;;;4785   
;;;4786   				case eIncrement	:
;;;4787   					( pxTCB->ulNotifiedValue )++;
000078  6d20              LDR      r0,[r4,#0x50]
00007a  1c40              ADDS     r0,r0,#1
00007c  6520              STR      r0,[r4,#0x50]
;;;4788   					break;
00007e  e01d              B        |L48.188|
;;;4789   
;;;4790   				case eSetValueWithOverwrite	:
;;;4791   					pxTCB->ulNotifiedValue = ulValue;
000080  6526              STR      r6,[r4,#0x50]
;;;4792   					break;
000082  e01b              B        |L48.188|
;;;4793   
;;;4794   				case eSetValueWithoutOverwrite :
;;;4795   					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
000084  f1ba0f02          CMP      r10,#2
000088  d001              BEQ      |L48.142|
;;;4796   					{
;;;4797   						pxTCB->ulNotifiedValue = ulValue;
00008a  6526              STR      r6,[r4,#0x50]
00008c  e001              B        |L48.146|
                  |L48.142|
;;;4798   					}
;;;4799   					else
;;;4800   					{
;;;4801   						/* The value could not be written to the task. */
;;;4802   						xReturn = pdFAIL;
00008e  2000              MOVS     r0,#0
000090  9000              STR      r0,[sp,#0]
                  |L48.146|
;;;4803   					}
;;;4804   					break;
000092  e013              B        |L48.188|
;;;4805   
;;;4806   				case eNoAction :
;;;4807   					/* The task is being notified without its notify value being
;;;4808   					updated. */
;;;4809   					break;
000094  e012              B        |L48.188|
                  |L48.150|
;;;4810   
;;;4811   				default:
;;;4812   					/* Should not get here if all enums are handled.
;;;4813   					Artificially force an assert by testing a value the
;;;4814   					compiler can't assume is const. */
;;;4815   					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
000096  6d20              LDR      r0,[r4,#0x50]
000098  1c40              ADDS     r0,r0,#1
00009a  b908              CBNZ     r0,|L48.160|
00009c  2001              MOVS     r0,#1
00009e  e000              B        |L48.162|
                  |L48.160|
0000a0  2000              MOVS     r0,#0
                  |L48.162|
0000a2  b950              CBNZ     r0,|L48.186|
0000a4  bf00              NOP      
0000a6  2040              MOVS     r0,#0x40
0000a8  f3808811          MSR      BASEPRI,r0
0000ac  f3bf8f4f          DSB      
0000b0  f3bf8f6f          ISB      
0000b4  bf00              NOP      
0000b6  bf00              NOP      
                  |L48.184|
0000b8  e7fe              B        |L48.184|
                  |L48.186|
;;;4816   					break;
0000ba  bf00              NOP      
                  |L48.188|
0000bc  bf00              NOP                            ;4784
;;;4817   			}
;;;4818   
;;;4819   			traceTASK_NOTIFY_FROM_ISR();
;;;4820   
;;;4821   			/* If the task is in the blocked state specifically to wait for a
;;;4822   			notification then unblock it now. */
;;;4823   			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
0000be  f1ba0f01          CMP      r10,#1
0000c2  d13d              BNE      |L48.320|
;;;4824   			{
;;;4825   				/* The task should not have been on an event list. */
;;;4826   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
0000c4  6aa0              LDR      r0,[r4,#0x28]
0000c6  b908              CBNZ     r0,|L48.204|
0000c8  2001              MOVS     r0,#1
0000ca  e000              B        |L48.206|
                  |L48.204|
0000cc  2000              MOVS     r0,#0
                  |L48.206|
0000ce  b950              CBNZ     r0,|L48.230|
0000d0  bf00              NOP      
0000d2  2040              MOVS     r0,#0x40
0000d4  f3808811          MSR      BASEPRI,r0
0000d8  f3bf8f4f          DSB      
0000dc  f3bf8f6f          ISB      
0000e0  bf00              NOP      
0000e2  bf00              NOP      
                  |L48.228|
0000e4  e7fe              B        |L48.228|
                  |L48.230|
;;;4827   
;;;4828   				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
0000e6  481a              LDR      r0,|L48.336|
0000e8  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
0000ea  b9a8              CBNZ     r0,|L48.280|
;;;4829   				{
;;;4830   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
0000ec  1d20              ADDS     r0,r4,#4
0000ee  f7fffffe          BL       uxListRemove
;;;4831   					prvAddTaskToReadyList( pxTCB );
0000f2  f894102c          LDRB     r1,[r4,#0x2c]
0000f6  2001              MOVS     r0,#1
0000f8  4088              LSLS     r0,r0,r1
0000fa  4916              LDR      r1,|L48.340|
0000fc  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
0000fe  4308              ORRS     r0,r0,r1
000100  4914              LDR      r1,|L48.340|
000102  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000104  6ae1              LDR      r1,[r4,#0x2c]
000106  eb010181          ADD      r1,r1,r1,LSL #2
00010a  4a13              LDR      r2,|L48.344|
00010c  eb020081          ADD      r0,r2,r1,LSL #2
000110  1d21              ADDS     r1,r4,#4
000112  f7fffffe          BL       vListInsertEnd
000116  e004              B        |L48.290|
                  |L48.280|
;;;4832   				}
;;;4833   				else
;;;4834   				{
;;;4835   					/* The delayed and ready lists cannot be accessed, so hold
;;;4836   					this task pending until the scheduler is resumed. */
;;;4837   					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
000118  f1040118          ADD      r1,r4,#0x18
00011c  480f              LDR      r0,|L48.348|
00011e  f7fffffe          BL       vListInsertEnd
                  |L48.290|
;;;4838   				}
;;;4839   
;;;4840   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
000122  490f              LDR      r1,|L48.352|
000124  6ae0              LDR      r0,[r4,#0x2c]
000126  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000128  6ac9              LDR      r1,[r1,#0x2c]
00012a  4288              CMP      r0,r1
00012c  d908              BLS      |L48.320|
;;;4841   				{
;;;4842   					/* The notified task has a priority above the currently
;;;4843   					executing task so a yield is required. */
;;;4844   					if( pxHigherPriorityTaskWoken != NULL )
00012e  f1bb0f00          CMP      r11,#0
000132  d002              BEQ      |L48.314|
;;;4845   					{
;;;4846   						*pxHigherPriorityTaskWoken = pdTRUE;
000134  2001              MOVS     r0,#1
000136  f8cb0000          STR      r0,[r11,#0]
                  |L48.314|
;;;4847   					}
;;;4848   
;;;4849   					/* Mark that a yield is pending in case the user is not
;;;4850   					using the "xHigherPriorityTaskWoken" parameter to an ISR
;;;4851   					safe FreeRTOS function. */
;;;4852   					xYieldPending = pdTRUE;
00013a  2001              MOVS     r0,#1
00013c  4909              LDR      r1,|L48.356|
00013e  6008              STR      r0,[r1,#0]  ; xYieldPending
                  |L48.320|
;;;4853   				}
;;;4854   				else
;;;4855   				{
;;;4856   					mtCOVERAGE_TEST_MARKER();
;;;4857   				}
;;;4858   			}
;;;4859   		}
;;;4860   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
000140  bf00              NOP      
000142  f3858811          MSR      BASEPRI,r5
000146  bf00              NOP      
;;;4861   
;;;4862   		return xReturn;
000148  9800              LDR      r0,[sp,#0]
;;;4863   	}
00014a  e8bd8ff8          POP      {r3-r11,pc}
;;;4864   
                          ENDP

00014e  0000              DCW      0x0000
                  |L48.336|
                          DCD      uxSchedulerSuspended
                  |L48.340|
                          DCD      uxTopReadyPriority
                  |L48.344|
                          DCD      pxReadyTasksLists
                  |L48.348|
                          DCD      xPendingReadyList
                  |L48.352|
                          DCD      pxCurrentTCB
                  |L48.356|
                          DCD      xYieldPending

                          AREA ||i.xTaskGetCurrentTaskHandle||, CODE, READONLY, ALIGN=2

                  xTaskGetCurrentTaskHandle PROC
;;;3818   
;;;3819   	TaskHandle_t xTaskGetCurrentTaskHandle( void )
000000  4901              LDR      r1,|L49.8|
;;;3820   	{
;;;3821   	TaskHandle_t xReturn;
;;;3822   
;;;3823   		/* A critical section is not required as this is not called from
;;;3824   		an interrupt and the current TCB will always be the same for any
;;;3825   		individual execution thread. */
;;;3826   		xReturn = pxCurrentTCB;
000002  6808              LDR      r0,[r1,#0]  ; pxCurrentTCB
;;;3827   
;;;3828   		return xReturn;
;;;3829   	}
000004  4770              BX       lr
;;;3830   
                          ENDP

000006  0000              DCW      0x0000
                  |L49.8|
                          DCD      pxCurrentTCB

                          AREA ||i.xTaskGetSchedulerState||, CODE, READONLY, ALIGN=2

                  xTaskGetSchedulerState PROC
;;;3835   
;;;3836   	BaseType_t xTaskGetSchedulerState( void )
000000  4905              LDR      r1,|L50.24|
;;;3837   	{
;;;3838   	BaseType_t xReturn;
;;;3839   
;;;3840   		if( xSchedulerRunning == pdFALSE )
000002  6809              LDR      r1,[r1,#0]  ; xSchedulerRunning
000004  b909              CBNZ     r1,|L50.10|
;;;3841   		{
;;;3842   			xReturn = taskSCHEDULER_NOT_STARTED;
000006  2001              MOVS     r0,#1
000008  e005              B        |L50.22|
                  |L50.10|
;;;3843   		}
;;;3844   		else
;;;3845   		{
;;;3846   			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
00000a  4904              LDR      r1,|L50.28|
00000c  6809              LDR      r1,[r1,#0]  ; uxSchedulerSuspended
00000e  b909              CBNZ     r1,|L50.20|
;;;3847   			{
;;;3848   				xReturn = taskSCHEDULER_RUNNING;
000010  2002              MOVS     r0,#2
000012  e000              B        |L50.22|
                  |L50.20|
;;;3849   			}
;;;3850   			else
;;;3851   			{
;;;3852   				xReturn = taskSCHEDULER_SUSPENDED;
000014  2000              MOVS     r0,#0
                  |L50.22|
;;;3853   			}
;;;3854   		}
;;;3855   
;;;3856   		return xReturn;
;;;3857   	}
000016  4770              BX       lr
;;;3858   
                          ENDP

                  |L50.24|
                          DCD      xSchedulerRunning
                  |L50.28|
                          DCD      uxSchedulerSuspended

                          AREA ||i.xTaskGetTickCount||, CODE, READONLY, ALIGN=2

                  xTaskGetTickCount PROC
;;;2254   
;;;2255   TickType_t xTaskGetTickCount( void )
000000  4901              LDR      r1,|L51.8|
;;;2256   {
;;;2257   TickType_t xTicks;
;;;2258   
;;;2259   	/* Critical section required if running on a 16 bit processor. */
;;;2260   	portTICK_TYPE_ENTER_CRITICAL();
;;;2261   	{
;;;2262   		xTicks = xTickCount;
000002  6808              LDR      r0,[r1,#0]  ; xTickCount
;;;2263   	}
;;;2264   	portTICK_TYPE_EXIT_CRITICAL();
;;;2265   
;;;2266   	return xTicks;
;;;2267   }
000004  4770              BX       lr
;;;2268   /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L51.8|
                          DCD      xTickCount

                          AREA ||i.xTaskGetTickCountFromISR||, CODE, READONLY, ALIGN=2

                  xTaskGetTickCountFromISR PROC
;;;2269   
;;;2270   TickType_t xTaskGetTickCountFromISR( void )
000000  b570              PUSH     {r4-r6,lr}
;;;2271   {
;;;2272   TickType_t xReturn;
;;;2273   UBaseType_t uxSavedInterruptStatus;
;;;2274   
;;;2275   	/* RTOS ports that support interrupt nesting have the concept of a maximum
;;;2276   	system call (or maximum API call) interrupt priority.  Interrupts that are
;;;2277   	above the maximum system call priority are kept permanently enabled, even
;;;2278   	when the RTOS kernel is in a critical section, but cannot make any calls to
;;;2279   	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
;;;2280   	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;2281   	failure if a FreeRTOS API function is called from an interrupt that has been
;;;2282   	assigned a priority above the configured maximum system call priority.
;;;2283   	Only FreeRTOS functions that end in FromISR can be called from interrupts
;;;2284   	that have been assigned a priority at or (logically) below the maximum
;;;2285   	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
;;;2286   	safe API to ensure interrupt entry is as fast and as simple as possible.
;;;2287   	More information (albeit Cortex-M specific) is provided on the following
;;;2288   	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;2289   	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
000002  f7fffffe          BL       vPortValidateInterruptPriority
;;;2290   
;;;2291   	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
000006  2500              MOVS     r5,#0
;;;2292   	{
;;;2293   		xReturn = xTickCount;
000008  4801              LDR      r0,|L52.16|
00000a  6804              LDR      r4,[r0,#0]  ; xTickCount
;;;2294   	}
;;;2295   	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
;;;2296   
;;;2297   	return xReturn;
00000c  4620              MOV      r0,r4
;;;2298   }
00000e  bd70              POP      {r4-r6,pc}
;;;2299   /*-----------------------------------------------------------*/
                          ENDP

                  |L52.16|
                          DCD      xTickCount

                          AREA ||i.xTaskIncrementTick||, CODE, READONLY, ALIGN=2

                  xTaskIncrementTick PROC
;;;2635   
;;;2636   BaseType_t xTaskIncrementTick( void )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2637   {
;;;2638   TCB_t * pxTCB;
;;;2639   TickType_t xItemValue;
;;;2640   BaseType_t xSwitchRequired = pdFALSE;
000004  f04f0800          MOV      r8,#0
;;;2641   
;;;2642   	/* Called by the portable layer each time a tick interrupt occurs.
;;;2643   	Increments the tick then checks to see if the new tick value will cause any
;;;2644   	tasks to be unblocked. */
;;;2645   	traceTASK_INCREMENT_TICK( xTickCount );
;;;2646   	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000008  4844              LDR      r0,|L53.284|
00000a  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00000c  2800              CMP      r0,#0
00000e  d177              BNE      |L53.256|
;;;2647   	{
;;;2648   		/* Minor optimisation.  The tick count cannot change in this
;;;2649   		block. */
;;;2650   		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
000010  4843              LDR      r0,|L53.288|
000012  6800              LDR      r0,[r0,#0]  ; xTickCount
000014  1c45              ADDS     r5,r0,#1
;;;2651   
;;;2652   		/* Increment the RTOS tick, switching the delayed and overflowed
;;;2653   		delayed lists if it wraps to 0. */
;;;2654   		xTickCount = xConstTickCount;
000016  4842              LDR      r0,|L53.288|
000018  6005              STR      r5,[r0,#0]  ; xTickCount
;;;2655   
;;;2656   		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
00001a  bb15              CBNZ     r5,|L53.98|
;;;2657   		{
;;;2658   			taskSWITCH_DELAYED_LISTS();
00001c  4841              LDR      r0,|L53.292|
00001e  6800              LDR      r0,[r0,#0]  ; pxDelayedTaskList
000020  6800              LDR      r0,[r0,#0]
000022  b908              CBNZ     r0,|L53.40|
000024  2001              MOVS     r0,#1
000026  e000              B        |L53.42|
                  |L53.40|
000028  2000              MOVS     r0,#0
                  |L53.42|
00002a  b950              CBNZ     r0,|L53.66|
00002c  bf00              NOP      
00002e  2040              MOVS     r0,#0x40
000030  f3808811          MSR      BASEPRI,r0
000034  f3bf8f4f          DSB      
000038  f3bf8f6f          ISB      
00003c  bf00              NOP      
00003e  bf00              NOP      
                  |L53.64|
000040  e7fe              B        |L53.64|
                  |L53.66|
000042  4838              LDR      r0,|L53.292|
000044  6807              LDR      r7,[r0,#0]  ; pxDelayedTaskList
000046  4838              LDR      r0,|L53.296|
000048  6800              LDR      r0,[r0,#0]  ; pxOverflowDelayedTaskList
00004a  4936              LDR      r1,|L53.292|
00004c  6008              STR      r0,[r1,#0]  ; pxDelayedTaskList
00004e  4836              LDR      r0,|L53.296|
000050  6007              STR      r7,[r0,#0]  ; pxOverflowDelayedTaskList
000052  4836              LDR      r0,|L53.300|
000054  6800              LDR      r0,[r0,#0]  ; xNumOfOverflows
000056  1c40              ADDS     r0,r0,#1
000058  4934              LDR      r1,|L53.300|
00005a  6008              STR      r0,[r1,#0]  ; xNumOfOverflows
00005c  f7fffffe          BL       prvResetNextTaskUnblockTime
000060  bf00              NOP      
                  |L53.98|
;;;2659   		}
;;;2660   		else
;;;2661   		{
;;;2662   			mtCOVERAGE_TEST_MARKER();
;;;2663   		}
;;;2664   
;;;2665   		/* See if this tick has made a timeout expire.  Tasks are stored in
;;;2666   		the	queue in the order of their wake time - meaning once one task
;;;2667   		has been found whose block time has not expired there is no need to
;;;2668   		look any further down the list. */
;;;2669   		if( xConstTickCount >= xNextTaskUnblockTime )
000062  4833              LDR      r0,|L53.304|
000064  6800              LDR      r0,[r0,#0]  ; xNextTaskUnblockTime
000066  4285              CMP      r5,r0
000068  d33c              BCC      |L53.228|
;;;2670   		{
;;;2671   			for( ;; )
00006a  bf00              NOP      
                  |L53.108|
;;;2672   			{
;;;2673   				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
00006c  482d              LDR      r0,|L53.292|
00006e  6800              LDR      r0,[r0,#0]  ; pxDelayedTaskList
000070  6800              LDR      r0,[r0,#0]
000072  b908              CBNZ     r0,|L53.120|
000074  2001              MOVS     r0,#1
000076  e000              B        |L53.122|
                  |L53.120|
000078  2000              MOVS     r0,#0
                  |L53.122|
00007a  b120              CBZ      r0,|L53.134|
;;;2674   				{
;;;2675   					/* The delayed list is empty.  Set xNextTaskUnblockTime
;;;2676   					to the maximum possible value so it is extremely
;;;2677   					unlikely that the
;;;2678   					if( xTickCount >= xNextTaskUnblockTime ) test will pass
;;;2679   					next time through. */
;;;2680   					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
00007c  f04f30ff          MOV      r0,#0xffffffff
000080  492b              LDR      r1,|L53.304|
000082  6008              STR      r0,[r1,#0]  ; xNextTaskUnblockTime
;;;2681   					break;
000084  e02d              B        |L53.226|
                  |L53.134|
;;;2682   				}
;;;2683   				else
;;;2684   				{
;;;2685   					/* The delayed list is not empty, get the value of the
;;;2686   					item at the head of the delayed list.  This is the time
;;;2687   					at which the task at the head of the delayed list must
;;;2688   					be removed from the Blocked state. */
;;;2689   					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
000086  4827              LDR      r0,|L53.292|
000088  6800              LDR      r0,[r0,#0]  ; pxDelayedTaskList
00008a  68c0              LDR      r0,[r0,#0xc]
00008c  68c4              LDR      r4,[r0,#0xc]
;;;2690   					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
00008e  6866              LDR      r6,[r4,#4]
;;;2691   
;;;2692   					if( xConstTickCount < xItemValue )
000090  42b5              CMP      r5,r6
000092  d202              BCS      |L53.154|
;;;2693   					{
;;;2694   						/* It is not time to unblock this item yet, but the
;;;2695   						item value is the time at which the task at the head
;;;2696   						of the blocked list must be removed from the Blocked
;;;2697   						state -	so record the item value in
;;;2698   						xNextTaskUnblockTime. */
;;;2699   						xNextTaskUnblockTime = xItemValue;
000094  4826              LDR      r0,|L53.304|
000096  6006              STR      r6,[r0,#0]  ; xNextTaskUnblockTime
;;;2700   						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
000098  e023              B        |L53.226|
                  |L53.154|
;;;2701   					}
;;;2702   					else
;;;2703   					{
;;;2704   						mtCOVERAGE_TEST_MARKER();
;;;2705   					}
;;;2706   
;;;2707   					/* It is time to remove the item from the Blocked state. */
;;;2708   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
00009a  1d20              ADDS     r0,r4,#4
00009c  f7fffffe          BL       uxListRemove
;;;2709   
;;;2710   					/* Is the task waiting on an event also?  If so remove
;;;2711   					it from the event list. */
;;;2712   					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
0000a0  6aa0              LDR      r0,[r4,#0x28]
0000a2  b118              CBZ      r0,|L53.172|
;;;2713   					{
;;;2714   						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
0000a4  f1040018          ADD      r0,r4,#0x18
0000a8  f7fffffe          BL       uxListRemove
                  |L53.172|
;;;2715   					}
;;;2716   					else
;;;2717   					{
;;;2718   						mtCOVERAGE_TEST_MARKER();
;;;2719   					}
;;;2720   
;;;2721   					/* Place the unblocked task into the appropriate ready
;;;2722   					list. */
;;;2723   					prvAddTaskToReadyList( pxTCB );
0000ac  f894102c          LDRB     r1,[r4,#0x2c]
0000b0  2001              MOVS     r0,#1
0000b2  4088              LSLS     r0,r0,r1
0000b4  491f              LDR      r1,|L53.308|
0000b6  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
0000b8  4308              ORRS     r0,r0,r1
0000ba  491e              LDR      r1,|L53.308|
0000bc  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
0000be  6ae1              LDR      r1,[r4,#0x2c]
0000c0  eb010181          ADD      r1,r1,r1,LSL #2
0000c4  4a1c              LDR      r2,|L53.312|
0000c6  eb020081          ADD      r0,r2,r1,LSL #2
0000ca  1d21              ADDS     r1,r4,#4
0000cc  f7fffffe          BL       vListInsertEnd
;;;2724   
;;;2725   					/* A task being unblocked cannot cause an immediate
;;;2726   					context switch if preemption is turned off. */
;;;2727   					#if (  configUSE_PREEMPTION == 1 )
;;;2728   					{
;;;2729   						/* Preemption is on, but a context switch should
;;;2730   						only be performed if the unblocked task has a
;;;2731   						priority that is equal to or higher than the
;;;2732   						currently executing task. */
;;;2733   						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
0000d0  491a              LDR      r1,|L53.316|
0000d2  6ae0              LDR      r0,[r4,#0x2c]
0000d4  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
0000d6  6ac9              LDR      r1,[r1,#0x2c]
0000d8  4288              CMP      r0,r1
0000da  d3c7              BCC      |L53.108|
;;;2734   						{
;;;2735   							xSwitchRequired = pdTRUE;
0000dc  f04f0801          MOV      r8,#1
0000e0  e7c4              B        |L53.108|
                  |L53.226|
0000e2  bf00              NOP                            ;2681
                  |L53.228|
;;;2736   						}
;;;2737   						else
;;;2738   						{
;;;2739   							mtCOVERAGE_TEST_MARKER();
;;;2740   						}
;;;2741   					}
;;;2742   					#endif /* configUSE_PREEMPTION */
;;;2743   				}
;;;2744   			}
;;;2745   		}
;;;2746   
;;;2747   		/* Tasks of equal priority to the currently running task will share
;;;2748   		processing time (time slice) if preemption is on, and the application
;;;2749   		writer has not explicitly turned time slicing off. */
;;;2750   		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
;;;2751   		{
;;;2752   			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
0000e4  4815              LDR      r0,|L53.316|
0000e6  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
0000e8  6ac0              LDR      r0,[r0,#0x2c]
0000ea  eb000080          ADD      r0,r0,r0,LSL #2
0000ee  4912              LDR      r1,|L53.312|
0000f0  f8510020          LDR      r0,[r1,r0,LSL #2]
0000f4  2801              CMP      r0,#1
0000f6  d901              BLS      |L53.252|
;;;2753   			{
;;;2754   				xSwitchRequired = pdTRUE;
0000f8  f04f0801          MOV      r8,#1
                  |L53.252|
;;;2755   			}
;;;2756   			else
;;;2757   			{
;;;2758   				mtCOVERAGE_TEST_MARKER();
;;;2759   			}
;;;2760   		}
;;;2761   		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
;;;2762   
;;;2763   		#if ( configUSE_TICK_HOOK == 1 )
;;;2764   		{
;;;2765   			/* Guard against the tick hook being called when the pended tick
;;;2766   			count is being unwound (when the scheduler is being unlocked). */
;;;2767   			if( uxPendedTicks == ( UBaseType_t ) 0U )
;;;2768   			{
;;;2769   				vApplicationTickHook();
;;;2770   			}
;;;2771   			else
;;;2772   			{
;;;2773   				mtCOVERAGE_TEST_MARKER();
;;;2774   			}
;;;2775   		}
;;;2776   		#endif /* configUSE_TICK_HOOK */
;;;2777   	}
0000fc  e005              B        |L53.266|
0000fe  e7ff              B        |L53.256|
                  |L53.256|
;;;2778   	else
;;;2779   	{
;;;2780   		++uxPendedTicks;
000100  480f              LDR      r0,|L53.320|
000102  6800              LDR      r0,[r0,#0]  ; uxPendedTicks
000104  1c40              ADDS     r0,r0,#1
000106  490e              LDR      r1,|L53.320|
000108  6008              STR      r0,[r1,#0]  ; uxPendedTicks
                  |L53.266|
;;;2781   
;;;2782   		/* The tick hook gets called at regular intervals, even if the
;;;2783   		scheduler is locked. */
;;;2784   		#if ( configUSE_TICK_HOOK == 1 )
;;;2785   		{
;;;2786   			vApplicationTickHook();
;;;2787   		}
;;;2788   		#endif
;;;2789   	}
;;;2790   
;;;2791   	#if ( configUSE_PREEMPTION == 1 )
;;;2792   	{
;;;2793   		if( xYieldPending != pdFALSE )
00010a  480e              LDR      r0,|L53.324|
00010c  6800              LDR      r0,[r0,#0]  ; xYieldPending
00010e  b108              CBZ      r0,|L53.276|
;;;2794   		{
;;;2795   			xSwitchRequired = pdTRUE;
000110  f04f0801          MOV      r8,#1
                  |L53.276|
;;;2796   		}
;;;2797   		else
;;;2798   		{
;;;2799   			mtCOVERAGE_TEST_MARKER();
;;;2800   		}
;;;2801   	}
;;;2802   	#endif /* configUSE_PREEMPTION */
;;;2803   
;;;2804   	return xSwitchRequired;
000114  4640              MOV      r0,r8
;;;2805   }
000116  e8bd81f0          POP      {r4-r8,pc}
;;;2806   /*-----------------------------------------------------------*/
                          ENDP

00011a  0000              DCW      0x0000
                  |L53.284|
                          DCD      uxSchedulerSuspended
                  |L53.288|
                          DCD      xTickCount
                  |L53.292|
                          DCD      pxDelayedTaskList
                  |L53.296|
                          DCD      pxOverflowDelayedTaskList
                  |L53.300|
                          DCD      xNumOfOverflows
                  |L53.304|
                          DCD      xNextTaskUnblockTime
                  |L53.308|
                          DCD      uxTopReadyPriority
                  |L53.312|
                          DCD      pxReadyTasksLists
                  |L53.316|
                          DCD      pxCurrentTCB
                  |L53.320|
                          DCD      uxPendedTicks
                  |L53.324|
                          DCD      xYieldPending

                          AREA ||i.xTaskNotifyStateClear||, CODE, READONLY, ALIGN=2

                  xTaskNotifyStateClear PROC
;;;4956   
;;;4957   	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
000000  b570              PUSH     {r4-r6,lr}
;;;4958   	{
000002  4605              MOV      r5,r0
;;;4959   	TCB_t *pxTCB;
;;;4960   	BaseType_t xReturn;
;;;4961   
;;;4962   		/* If null is passed in here then it is the calling task that is having
;;;4963   		its notification state cleared. */
;;;4964   		pxTCB = prvGetTCBFromHandle( xTask );
000004  b915              CBNZ     r5,|L54.12|
000006  480a              LDR      r0,|L54.48|
000008  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00000a  e000              B        |L54.14|
                  |L54.12|
00000c  4628              MOV      r0,r5
                  |L54.14|
00000e  4606              MOV      r6,r0
;;;4965   
;;;4966   		taskENTER_CRITICAL();
000010  f7fffffe          BL       vPortEnterCritical
;;;4967   		{
;;;4968   			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
000014  f8960054          LDRB     r0,[r6,#0x54]
000018  2802              CMP      r0,#2
00001a  d104              BNE      |L54.38|
;;;4969   			{
;;;4970   				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
00001c  2000              MOVS     r0,#0
00001e  f8860054          STRB     r0,[r6,#0x54]
;;;4971   				xReturn = pdPASS;
000022  2401              MOVS     r4,#1
000024  e000              B        |L54.40|
                  |L54.38|
;;;4972   			}
;;;4973   			else
;;;4974   			{
;;;4975   				xReturn = pdFAIL;
000026  2400              MOVS     r4,#0
                  |L54.40|
;;;4976   			}
;;;4977   		}
;;;4978   		taskEXIT_CRITICAL();
000028  f7fffffe          BL       vPortExitCritical
;;;4979   
;;;4980   		return xReturn;
00002c  4620              MOV      r0,r4
;;;4981   	}
00002e  bd70              POP      {r4-r6,pc}
;;;4982   
                          ENDP

                  |L54.48|
                          DCD      pxCurrentTCB

                          AREA ||i.xTaskNotifyWait||, CODE, READONLY, ALIGN=2

                  xTaskNotifyWait PROC
;;;4546   
;;;4547   	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4548   	{
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;4549   	BaseType_t xReturn;
;;;4550   
;;;4551   		taskENTER_CRITICAL();
00000c  f7fffffe          BL       vPortEnterCritical
;;;4552   		{
;;;4553   			/* Only block if a notification is not already pending. */
;;;4554   			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
000010  4821              LDR      r0,|L55.152|
000012  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000014  f8900054          LDRB     r0,[r0,#0x54]
000018  2802              CMP      r0,#2
00001a  d018              BEQ      |L55.78|
;;;4555   			{
;;;4556   				/* Clear bits in the task's notification value as bits may get
;;;4557   				set	by the notifying task or interrupt.  This can be used to
;;;4558   				clear the value to zero. */
;;;4559   				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
00001c  491e              LDR      r1,|L55.152|
00001e  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000020  f1010050          ADD      r0,r1,#0x50
000024  6d09              LDR      r1,[r1,#0x50]
000026  43b9              BICS     r1,r1,r7
000028  6001              STR      r1,[r0,#0]
;;;4560   
;;;4561   				/* Mark this task as waiting for a notification. */
;;;4562   				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
00002a  2001              MOVS     r0,#1
00002c  491a              LDR      r1,|L55.152|
00002e  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000030  f8810054          STRB     r0,[r1,#0x54]
;;;4563   
;;;4564   				if( xTicksToWait > ( TickType_t ) 0 )
000034  b15d              CBZ      r5,|L55.78|
;;;4565   				{
;;;4566   					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
000036  2101              MOVS     r1,#1
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;4567   					traceTASK_NOTIFY_WAIT_BLOCK();
;;;4568   
;;;4569   					/* All ports are written to allow a yield in a critical
;;;4570   					section (some will yield immediately, others wait until the
;;;4571   					critical section exits) - but it is not something that
;;;4572   					application code should ever do. */
;;;4573   					portYIELD_WITHIN_API();
00003e  f04f5080          MOV      r0,#0x10000000
000042  4916              LDR      r1,|L55.156|
000044  6008              STR      r0,[r1,#0]
000046  f3bf8f4f          DSB      
00004a  f3bf8f6f          ISB      
                  |L55.78|
;;;4574   				}
;;;4575   				else
;;;4576   				{
;;;4577   					mtCOVERAGE_TEST_MARKER();
;;;4578   				}
;;;4579   			}
;;;4580   			else
;;;4581   			{
;;;4582   				mtCOVERAGE_TEST_MARKER();
;;;4583   			}
;;;4584   		}
;;;4585   		taskEXIT_CRITICAL();
00004e  f7fffffe          BL       vPortExitCritical
;;;4586   
;;;4587   		taskENTER_CRITICAL();
000052  f7fffffe          BL       vPortEnterCritical
;;;4588   		{
;;;4589   			traceTASK_NOTIFY_WAIT();
;;;4590   
;;;4591   			if( pulNotificationValue != NULL )
000056  b11c              CBZ      r4,|L55.96|
;;;4592   			{
;;;4593   				/* Output the current notification value, which may or may not
;;;4594   				have changed. */
;;;4595   				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
000058  480f              LDR      r0,|L55.152|
00005a  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00005c  6d00              LDR      r0,[r0,#0x50]
00005e  6020              STR      r0,[r4,#0]
                  |L55.96|
;;;4596   			}
;;;4597   
;;;4598   			/* If ucNotifyValue is set then either the task never entered the
;;;4599   			blocked state (because a notification was already pending) or the
;;;4600   			task unblocked because of a notification.  Otherwise the task
;;;4601   			unblocked because of a timeout. */
;;;4602   			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
000060  480d              LDR      r0,|L55.152|
000062  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000064  f8900054          LDRB     r0,[r0,#0x54]
000068  2802              CMP      r0,#2
00006a  d001              BEQ      |L55.112|
;;;4603   			{
;;;4604   				/* A notification was not received. */
;;;4605   				xReturn = pdFALSE;
00006c  2600              MOVS     r6,#0
00006e  e008              B        |L55.130|
                  |L55.112|
;;;4606   			}
;;;4607   			else
;;;4608   			{
;;;4609   				/* A notification was already pending or a notification was
;;;4610   				received while the task was waiting. */
;;;4611   				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
000070  4909              LDR      r1,|L55.152|
000072  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000074  f1010050          ADD      r0,r1,#0x50
000078  6d09              LDR      r1,[r1,#0x50]
00007a  ea210108          BIC      r1,r1,r8
00007e  6001              STR      r1,[r0,#0]
;;;4612   				xReturn = pdTRUE;
000080  2601              MOVS     r6,#1
                  |L55.130|
;;;4613   			}
;;;4614   
;;;4615   			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
000082  2000              MOVS     r0,#0
000084  4904              LDR      r1,|L55.152|
000086  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000088  f8810054          STRB     r0,[r1,#0x54]
;;;4616   		}
;;;4617   		taskEXIT_CRITICAL();
00008c  f7fffffe          BL       vPortExitCritical
;;;4618   
;;;4619   		return xReturn;
000090  4630              MOV      r0,r6
;;;4620   	}
000092  e8bd81f0          POP      {r4-r8,pc}
;;;4621   
                          ENDP

000096  0000              DCW      0x0000
                  |L55.152|
                          DCD      pxCurrentTCB
                  |L55.156|
                          DCD      0xe000ed04

                          AREA ||i.xTaskPriorityDisinherit||, CODE, READONLY, ALIGN=2

                  xTaskPriorityDisinherit PROC
;;;3950   
;;;3951   	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
000000  b570              PUSH     {r4-r6,lr}
;;;3952   	{
000002  4605              MOV      r5,r0
;;;3953   	TCB_t * const pxTCB = pxMutexHolder;
000004  462c              MOV      r4,r5
;;;3954   	BaseType_t xReturn = pdFALSE;
000006  2600              MOVS     r6,#0
;;;3955   
;;;3956   		if( pxMutexHolder != NULL )
000008  2d00              CMP      r5,#0
00000a  d055              BEQ      |L56.184|
;;;3957   		{
;;;3958   			/* A task can only have an inherited priority if it holds the mutex.
;;;3959   			If the mutex is held by a task then it cannot be given from an
;;;3960   			interrupt, and if a mutex is given by the holding task then it must
;;;3961   			be the running state task. */
;;;3962   			configASSERT( pxTCB == pxCurrentTCB );
00000c  482b              LDR      r0,|L56.188|
00000e  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000010  4284              CMP      r4,r0
000012  d101              BNE      |L56.24|
000014  2001              MOVS     r0,#1
000016  e000              B        |L56.26|
                  |L56.24|
000018  2000              MOVS     r0,#0
                  |L56.26|
00001a  b950              CBNZ     r0,|L56.50|
00001c  bf00              NOP      
00001e  2040              MOVS     r0,#0x40
000020  f3808811          MSR      BASEPRI,r0
000024  f3bf8f4f          DSB      
000028  f3bf8f6f          ISB      
00002c  bf00              NOP      
00002e  bf00              NOP      
                  |L56.48|
000030  e7fe              B        |L56.48|
                  |L56.50|
;;;3963   			configASSERT( pxTCB->uxMutexesHeld );
000032  6ce0              LDR      r0,[r4,#0x4c]
000034  b950              CBNZ     r0,|L56.76|
000036  bf00              NOP      
000038  2040              MOVS     r0,#0x40
00003a  f3808811          MSR      BASEPRI,r0
00003e  f3bf8f4f          DSB      
000042  f3bf8f6f          ISB      
000046  bf00              NOP      
000048  bf00              NOP      
                  |L56.74|
00004a  e7fe              B        |L56.74|
                  |L56.76|
;;;3964   			( pxTCB->uxMutexesHeld )--;
00004c  6ce0              LDR      r0,[r4,#0x4c]
00004e  1e40              SUBS     r0,r0,#1
000050  64e0              STR      r0,[r4,#0x4c]
;;;3965   
;;;3966   			/* Has the holder of the mutex inherited the priority of another
;;;3967   			task? */
;;;3968   			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
000052  6ca1              LDR      r1,[r4,#0x48]
000054  6ae0              LDR      r0,[r4,#0x2c]
000056  4288              CMP      r0,r1
000058  d02e              BEQ      |L56.184|
;;;3969   			{
;;;3970   				/* Only disinherit if no other mutexes are held. */
;;;3971   				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
00005a  6ce0              LDR      r0,[r4,#0x4c]
00005c  bb60              CBNZ     r0,|L56.184|
;;;3972   				{
;;;3973   					/* A task can only have an inherited priority if it holds
;;;3974   					the mutex.  If the mutex is held by a task then it cannot be
;;;3975   					given from an interrupt, and if a mutex is given by the
;;;3976   					holding task then it must be the running state task.  Remove
;;;3977   					the holding task from the ready list. */
;;;3978   					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
00005e  1d20              ADDS     r0,r4,#4
000060  f7fffffe          BL       uxListRemove
000064  b978              CBNZ     r0,|L56.134|
;;;3979   					{
;;;3980   						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
000066  6ae0              LDR      r0,[r4,#0x2c]
000068  eb000080          ADD      r0,r0,r0,LSL #2
00006c  4914              LDR      r1,|L56.192|
00006e  f8510020          LDR      r0,[r1,r0,LSL #2]
000072  b940              CBNZ     r0,|L56.134|
000074  f894102c          LDRB     r1,[r4,#0x2c]
000078  2001              MOVS     r0,#1
00007a  4088              LSLS     r0,r0,r1
00007c  4911              LDR      r1,|L56.196|
00007e  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000080  4381              BICS     r1,r1,r0
000082  4810              LDR      r0,|L56.196|
000084  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L56.134|
;;;3981   					}
;;;3982   					else
;;;3983   					{
;;;3984   						mtCOVERAGE_TEST_MARKER();
;;;3985   					}
;;;3986   
;;;3987   					/* Disinherit the priority before adding the task into the
;;;3988   					new	ready list. */
;;;3989   					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
;;;3990   					pxTCB->uxPriority = pxTCB->uxBasePriority;
000086  6ca0              LDR      r0,[r4,#0x48]
000088  62e0              STR      r0,[r4,#0x2c]
;;;3991   
;;;3992   					/* Reset the event list item value.  It cannot be in use for
;;;3993   					any other purpose if this task is running, and it must be
;;;3994   					running to give back the mutex. */
;;;3995   					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
00008a  6ae0              LDR      r0,[r4,#0x2c]
00008c  f1c00005          RSB      r0,r0,#5
000090  61a0              STR      r0,[r4,#0x18]
;;;3996   					prvAddTaskToReadyList( pxTCB );
000092  f894102c          LDRB     r1,[r4,#0x2c]
000096  2001              MOVS     r0,#1
000098  4088              LSLS     r0,r0,r1
00009a  490a              LDR      r1,|L56.196|
00009c  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
00009e  4308              ORRS     r0,r0,r1
0000a0  4908              LDR      r1,|L56.196|
0000a2  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
0000a4  6ae1              LDR      r1,[r4,#0x2c]
0000a6  eb010181          ADD      r1,r1,r1,LSL #2
0000aa  4a05              LDR      r2,|L56.192|
0000ac  eb020081          ADD      r0,r2,r1,LSL #2
0000b0  1d21              ADDS     r1,r4,#4
0000b2  f7fffffe          BL       vListInsertEnd
;;;3997   
;;;3998   					/* Return true to indicate that a context switch is required.
;;;3999   					This is only actually required in the corner case whereby
;;;4000   					multiple mutexes were held and the mutexes were given back
;;;4001   					in an order different to that in which they were taken.
;;;4002   					If a context switch did not occur when the first mutex was
;;;4003   					returned, even if a task was waiting on it, then a context
;;;4004   					switch should occur when the last mutex is returned whether
;;;4005   					a task is waiting on it or not. */
;;;4006   					xReturn = pdTRUE;
0000b6  2601              MOVS     r6,#1
                  |L56.184|
;;;4007   				}
;;;4008   				else
;;;4009   				{
;;;4010   					mtCOVERAGE_TEST_MARKER();
;;;4011   				}
;;;4012   			}
;;;4013   			else
;;;4014   			{
;;;4015   				mtCOVERAGE_TEST_MARKER();
;;;4016   			}
;;;4017   		}
;;;4018   		else
;;;4019   		{
;;;4020   			mtCOVERAGE_TEST_MARKER();
;;;4021   		}
;;;4022   
;;;4023   		return xReturn;
0000b8  4630              MOV      r0,r6
;;;4024   	}
0000ba  bd70              POP      {r4-r6,pc}
;;;4025   
                          ENDP

                  |L56.188|
                          DCD      pxCurrentTCB
                  |L56.192|
                          DCD      pxReadyTasksLists
                  |L56.196|
                          DCD      uxTopReadyPriority

                          AREA ||i.xTaskPriorityInherit||, CODE, READONLY, ALIGN=2

                  xTaskPriorityInherit PROC
;;;3863   
;;;3864   	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
000000  b570              PUSH     {r4-r6,lr}
;;;3865   	{
000002  4605              MOV      r5,r0
;;;3866   	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
000004  462c              MOV      r4,r5
;;;3867   	BaseType_t xReturn = pdFALSE;
000006  2600              MOVS     r6,#0
;;;3868   
;;;3869   		/* If the mutex was given back by an interrupt while the queue was
;;;3870   		locked then the mutex holder might now be NULL.  _RB_ Is this still
;;;3871   		needed as interrupts can no longer use mutexes? */
;;;3872   		if( pxMutexHolder != NULL )
000008  2d00              CMP      r5,#0
00000a  d054              BEQ      |L57.182|
;;;3873   		{
;;;3874   			/* If the holder of the mutex has a priority below the priority of
;;;3875   			the task attempting to obtain the mutex then it will temporarily
;;;3876   			inherit the priority of the task attempting to obtain the mutex. */
;;;3877   			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
00000c  492b              LDR      r1,|L57.188|
00000e  6ae0              LDR      r0,[r4,#0x2c]
000010  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000012  6ac9              LDR      r1,[r1,#0x2c]
000014  4288              CMP      r0,r1
000016  d247              BCS      |L57.168|
;;;3878   			{
;;;3879   				/* Adjust the mutex holder state to account for its new
;;;3880   				priority.  Only reset the event list item value if the value is
;;;3881   				not being used for anything else. */
;;;3882   				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
000018  69a0              LDR      r0,[r4,#0x18]
00001a  f0004000          AND      r0,r0,#0x80000000
00001e  b928              CBNZ     r0,|L57.44|
;;;3883   				{
;;;3884   					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000020  4826              LDR      r0,|L57.188|
000022  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000024  6ac0              LDR      r0,[r0,#0x2c]
000026  f1c00005          RSB      r0,r0,#5
00002a  61a0              STR      r0,[r4,#0x18]
                  |L57.44|
;;;3885   				}
;;;3886   				else
;;;3887   				{
;;;3888   					mtCOVERAGE_TEST_MARKER();
;;;3889   				}
;;;3890   
;;;3891   				/* If the task being modified is in the ready state it will need
;;;3892   				to be moved into a new list. */
;;;3893   				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
00002c  6ae1              LDR      r1,[r4,#0x2c]
00002e  eb010181          ADD      r1,r1,r1,LSL #2
000032  4a23              LDR      r2,|L57.192|
000034  eb020181          ADD      r1,r2,r1,LSL #2
000038  6960              LDR      r0,[r4,#0x14]
00003a  4288              CMP      r0,r1
00003c  d101              BNE      |L57.66|
00003e  2001              MOVS     r0,#1
000040  e000              B        |L57.68|
                  |L57.66|
000042  2000              MOVS     r0,#0
                  |L57.68|
000044  b350              CBZ      r0,|L57.156|
;;;3894   				{
;;;3895   					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
000046  1d20              ADDS     r0,r4,#4
000048  f7fffffe          BL       uxListRemove
00004c  b978              CBNZ     r0,|L57.110|
;;;3896   					{
;;;3897   						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
00004e  6ae0              LDR      r0,[r4,#0x2c]
000050  eb000080          ADD      r0,r0,r0,LSL #2
000054  491a              LDR      r1,|L57.192|
000056  f8510020          LDR      r0,[r1,r0,LSL #2]
00005a  b940              CBNZ     r0,|L57.110|
00005c  f894102c          LDRB     r1,[r4,#0x2c]
000060  2001              MOVS     r0,#1
000062  4088              LSLS     r0,r0,r1
000064  4917              LDR      r1,|L57.196|
000066  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000068  4381              BICS     r1,r1,r0
00006a  4816              LDR      r0,|L57.196|
00006c  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L57.110|
;;;3898   					}
;;;3899   					else
;;;3900   					{
;;;3901   						mtCOVERAGE_TEST_MARKER();
;;;3902   					}
;;;3903   
;;;3904   					/* Inherit the priority before being moved into the new list. */
;;;3905   					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
00006e  4813              LDR      r0,|L57.188|
000070  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000072  6ac0              LDR      r0,[r0,#0x2c]
000074  62e0              STR      r0,[r4,#0x2c]
;;;3906   					prvAddTaskToReadyList( pxMutexHolderTCB );
000076  f894102c          LDRB     r1,[r4,#0x2c]
00007a  2001              MOVS     r0,#1
00007c  4088              LSLS     r0,r0,r1
00007e  4911              LDR      r1,|L57.196|
000080  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000082  4308              ORRS     r0,r0,r1
000084  490f              LDR      r1,|L57.196|
000086  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000088  6ae1              LDR      r1,[r4,#0x2c]
00008a  eb010181          ADD      r1,r1,r1,LSL #2
00008e  4a0c              LDR      r2,|L57.192|
000090  eb020081          ADD      r0,r2,r1,LSL #2
000094  1d21              ADDS     r1,r4,#4
000096  f7fffffe          BL       vListInsertEnd
00009a  e003              B        |L57.164|
                  |L57.156|
;;;3907   				}
;;;3908   				else
;;;3909   				{
;;;3910   					/* Just inherit the priority. */
;;;3911   					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
00009c  4807              LDR      r0,|L57.188|
00009e  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
0000a0  6ac0              LDR      r0,[r0,#0x2c]
0000a2  62e0              STR      r0,[r4,#0x2c]
                  |L57.164|
;;;3912   				}
;;;3913   
;;;3914   				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
;;;3915   
;;;3916   				/* Inheritance occurred. */
;;;3917   				xReturn = pdTRUE;
0000a4  2601              MOVS     r6,#1
0000a6  e006              B        |L57.182|
                  |L57.168|
;;;3918   			}
;;;3919   			else
;;;3920   			{
;;;3921   				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
0000a8  4904              LDR      r1,|L57.188|
0000aa  6ca0              LDR      r0,[r4,#0x48]
0000ac  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
0000ae  6ac9              LDR      r1,[r1,#0x2c]
0000b0  4288              CMP      r0,r1
0000b2  d200              BCS      |L57.182|
;;;3922   				{
;;;3923   					/* The base priority of the mutex holder is lower than the
;;;3924   					priority of the task attempting to take the mutex, but the
;;;3925   					current priority of the mutex holder is not lower than the
;;;3926   					priority of the task attempting to take the mutex.
;;;3927   					Therefore the mutex holder must have already inherited a
;;;3928   					priority, but inheritance would have occurred if that had
;;;3929   					not been the case. */
;;;3930   					xReturn = pdTRUE;
0000b4  2601              MOVS     r6,#1
                  |L57.182|
;;;3931   				}
;;;3932   				else
;;;3933   				{
;;;3934   					mtCOVERAGE_TEST_MARKER();
;;;3935   				}
;;;3936   			}
;;;3937   		}
;;;3938   		else
;;;3939   		{
;;;3940   			mtCOVERAGE_TEST_MARKER();
;;;3941   		}
;;;3942   
;;;3943   		return xReturn;
0000b6  4630              MOV      r0,r6
;;;3944   	}
0000b8  bd70              POP      {r4-r6,pc}
;;;3945   
                          ENDP

0000ba  0000              DCW      0x0000
                  |L57.188|
                          DCD      pxCurrentTCB
                  |L57.192|
                          DCD      pxReadyTasksLists
                  |L57.196|
                          DCD      uxTopReadyPriority

                          AREA ||i.xTaskRemoveFromEventList||, CODE, READONLY, ALIGN=2

                  xTaskRemoveFromEventList PROC
;;;3046   
;;;3047   BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
000000  b570              PUSH     {r4-r6,lr}
;;;3048   {
000002  4606              MOV      r6,r0
;;;3049   TCB_t *pxUnblockedTCB;
;;;3050   BaseType_t xReturn;
;;;3051   
;;;3052   	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
;;;3053   	called from a critical section within an ISR. */
;;;3054   
;;;3055   	/* The event list is sorted in priority order, so the first in the list can
;;;3056   	be removed as it is known to be the highest priority.  Remove the TCB from
;;;3057   	the delayed list, and add it to the ready list.
;;;3058   
;;;3059   	If an event is for a queue that is locked then this function will never
;;;3060   	get called - the lock count on the queue will get modified instead.  This
;;;3061   	means exclusive access to the event list is guaranteed here.
;;;3062   
;;;3063   	This function assumes that a check has already been made to ensure that
;;;3064   	pxEventList is not empty. */
;;;3065   	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
000004  68f0              LDR      r0,[r6,#0xc]
000006  68c4              LDR      r4,[r0,#0xc]
;;;3066   	configASSERT( pxUnblockedTCB );
000008  b954              CBNZ     r4,|L58.32|
00000a  bf00              NOP      
00000c  2040              MOVS     r0,#0x40
00000e  f3808811          MSR      BASEPRI,r0
000012  f3bf8f4f          DSB      
000016  f3bf8f6f          ISB      
00001a  bf00              NOP      
00001c  bf00              NOP      
                  |L58.30|
00001e  e7fe              B        |L58.30|
                  |L58.32|
;;;3067   	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
000020  f1040018          ADD      r0,r4,#0x18
000024  f7fffffe          BL       uxListRemove
;;;3068   
;;;3069   	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000028  4815              LDR      r0,|L58.128|
00002a  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00002c  b9a8              CBNZ     r0,|L58.90|
;;;3070   	{
;;;3071   		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
00002e  1d20              ADDS     r0,r4,#4
000030  f7fffffe          BL       uxListRemove
;;;3072   		prvAddTaskToReadyList( pxUnblockedTCB );
000034  f894102c          LDRB     r1,[r4,#0x2c]
000038  2001              MOVS     r0,#1
00003a  4088              LSLS     r0,r0,r1
00003c  4911              LDR      r1,|L58.132|
00003e  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000040  4308              ORRS     r0,r0,r1
000042  4910              LDR      r1,|L58.132|
000044  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000046  6ae1              LDR      r1,[r4,#0x2c]
000048  eb010181          ADD      r1,r1,r1,LSL #2
00004c  4a0e              LDR      r2,|L58.136|
00004e  eb020081          ADD      r0,r2,r1,LSL #2
000052  1d21              ADDS     r1,r4,#4
000054  f7fffffe          BL       vListInsertEnd
000058  e004              B        |L58.100|
                  |L58.90|
;;;3073   	}
;;;3074   	else
;;;3075   	{
;;;3076   		/* The delayed and ready lists cannot be accessed, so hold this task
;;;3077   		pending until the scheduler is resumed. */
;;;3078   		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
00005a  f1040118          ADD      r1,r4,#0x18
00005e  480b              LDR      r0,|L58.140|
000060  f7fffffe          BL       vListInsertEnd
                  |L58.100|
;;;3079   	}
;;;3080   
;;;3081   	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
000064  490a              LDR      r1,|L58.144|
000066  6ae0              LDR      r0,[r4,#0x2c]
000068  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
00006a  6ac9              LDR      r1,[r1,#0x2c]
00006c  4288              CMP      r0,r1
00006e  d904              BLS      |L58.122|
;;;3082   	{
;;;3083   		/* Return true if the task removed from the event list has a higher
;;;3084   		priority than the calling task.  This allows the calling task to know if
;;;3085   		it should force a context switch now. */
;;;3086   		xReturn = pdTRUE;
000070  2501              MOVS     r5,#1
;;;3087   
;;;3088   		/* Mark that a yield is pending in case the user is not using the
;;;3089   		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
;;;3090   		xYieldPending = pdTRUE;
000072  2001              MOVS     r0,#1
000074  4907              LDR      r1,|L58.148|
000076  6008              STR      r0,[r1,#0]  ; xYieldPending
000078  e000              B        |L58.124|
                  |L58.122|
;;;3091   	}
;;;3092   	else
;;;3093   	{
;;;3094   		xReturn = pdFALSE;
00007a  2500              MOVS     r5,#0
                  |L58.124|
;;;3095   	}
;;;3096   
;;;3097   	#if( configUSE_TICKLESS_IDLE != 0 )
;;;3098   	{
;;;3099   		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
;;;3100   		might be set to the blocked task's time out time.  If the task is
;;;3101   		unblocked for a reason other than a timeout xNextTaskUnblockTime is
;;;3102   		normally left unchanged, because it is automatically reset to a new
;;;3103   		value when the tick count equals xNextTaskUnblockTime.  However if
;;;3104   		tickless idling is used it might be more important to enter sleep mode
;;;3105   		at the earliest possible time - so reset xNextTaskUnblockTime here to
;;;3106   		ensure it is updated at the earliest possible time. */
;;;3107   		prvResetNextTaskUnblockTime();
;;;3108   	}
;;;3109   	#endif
;;;3110   
;;;3111   	return xReturn;
00007c  4628              MOV      r0,r5
;;;3112   }
00007e  bd70              POP      {r4-r6,pc}
;;;3113   /*-----------------------------------------------------------*/
                          ENDP

                  |L58.128|
                          DCD      uxSchedulerSuspended
                  |L58.132|
                          DCD      uxTopReadyPriority
                  |L58.136|
                          DCD      pxReadyTasksLists
                  |L58.140|
                          DCD      xPendingReadyList
                  |L58.144|
                          DCD      pxCurrentTCB
                  |L58.148|
                          DCD      xYieldPending

                          AREA ||i.xTaskResumeAll||, CODE, READONLY, ALIGN=2

                  xTaskResumeAll PROC
;;;2144   
;;;2145   BaseType_t xTaskResumeAll( void )
000000  b570              PUSH     {r4-r6,lr}
;;;2146   {
;;;2147   TCB_t *pxTCB = NULL;
000002  2400              MOVS     r4,#0
;;;2148   BaseType_t xAlreadyYielded = pdFALSE;
000004  2600              MOVS     r6,#0
;;;2149   
;;;2150   	/* If uxSchedulerSuspended is zero then this function does not match a
;;;2151   	previous call to vTaskSuspendAll(). */
;;;2152   	configASSERT( uxSchedulerSuspended );
000006  4836              LDR      r0,|L59.224|
000008  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00000a  b950              CBNZ     r0,|L59.34|
00000c  bf00              NOP      
00000e  2040              MOVS     r0,#0x40
000010  f3808811          MSR      BASEPRI,r0
000014  f3bf8f4f          DSB      
000018  f3bf8f6f          ISB      
00001c  bf00              NOP      
00001e  bf00              NOP      
                  |L59.32|
000020  e7fe              B        |L59.32|
                  |L59.34|
;;;2153   
;;;2154   	/* It is possible that an ISR caused a task to be removed from an event
;;;2155   	list while the scheduler was suspended.  If this was the case then the
;;;2156   	removed task will have been added to the xPendingReadyList.  Once the
;;;2157   	scheduler has been resumed it is safe to move all the pending ready
;;;2158   	tasks from this list into their appropriate ready list. */
;;;2159   	taskENTER_CRITICAL();
000022  f7fffffe          BL       vPortEnterCritical
;;;2160   	{
;;;2161   		--uxSchedulerSuspended;
000026  482e              LDR      r0,|L59.224|
000028  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00002a  1e40              SUBS     r0,r0,#1
00002c  492c              LDR      r1,|L59.224|
00002e  6008              STR      r0,[r1,#0]  ; uxSchedulerSuspended
;;;2162   
;;;2163   		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000030  4608              MOV      r0,r1
000032  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000034  2800              CMP      r0,#0
000036  d14f              BNE      |L59.216|
;;;2164   		{
;;;2165   			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
000038  482a              LDR      r0,|L59.228|
00003a  6800              LDR      r0,[r0,#0]  ; uxCurrentNumberOfTasks
00003c  2800              CMP      r0,#0
00003e  d04b              BEQ      |L59.216|
;;;2166   			{
;;;2167   				/* Move any readied tasks from the pending list into the
;;;2168   				appropriate ready list. */
;;;2169   				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
000040  e024              B        |L59.140|
                  |L59.66|
;;;2170   				{
;;;2171   					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
000042  4829              LDR      r0,|L59.232|
000044  68c0              LDR      r0,[r0,#0xc]
000046  68c4              LDR      r4,[r0,#0xc]
;;;2172   					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
000048  f1040018          ADD      r0,r4,#0x18
00004c  f7fffffe          BL       uxListRemove
;;;2173   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
000050  1d20              ADDS     r0,r4,#4
000052  f7fffffe          BL       uxListRemove
;;;2174   					prvAddTaskToReadyList( pxTCB );
000056  f894102c          LDRB     r1,[r4,#0x2c]
00005a  2001              MOVS     r0,#1
00005c  4088              LSLS     r0,r0,r1
00005e  4923              LDR      r1,|L59.236|
000060  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000062  4308              ORRS     r0,r0,r1
000064  4921              LDR      r1,|L59.236|
000066  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000068  6ae1              LDR      r1,[r4,#0x2c]
00006a  eb010181          ADD      r1,r1,r1,LSL #2
00006e  4a20              LDR      r2,|L59.240|
000070  eb020081          ADD      r0,r2,r1,LSL #2
000074  1d21              ADDS     r1,r4,#4
000076  f7fffffe          BL       vListInsertEnd
;;;2175   
;;;2176   					/* If the moved task has a priority higher than the current
;;;2177   					task then a yield must be performed. */
;;;2178   					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
00007a  491e              LDR      r1,|L59.244|
00007c  6ae0              LDR      r0,[r4,#0x2c]
00007e  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000080  6ac9              LDR      r1,[r1,#0x2c]
000082  4288              CMP      r0,r1
000084  d302              BCC      |L59.140|
;;;2179   					{
;;;2180   						xYieldPending = pdTRUE;
000086  2001              MOVS     r0,#1
000088  491b              LDR      r1,|L59.248|
00008a  6008              STR      r0,[r1,#0]  ; xYieldPending
                  |L59.140|
00008c  4816              LDR      r0,|L59.232|
00008e  6800              LDR      r0,[r0,#0]            ;2169  ; xPendingReadyList
000090  b908              CBNZ     r0,|L59.150|
000092  2001              MOVS     r0,#1                 ;2169
000094  e000              B        |L59.152|
                  |L59.150|
000096  2000              MOVS     r0,#0                 ;2169
                  |L59.152|
000098  2800              CMP      r0,#0                 ;2169
00009a  d0d2              BEQ      |L59.66|
;;;2181   					}
;;;2182   					else
;;;2183   					{
;;;2184   						mtCOVERAGE_TEST_MARKER();
;;;2185   					}
;;;2186   				}
;;;2187   
;;;2188   				if( pxTCB != NULL )
00009c  b10c              CBZ      r4,|L59.162|
;;;2189   				{
;;;2190   					/* A task was unblocked while the scheduler was suspended,
;;;2191   					which may have prevented the next unblock time from being
;;;2192   					re-calculated, in which case re-calculate it now.  Mainly
;;;2193   					important for low power tickless implementations, where
;;;2194   					this can prevent an unnecessary exit from low power
;;;2195   					state. */
;;;2196   					prvResetNextTaskUnblockTime();
00009e  f7fffffe          BL       prvResetNextTaskUnblockTime
                  |L59.162|
;;;2197   				}
;;;2198   
;;;2199   				/* If any ticks occurred while the scheduler was suspended then
;;;2200   				they should be processed now.  This ensures the tick count does
;;;2201   				not	slip, and that any delayed tasks are resumed at the correct
;;;2202   				time. */
;;;2203   				{
;;;2204   					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
0000a2  4816              LDR      r0,|L59.252|
0000a4  6805              LDR      r5,[r0,#0]  ; uxPendedTicks
;;;2205   
;;;2206   					if( uxPendedCounts > ( UBaseType_t ) 0U )
0000a6  b165              CBZ      r5,|L59.194|
;;;2207   					{
;;;2208   						do
0000a8  bf00              NOP      
                  |L59.170|
;;;2209   						{
;;;2210   							if( xTaskIncrementTick() != pdFALSE )
0000aa  f7fffffe          BL       xTaskIncrementTick
0000ae  b110              CBZ      r0,|L59.182|
;;;2211   							{
;;;2212   								xYieldPending = pdTRUE;
0000b0  2001              MOVS     r0,#1
0000b2  4911              LDR      r1,|L59.248|
0000b4  6008              STR      r0,[r1,#0]  ; xYieldPending
                  |L59.182|
;;;2213   							}
;;;2214   							else
;;;2215   							{
;;;2216   								mtCOVERAGE_TEST_MARKER();
;;;2217   							}
;;;2218   							--uxPendedCounts;
0000b6  1e6d              SUBS     r5,r5,#1
;;;2219   						} while( uxPendedCounts > ( UBaseType_t ) 0U );
0000b8  2d00              CMP      r5,#0
0000ba  d1f6              BNE      |L59.170|
;;;2220   
;;;2221   						uxPendedTicks = 0;
0000bc  2000              MOVS     r0,#0
0000be  490f              LDR      r1,|L59.252|
0000c0  6008              STR      r0,[r1,#0]  ; uxPendedTicks
                  |L59.194|
;;;2222   					}
;;;2223   					else
;;;2224   					{
;;;2225   						mtCOVERAGE_TEST_MARKER();
;;;2226   					}
;;;2227   				}
;;;2228   
;;;2229   				if( xYieldPending != pdFALSE )
0000c2  480d              LDR      r0,|L59.248|
0000c4  6800              LDR      r0,[r0,#0]  ; xYieldPending
0000c6  b138              CBZ      r0,|L59.216|
;;;2230   				{
;;;2231   					#if( configUSE_PREEMPTION != 0 )
;;;2232   					{
;;;2233   						xAlreadyYielded = pdTRUE;
0000c8  2601              MOVS     r6,#1
;;;2234   					}
;;;2235   					#endif
;;;2236   					taskYIELD_IF_USING_PREEMPTION();
0000ca  0730              LSLS     r0,r6,#28
0000cc  490c              LDR      r1,|L59.256|
0000ce  6008              STR      r0,[r1,#0]
0000d0  f3bf8f4f          DSB      
0000d4  f3bf8f6f          ISB      
                  |L59.216|
;;;2237   				}
;;;2238   				else
;;;2239   				{
;;;2240   					mtCOVERAGE_TEST_MARKER();
;;;2241   				}
;;;2242   			}
;;;2243   		}
;;;2244   		else
;;;2245   		{
;;;2246   			mtCOVERAGE_TEST_MARKER();
;;;2247   		}
;;;2248   	}
;;;2249   	taskEXIT_CRITICAL();
0000d8  f7fffffe          BL       vPortExitCritical
;;;2250   
;;;2251   	return xAlreadyYielded;
0000dc  4630              MOV      r0,r6
;;;2252   }
0000de  bd70              POP      {r4-r6,pc}
;;;2253   /*-----------------------------------------------------------*/
                          ENDP

                  |L59.224|
                          DCD      uxSchedulerSuspended
                  |L59.228|
                          DCD      uxCurrentNumberOfTasks
                  |L59.232|
                          DCD      xPendingReadyList
                  |L59.236|
                          DCD      uxTopReadyPriority
                  |L59.240|
                          DCD      pxReadyTasksLists
                  |L59.244|
                          DCD      pxCurrentTCB
                  |L59.248|
                          DCD      xYieldPending
                  |L59.252|
                          DCD      uxPendedTicks
                  |L59.256|
                          DCD      0xe000ed04

                          AREA ||i.xTaskResumeFromISR||, CODE, READONLY, ALIGN=2

                  xTaskResumeFromISR PROC
;;;1868   
;;;1869   	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1870   	{
000004  4606              MOV      r6,r0
;;;1871   	BaseType_t xYieldRequired = pdFALSE;
000006  2700              MOVS     r7,#0
;;;1872   	TCB_t * const pxTCB = xTaskToResume;
000008  4634              MOV      r4,r6
;;;1873   	UBaseType_t uxSavedInterruptStatus;
;;;1874   
;;;1875   		configASSERT( xTaskToResume );
00000a  b956              CBNZ     r6,|L60.34|
00000c  bf00              NOP      
00000e  2040              MOVS     r0,#0x40
000010  f3808811          MSR      BASEPRI,r0
000014  f3bf8f4f          DSB      
000018  f3bf8f6f          ISB      
00001c  bf00              NOP      
00001e  bf00              NOP      
                  |L60.32|
000020  e7fe              B        |L60.32|
                  |L60.34|
;;;1876   
;;;1877   		/* RTOS ports that support interrupt nesting have the concept of a
;;;1878   		maximum	system call (or maximum API call) interrupt priority.
;;;1879   		Interrupts that are	above the maximum system call priority are keep
;;;1880   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;1881   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;1882   		is defined in FreeRTOSConfig.h then
;;;1883   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1884   		failure if a FreeRTOS API function is called from an interrupt that has
;;;1885   		been assigned a priority above the configured maximum system call
;;;1886   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;1887   		from interrupts	that have been assigned a priority at or (logically)
;;;1888   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;1889   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;1890   		simple as possible.  More information (albeit Cortex-M specific) is
;;;1891   		provided on the following link:
;;;1892   		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1893   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
000022  f7fffffe          BL       vPortValidateInterruptPriority
;;;1894   
;;;1895   		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
000026  bf00              NOP      
000028  2140              MOVS     r1,#0x40
00002a  f3ef8011          MRS      r0,BASEPRI
00002e  f3818811          MSR      BASEPRI,r1
000032  f3bf8f4f          DSB      
000036  f3bf8f6f          ISB      
00003a  bf00              NOP      
00003c  4605              MOV      r5,r0
;;;1896   		{
;;;1897   			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       prvTaskIsTaskSuspended
000044  b320              CBZ      r0,|L60.144|
;;;1898   			{
;;;1899   				traceTASK_RESUME_FROM_ISR( pxTCB );
;;;1900   
;;;1901   				/* Check the ready lists can be accessed. */
;;;1902   				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000046  4816              LDR      r0,|L60.160|
000048  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00004a  b9e0              CBNZ     r0,|L60.134|
;;;1903   				{
;;;1904   					/* Ready lists can be accessed so move the task from the
;;;1905   					suspended list to the ready list directly. */
;;;1906   					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
00004c  4915              LDR      r1,|L60.164|
00004e  6ae0              LDR      r0,[r4,#0x2c]
000050  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000052  6ac9              LDR      r1,[r1,#0x2c]
000054  4288              CMP      r0,r1
000056  d300              BCC      |L60.90|
;;;1907   					{
;;;1908   						xYieldRequired = pdTRUE;
000058  2701              MOVS     r7,#1
                  |L60.90|
;;;1909   					}
;;;1910   					else
;;;1911   					{
;;;1912   						mtCOVERAGE_TEST_MARKER();
;;;1913   					}
;;;1914   
;;;1915   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
00005a  1d20              ADDS     r0,r4,#4
00005c  f7fffffe          BL       uxListRemove
;;;1916   					prvAddTaskToReadyList( pxTCB );
000060  f894102c          LDRB     r1,[r4,#0x2c]
000064  2001              MOVS     r0,#1
000066  4088              LSLS     r0,r0,r1
000068  490f              LDR      r1,|L60.168|
00006a  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
00006c  4308              ORRS     r0,r0,r1
00006e  490e              LDR      r1,|L60.168|
000070  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000072  6ae1              LDR      r1,[r4,#0x2c]
000074  eb010181          ADD      r1,r1,r1,LSL #2
000078  4a0c              LDR      r2,|L60.172|
00007a  eb020081          ADD      r0,r2,r1,LSL #2
00007e  1d21              ADDS     r1,r4,#4
000080  f7fffffe          BL       vListInsertEnd
000084  e004              B        |L60.144|
                  |L60.134|
;;;1917   				}
;;;1918   				else
;;;1919   				{
;;;1920   					/* The delayed or ready lists cannot be accessed so the task
;;;1921   					is held in the pending ready list until the scheduler is
;;;1922   					unsuspended. */
;;;1923   					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
000086  f1040118          ADD      r1,r4,#0x18
00008a  4809              LDR      r0,|L60.176|
00008c  f7fffffe          BL       vListInsertEnd
                  |L60.144|
;;;1924   				}
;;;1925   			}
;;;1926   			else
;;;1927   			{
;;;1928   				mtCOVERAGE_TEST_MARKER();
;;;1929   			}
;;;1930   		}
;;;1931   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
000090  bf00              NOP      
000092  f3858811          MSR      BASEPRI,r5
000096  bf00              NOP      
;;;1932   
;;;1933   		return xYieldRequired;
000098  4638              MOV      r0,r7
;;;1934   	}
00009a  e8bd81f0          POP      {r4-r8,pc}
;;;1935   
                          ENDP

00009e  0000              DCW      0x0000
                  |L60.160|
                          DCD      uxSchedulerSuspended
                  |L60.164|
                          DCD      pxCurrentTCB
                  |L60.168|
                          DCD      uxTopReadyPriority
                  |L60.172|
                          DCD      pxReadyTasksLists
                  |L60.176|
                          DCD      xPendingReadyList

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pxReadyTasksLists
                          %        100
                  xDelayedTaskList1
                          %        20
                  xDelayedTaskList2
                          %        20
                  xPendingReadyList
                          %        20
                  xTasksWaitingTermination
                          %        20
                  xSuspendedTaskList
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  pxCurrentTCB
                          DCD      0x00000000
                  pxDelayedTaskList
                          DCD      0x00000000
                  pxOverflowDelayedTaskList
                          DCD      0x00000000
                  uxDeletedTasksWaitingCleanUp
                          DCD      0x00000000
                  uxCurrentNumberOfTasks
                          DCD      0x00000000
                  xTickCount
                          DCD      0x00000000
                  uxTopReadyPriority
                          DCD      0x00000000
                  xSchedulerRunning
                          DCD      0x00000000
                  uxPendedTicks
                          DCD      0x00000000
                  xYieldPending
                          DCD      0x00000000
                  xNumOfOverflows
                          DCD      0x00000000
                  uxTaskNumber
                          DCD      0x00000000
                  xNextTaskUnblockTime
                          DCD      0x00000000
                  xIdleTaskHandle
                          DCD      0x00000000
                  uxSchedulerSuspended
                          DCD      0x00000000
